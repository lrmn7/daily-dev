{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"donation/","title":"\u2764\ufe0fDonations","text":"<p>Find my blog, documentation, or projects helpful or interesting? If so, micro-donations are greatly appreciated!</p>"},{"location":"donation/#buy-me-a-coffe","title":"Buy me a coffe \ud83d\udfe2","text":""},{"location":"donation/#ko-fi","title":"Ko-fi\ud83d\udfe0","text":""},{"location":"donation/#trakteerid","title":"Trakteer.id","text":""},{"location":"profile/","title":"\ud83d\udc35Profile","text":""},{"location":"profile/#about","title":"About","text":"<p>Hey Greetings, I'm L RMN\ud83d\udc4b\ud83c\udffc,  I'm just your average person with a dabbling of coding knowledge and zero experience in virtual photography. When I'm not scrolling through cat videos on Instagram, I like to pretend to work on projects, hang out with people who barely tolerate me, read books (mostly for the pictures), listen to music, go on adventures (to the bed and back), and daydream about new ideas that I will likely never act on. \ud83d\uddff \ud83d\uddff</p> <p>Despite my general cluelessness, I've always been curious about the world. As a kid hahaha, I loved taking things apart and pretending to know how to put them back together While my endeavors in coding and virtual photography have been underwhelming, I'm confident that my boundless enthusiasm and lack of expertise will carry me to new heights (or maybe just to the coffee shop). So if you're looking for someone who is mediocre at everything and has a knack for making bad jokes, I'm your guy! \ud83d\ude05</p>"},{"location":"profile/#contact","title":"Contact","text":"<p>Let's be awesome together!  if you're looking for someone who is mediocre at everything and has a knack for making bad jokes, I'm your guy!   don't hesitate to contact me!\ud83d\ude0a</p> <ul> <li> GitHub</li> <li> Instagram</li> <li> Twitter</li> <li> Youtube</li> <li> Steam</li> <li> Pinterest</li> <li> Photography</li> </ul>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/","title":"How do i develop my portfolio website blog","text":"<p>Last updated: February 7, 2019</p> <p>My experience about developing my first portfolio website and a blog using NextJS and a headless CMS.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#motivation","title":"Motivation","text":"<p>I've been always thinking about launching my own website with my custom domain name (LRMN.is-a.dev)</p> <p>So, \"what about blog?\" you may ask. Yeah, blog also has been in my project list for some time. I always wanted to make a blog project using some of the latest technologies. However, I've been busy with my works and other projects so that blog project has never been started.</p> <p>In these days, I tend to develop my own projects with the focus in good quality rather than quantity.  I want to write down my experiences and challenges.  Thus, I decided to make my own blog. Plus, at this point, I have decent experiences and confidence to develop this project.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#tech-stack","title":"Tech Stack","text":"<p>For the front-end, I wanted to use React. But React alone is not good enough for SEO; and I did have to consider many factors like routing, image optimization etc. So, I chose NextJS as my main front-end stack. And of course TypeScript for type checking. (It's said that you'll love TypeScript when you're used to it \ud83d\ude09)</p> <p>For styling, I use TailwindCSS. This is because I love developer experience that Tailwind gives and it has a lot of flexibilities compared to other component UI libraries like MUI or React Bootstrap.</p> <p>All contents of this project reside within the GitHub repository. All my blog posts (including this one) are written in Markdown file format since I'm very used to with this. But to write Markdown along with its frontmatter effortlessly, I use Forestry headless CMS. It is a git-based CMS that can serve Markdown and other contents. Because of this, I can write my contents either using Markdown or wysiwyg editor. Besides, writing frontmatters with this is a breeze.</p> <p>Images and assets are uploaded and stored in Cloudinary. I connect Cloudinary via Forestry and manage them directly in the dashboard.</p> <p>In conclusion, these are the tech stack I've used for this project.</p> <ul> <li>Front-end: NextJS (TypeScript)</li> <li>Styling: TailwindCSS</li> <li>Animations: GSAP</li> <li>CMS: Forestry Headless CMS</li> <li>Deployment: Vercel</li> </ul>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#features","title":"Features","text":"<p>The following are certain features of my portfolio and blog</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#seo-friendly","title":"SEO Friendly","text":"<p>The entire project is developed with SEO focus in mind. I've used proper meta tags, descriptions and heading alignments. This website is now indexed by Google.</p> <p>Moreover, this website will be displayed well when shared to social media due to properly used meta tags.</p> <p></p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#dynamic-sitemap","title":"Dynamic Sitemap","text":"<p>Sitemap plays an important part in SEO. Because of this, every single page of this site should be included in sitemap.xml. I made an auto generated sitemap in my website whenever I create a new content or tags or categories.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#light-dark-themes","title":"Light &amp; Dark Themes","text":"<p>Due to dark theme trend in recent years, many websites include dark theme out of the box nowadays. Certainly, my website also supports light &amp; dark themes.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#fully-accessible","title":"Fully Accessible","text":"<p>This website is fully accessible. You can navigate around by only using keyboard. I put all a11y enhancement best practices like including alt text in all images, no skipping headings, using semantic HTML tags, using aria-attributes properly.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#search-box-categories-tags","title":"Search box, Categories &amp; Tags","text":"<p>All blog contents can be searched by search box. Moreover, contents can be filtered by categories and tags. In this way, blog readers can search and read what they really want.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#performance-and-lighthouse-score","title":"Performance and Lighthouse Score","text":"<p>This website got very good performance and lighthouse score thanks to proper development and best practices.</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#animations","title":"Animations","text":"<p>Initially I used Framer Motion to add animations and micro interactions for this website. However, when I tried to use some complex animations and parallax effects, I found it inconvenient to integrate with Framer Motion (Maybe I'm not very good at and used to working with it). Hence, I decided to use GSAP for all of my animations. It is one of the most popular animation library and it is capable of doing complex and advanced animations. You can see animations and micro interactions on pretty much every page of this website.</p> <p></p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#outro","title":"Outro","text":"<p>In conclusion, this project gives me a lot of experience and confidence about developing blog site (SSG). Now, I have gained knowledge of git-based CMS and how it interacts with NextJS. I've also learned about SEO, dynamic sitemap generation and indexing Google procedures. I will make better projects in the future. So, stay tuned! \u270c\ud83c\udffb</p>"},{"location":"articles/How-Do-I/how-do-i-develop-my-portfolio-website-blog/#project-links","title":"Project Links","text":"<ul> <li>Website: https://lrmn.is-a.dev</li> <li>Blog: https://lrmn.is-a.dev/blog</li> <li>Repo: https://github.com/lrmn7/dev-blog</li> </ul>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/","title":"Virtual gaming photography taller than life screenshot art","text":"<p>Last updated: March 25, 2020</p> <p>Games are spaces of experience as much as entertainment</p> <p></p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#intro","title":"INTRO","text":"<p>I have been a Virtual Photographer since 2020. I have a passion for photography and joined an organization called AMATIRANS PHOTOGRAPHY. However, after the outbreak of Covid-19, which resulted in having more free time, I ventured into the world of virtual photography to fill the void and monotony of everyday life. I hope you will leave this page with some further information about myself and my personal approach to virtual photography and how you can work creatively and intimately with subjects and characters created by other artists.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#what-is-virtual-photography","title":"WHAT IS VIRTUAL PHOTOGRAPHY?","text":"<p>What is Virtual Photography? VP (also known as In-game photography, screenshot art, screenshot photography and gaming photography) is photography of and within the virtual worlds of videogames using a virtual camera software.</p> <p>Not to be confused with Vice President, Virtual Photography (VP)\u00a0means taking screenshots in video games, either on a gaming console (PS4, XBox, Nintendo Switch) or PC. Besides Virtual Photographer (also VP), there are other names such as Gametographer, Game Capture Artist, or\u00a0Screenshots Enthusiast. I'm sure there are more titles out there, but you get the idea.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#you-mean-video-games-cutscenes-screenshots","title":"YOU MEAN VIDEO GAMES CUTSCENES SCREENSHOTS?","text":"<p><code>Some are but some are not. So no, but yes. It's</code> complicated.</p> <p>Similar to real world photography, VPs also have to work for that perfect composition, lighting, and colors to convey the emotions and/or message(s) in a particular shot. Screenshots from cinematic cutscenes with the default camera angles are often frown upon because VPs don't contribute to that creative process. Think of it like taking a screenshot of a movie. However, there's nothing wrong with capturing cutscenes shots to remember those special in-game moments. Unlike in real life, the character models in cutscenes look BETTER than the in-game models because they are mo-capped (motion captured), so it's understandable that some VPs want to capture that. In a lot of cases, non-player characters (NPCs) don't appear in-game at all, except for cutscenes. How would VPs be able to take pictures of those NPCs outside of cutscenes? In other cases, the outfit(s) that you want is locked in a cutscene and there's no mod available to obtain it. VP has another unique problem: clipping. We don't often see a piece of clothing/hair goes right through a character's throat or their armor bending if they crouch down in real life, but clipping exists in every single game. These problems are unique to VP because the environment is virtual.</p> <p>TLDR: if you don't use cutscene shots to enter into competitions that specifically prohibit cutscene shots, happy capturing.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#can-i-edit-my-photos","title":"CAN I EDIT MY PHOTOS?","text":"<p>Similar to real world photography, the decision belongs entirely to the photographer. YOU are the photographer and YOU should be the only one to decide how your shots are presented to the viewers; unless you are hired by the game studio(s) to capture promotional shots, then you have to go by their rules.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#can-i-watermark-my-photos","title":"CAN I WATERMARK MY PHOTOS?","text":"<p>Yes. In fact, I strongly encourage you to watermark your work for two important reasons:</p> <ul> <li>If you photos are stolen and repost without your permission, watermarks are often the most solid proof that you have to have the stolen photos taken down from the site. For example, Instagram sometimes asks for proof in addition to the source link that is pre-dated to the stolen posts, being able to point out where your hidden watermark is in the photo that the thief couldn't crop out is crucial. An extreme example is when someone steals other VPs' work to enter into photomode contest and win prizes. In my personal experience, a Death Stranding Twitter fan page stole my photos, reposted them, and then got retweeted by Kojima himself. I would not wish this terrible feeling to any fellow VPs. Lastly, having watermark helps fellow VPs and your followers with recognizing stolen work (if the thieve hasn't edited it out) and notifying the owners early. </li> <li>If your work catches the attention of game studios, watermarks help them quickly recognizing and remembering you as the VP, and this brings up my answer to the next question below.</li> </ul>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#why-vertical-gaming-photography","title":"WHY VERTICAL GAMING PHOTOGRAPHY?","text":"<p>Because most of my shots are in portrait orientation. The landscape (horizontal) orientation depicts a scene, whereas vertical photography makes a firm statement on it. I want my photography to comprehend, glorify and even discuss virtuality, not only observe it, and the portrait orientation just better fits the task.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#how-big-is-the-vp-community-is-there-anyone-else-out-there","title":"HOW BIG IS THE VP COMMUNITY? IS THERE ANYONE ELSE OUT THERE?","text":"<p>VP is still a relatively new phenomenon, however, there are plenty of VP groups that you can join on different platforms. Most are on Instagram and Twitter, though I find more community engagement on Twitter (which is normal because game studios are also more active on Twitter). Some also have weekly/monthly themes for everyone in the community to participate in.</p> <p>VP Groups (focuses more on community outreach, there are plenty more but I've stopped updating this list): - VGPNetwork  - Society of Virtual Photographers - TheCapturedCollective - Visual Moods Central</p> <p>Programmer/Modder/Researcher Communities (focuses more on creating cinematic tools and game research): - FRAMED: Screenshot Community Website | Twitter - Fearless Cheat Engine Forum - Github - Nexusmods Discord | Forum | Twitter - ReShade Forum Website - XeNTaX: Game Research Forum</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#copyright","title":"Copyright:","text":"<p>All game trademarks and assets belong to their owners. All shots belong to me. Please do not use without credit AND permission.</p> <p>Author's note: This is my first time writing this type of blog post so please feel free to let me know if I have made any mistake(s). Thank you for reading.</p>"},{"location":"articles/How-Do-I/virtual-gaming-photography-taller-than-life-screenshot-art/#website-links","title":"WEBSITE LINKS","text":"<ul> <li>Website: https://lrmn-vp.is-a.fun/</li> <li>Repo: https://github.com/lrmn7/lrmn-vp/</li> </ul>"},{"location":"articles/archive/arch-linux/","title":"Arch Linux installation guide","text":"<p>Last updated: May 1, 2019</p> <p>The installation guide below is a summarized version of the official Installation Guide.</p>"},{"location":"articles/archive/arch-linux/#installing-basic-system","title":"Installing basic system","text":"<ol> <li> <p>Choose correct keyboard keymaps</p> <pre><code>loadkeys keymap\n</code></pre> </li> <li> <p>Assert boot mode</p> <pre><code>ls /sys/firmware/efi/efivars\n</code></pre> </li> <li> <p>Make sure internet connection is present</p> <pre><code>ping 8.8.8.8\n</code></pre> </li> <li> <p>Set correct system time</p> <pre><code>timedatectl set-ntp true\n</code></pre> </li> <li> <p>Partition the disks</p> <ol> <li> <p>List disks using <code>fdisk</code></p> <pre><code>fdisk -l\n</code></pre> </li> <li> <p>If UEFI is present, use <code>GPT</code> and make <code>EFI</code> partition, <code>swap</code>, and root <code>/</code></p> <pre><code>cfdisk /dev/sdX # or /dev/nvme0nX\n</code></pre> </li> <li> <p>Set correct size, type and write partition table.</p> </li> </ol> </li> <li> <p>Format the disks</p> <ol> <li> <p>Make <code>EFI</code> partition</p> <pre><code>mkfs.fat -F32 /dev/sdXA # A is EFI partition\n</code></pre> </li> <li> <p>Make swap</p> <pre><code>mkswap /dev/sdXB # B is swap partition\n</code></pre> </li> <li> <p>Turn swap on</p> <pre><code>swapon /dev/sdXB\n</code></pre> </li> <li> <p>Make root fs</p> <pre><code>mkfs.ext4 /dev/sdaXC # C is root partition\n</code></pre> </li> </ol> </li> <li> <p>Mount root partition to <code>mnt</code></p> <pre><code>mount /dev/sdXC /mnt\n</code></pre> </li> <li> <p>Install necessary packages</p> <pre><code>pacstrap /mnt base base-devel linux linux-firmware vim nano man zsh\n</code></pre> </li> <li> <p>Write filesystem table</p> <pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> </li> <li> <p>Change root to <code>/mnt</code></p> <pre><code>arch-chroot /mnt\n</code></pre> </li> <li> <p>Set correct time zone</p> <pre><code>ln -sf /usr/share/zoneinfo/Europe/Zurich /etc/localtime\n\nhwclock --systohc\n</code></pre> </li> <li> <p>Set locale</p> <ol> <li> <p>Uncomment the correct locale</p> <pre><code>vim /etc/locale.gen\n</code></pre> </li> <li> <p>Set locale</p> <pre><code>locale-gen\n</code></pre> </li> </ol> </li> <li> <p>Set hostname and hosts</p> <ol> <li> <p>Add your hostname <code>yourhostname</code></p> <pre><code>echo \"yourhostname\" &gt;&gt; /etc/hostname\n</code></pre> </li> <li> <p>Append the following to <code>/etc/hosts</code></p> <pre><code>127.0.0.1   localhost\n::1         localhost\n127.0.1.1   yourhostname.localdomain    yourhostname\n</code></pre> </li> </ol> </li> <li> <p>Setup root password using <code>passwd</code></p> <pre><code>passwd\n</code></pre> </li> <li> <p>Add default users</p> <ol> <li> <p>Add new user</p> <pre><code>useradd -m -s /bin/zsh newuser\n</code></pre> </li> <li> <p>Give new user a password with <code>passwd</code></p> <pre><code>passwd newuser\n</code></pre> </li> <li> <p>Add new user to the <code>wheel</code></p> <pre><code>usermod -aG wheel,audio,video,optical,storage newuser\n</code></pre> </li> <li> <p>Setup <code>sudo</code></p> <pre><code>pacman -S sudo\n</code></pre> </li> <li> <p>Enable <code>wheel</code> with <code>visudo</code></p> <pre><code>visudo\n</code></pre> </li> </ol> </li> <li> <p>Setup grub</p> <ol> <li> <p>Install grub and efi-tools</p> <pre><code>pacman -S grub efibootmgr dosfstoosl os-prober mtools\n</code></pre> </li> <li> <p>Make efi boot directory</p> <pre><code>mkdir /boot/EFI\n</code></pre> </li> <li> <p>Mount efi partition</p> <pre><code>mount /dev/sdXA /boot/EFI\n</code></pre> </li> <li> <p>Install grub (efi) for x86-64</p> <pre><code>grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck\n</code></pre> </li> <li> <p>Make grub config file</p> <pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> </li> </ol> </li> <li> <p>Network manager for internet connectivity</p> <pre><code>pacman -S networkmanager\n\nsystectl enable NetworkManager # enable network manager\n</code></pre> </li> <li> <p><code>Optional</code>: Reboot to conclude with bare system setup.</p> <pre><code>exit # now back to iso image\numount -R /mnt\nshutdown now # or reboot\n</code></pre> </li> </ol>"},{"location":"articles/archive/arch-linux/#configuring-system","title":"Configuring system","text":""},{"location":"articles/archive/arch-linux/#additional-setup-for-a-complete-system","title":"Additional setup for a complete system","text":"<ol> <li> <p>Install audio</p> <pre><code>pacman -S pulseaudio pulseaudio-alsa\n</code></pre> </li> <li> <p>Install a Graphical user interface; Display server (<code>xorg</code>), display driver (<code>nvidia</code>), desktop environment (<code>gnome</code>), window manager, display manager (<code>gdm</code>).</p> <ol> <li> <p>Install packages</p> <pre><code>pacman -S gnome nvidia # gnome-extra for further applications\n</code></pre> </li> <li> <p>Enable display manager for next reboot</p> <pre><code>systemctl enable gdm.service\n</code></pre> </li> </ol> </li> <li> <p>Additional network tools</p> <pre><code>pacman -S openssh rsync\n</code></pre> </li> <li> <p>Development tools: <code>git</code>, <code>htop</code></p> <pre><code>pacman -S git htop\n</code></pre> </li> <li> <p>Reboot</p> <pre><code>exit # now back to iso image\numount -R /mnt\nshutdown now # or reboot\n</code></pre> </li> </ol>"},{"location":"articles/archive/benchmarking/","title":"A guide on basic benchmarking","text":"<p>Last updated: February 9, 2020</p>"},{"location":"articles/archive/benchmarking/#storage","title":"Storage","text":"<ul> <li> <p>Perform timings of device/cache reads on device (<code>sda</code>):</p> <pre><code>hparm -tT /dev/sda\n</code></pre> </li> <li> <p>Measure the write performance of a disk</p> <pre><code>dd if=/dev/zero of=file_1GB bs=1024 count=1000000 conv=fdatasync\n</code></pre> </li> <li> <p>Benchmark with IOzone filesystem benchmarking tool and export to <code>xls</code></p> <pre><code>iozone -a /dev/sdb1 -b results.xls\n</code></pre> </li> </ul>"},{"location":"articles/archive/benchmarking/#network","title":"Network","text":"<ul> <li> <p>Testing internet bandwidth</p> <pre><code>speedtest-cli\n</code></pre> </li> <li> <p>Measuring bandwidth between two computer:</p> <ul> <li> <p>Server-side (default port: <code>5001</code>):</p> <pre><code>iperf -s\n</code></pre> </li> <li> <p>Client-side:</p> <pre><code>iperf -c server_ip\n</code></pre> </li> </ul> </li> </ul>"},{"location":"articles/archive/blender/","title":"Blender","text":"<p>Last updated: June 1, 2021</p>"},{"location":"articles/archive/blender/#blender-rendering-using-slurm","title":"Blender rendering using SLURM","text":""},{"location":"articles/archive/blender/#slurm-submission-python-script","title":"SLURM submission python script","text":"<ul> <li>Distributes frames of render animation to multiple nodes.</li> <li>Rendering <code>donut.blend</code> from frame <code>1</code> to <code>300</code>.</li> <li>Each node rendering <code>60</code> frames.</li> <li>Blender bin path: <code>BLENDER_PATH=/store/empa/em13/apps/blender</code>.</li> </ul> <p>Contents of <code>submit.py</code>: <pre><code>#!/usr/bin/env python3\nimport os\n\n# Constants\njob_name = \"blender\"\ntime = \"00:30:00\"\naccount = \"em13\"\npartition = \"normal\"\nbackground = \"donut.blend\"\nframe_start = 1\nframe_end = 300\nnframes_per_node = 60\n\nHEADER=\\\nf\"\"\"#!/bin/bash -l\n#SBATCH --time={time}\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-core=2\n#SBATCH --ntasks-per-node=1\n#SBATCH --cpus-per-task=24\n#SBATCH --constraint=gpu\n#SBATCH --hint=multithread\n#SBATCH --account={account}\n#SBATCH --partition={partition}\n\nmodule load daint-gpu\nmodule load cudatoolkit\n\n# NCCL FLAGS\nexport OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK\nexport PYTHONFAULTHANDLER=1\n\nBLENDER_PATH=/store/empa/em13/apps/blender\nBACKGROUND={background}\n\"\"\"\n\n# Batch split\nfor batch_start, batch_end in zip(\n        range(frame_start, frame_end, nframes_per_node),\n        range(frame_start + nframes_per_node - 1, frame_end + nframes_per_node - 1, nframes_per_node)\n        ):\n    # Write submission script\n    with open(\"batch.job\", \"w\") as f:\n        f.writelines(HEADER)\n        f.write(\"srun $BLENDER_PATH/blender \\\\\\n\")\n        f.write(\"\\t--python $BLENDER_PATH/enable_cuda.py \\\\\\n\")\n        f.write(\"\\t--background $BACKGROUND \\\\\\n\")\n        f.write(\"\\t--render-output //render/frame_###.png \\\\\\n\")\n        f.write(f\"\\t--frame-start {batch_start} \\\\\\n\")\n        f.write(f\"\\t--frame-end {batch_end} \\\\\\n\")\n        f.write(\"\\t--render-anim\\n\")\n\n    # Submit job\n    os.system(f\"sbatch --job-name={job_name}-s{batch_start:03d}-e{batch_end:03d} batch.job\")\n\n# Cleanup\nos.remove(\"batch.job\")\n</code></pre></p>"},{"location":"articles/archive/blender/#ensuring-cuda-is-enables-on-the-nodes","title":"Ensuring cuda is enables on the nodes","text":"<p>Contents of <code>enable_cuda.py</code>: <pre><code>import bpy\n\ndef enable_gpus(device_type, use_cpus=False):\n    preferences = bpy.context.preferences\n    cycles_preferences = preferences.addons[\"cycles\"].preferences\n    cycles_preferences.refresh_devices()\n    devices = cycles_preferences.devices\n\n    if not devices:\n        raise RuntimeError(\"Unsupported device type\")\n\n    activated_gpus = []\n    for device in devices:\n        if device.type == \"CPU\":\n            device.use = use_cpus\n        else:\n            device.use = True\n            activated_gpus.append(device.name)\n            print('activated gpu', device.name)\n\n    cycles_preferences.compute_device_type = device_type\n    bpy.context.scene.cycles.device = \"GPU\"\n\n    return activated_gpus\n\nenable_gpus(\"CUDA\")\n</code></pre></p>"},{"location":"articles/archive/changeid/","title":"Change user id and group id of user","text":"<p>Last Modified: March 1, 2020</p> <p>If you run into an issue where you need to change the user id (<code>uid</code>) and group id (<code>gid</code>) of a user (<code>&lt;user&gt;</code>). Assume you want to change <code>uid:gid</code> from <code>1001:1001</code> (<code>&lt;old_uid&gt;:&lt;old_gid&gt;</code>) to <code>1000:1000</code> (<code>&lt;new_uid&gt;:&lt;new_gid&gt;</code>).</p>"},{"location":"articles/archive/changeid/#steps-by-step-guide","title":"Steps by step guide","text":"<ol> <li> <p>Login using a different user. If need <code>root</code> user: <code>ssh root@&lt;hostname&gt;</code>.</p> </li> <li> <p>Kill all the process of <code>user</code>. Find all process belonging to <code>&lt;user&gt;</code> using <code>ps</code>:</p> <pre><code>ps aux | grep &lt;user&gt;\n</code></pre> </li> <li> <p>Change <code>uid</code> of <code>&lt;user&gt;</code>:</p> <pre><code>usermod -u &lt;new_uid&gt; &lt;user&gt;\n</code></pre> </li> <li> <p>Change <code>gid</code> of <code>user</code>:</p> <pre><code>groupmod -g &lt;new_gid&gt; &lt;user&gt;\n</code></pre> </li> <li> <p>Change ownership of all files from <code>&lt;old_uid&gt;:&lt;old_gid&gt;</code> to <code>&lt;new_uid&gt;:&lt;new_gid&gt;</code>:</p> <pre><code>find /parent/path/ \\( -uid &lt;old_uid&gt; -o -gid &lt;old_gid&gt; \\) \\\n-exec chown &lt;new_uid&gt;:&lt;new_gid&gt; {} \\;\n</code></pre> <p>Example:</p> <pre><code>find /home/lento \\( -uid 1001 -o -gid 1001 \\) \\\n-exec chown 1000:1000 {} \\;\n</code></pre> </li> </ol>"},{"location":"articles/archive/gateway/","title":"Using another computer as a gateway","text":"<p>Last updated: July 1, 2020</p> <p> graph LR WAN[WAN] --&gt;|eth0| A[Node A] A --&gt;|eth1| B[Node B]  </p> <ul> <li><code>eth0</code>: WAN (public) (e.g., <code>enp0s25</code>)</li> <li><code>eth1</code>: LAN (private) (e.g., <code>bond0</code>)</li> </ul> <p>Setup for gateway node:</p> <pre><code>$ iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE # enable NAT on eth0\n$ iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT # allow packets from eth1 to go out of eth0\n$ iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT # sent the packets to eth1\n</code></pre> <p>On LAN nodes:</p> <pre><code>route add default gw &lt;ip_of_gateway&gt;\n</code></pre>"},{"location":"articles/archive/h5py-parallel/","title":"Installing h5py with Parallel HDF5","text":"<p>Last updated: April 1, 2019</p> <p>The following guide is if you want to install h5py with parallel (mpi) IO features. Therefore, h5py also requires a system-mpi linked <code>mpi4py</code> installation as well.</p> <p>Installation:</p> <ol> <li> <p>Load the current latest parallel <code>HDF5</code> module (e.g. <code>HDF5/1.10.6-CrayGNU-20.11-parallel</code>).</p> <pre><code>module load HDF5/1.10.6-CrayGNU-20.11-parallel\n</code></pre> </li> <li> <p>Update environment variables</p> <pre><code>export MPI_DIR=$MPICH_DIR\nexport MPI_INCLUDE=$MPICH_DIR/include\nexport MPI_LIB=$MPICH_DIR/lib\nexport LB_LIBRARY_PATH=$MPI_DIR/lib:$LD_LIBRARY_PATH\nexport MPICC=CC\nexport mpicc=CC\n\nexport HDF5_MPI=\"ON\"\nexport HDF5_DIR=/apps/daint/UES/jenkins/7.0.UP02-20.11/gpu/easybuild/software/HDF5/1.10.6-CrayGNU-20.11-parallel\n</code></pre> </li> <li> <p>Install h5py from source.</p> <p>a. Clone repo locally:</p> <pre><code>git clone https://github.com/lrmn7/h5py\n</code></pre> <p>b. Update the <code>setup_build.py</code> file with the additional following <code>include_dirs</code>:</p> <pre><code>settings['include_dirs'] += ['/opt/cray/pe/mpt/7.7.16/gni/mpich-gnu/8.2/include/']\n</code></pre> <p>c. Install from locally using <code>pip</code>:</p> <pre><code>pip install .\n</code></pre> </li> </ol> <p>Testing:</p> <p>Test h5py parallel build using following example script (<code>parallel_h5py.py</code>):</p> <pre><code>from mpi4py import MPI\nimport h5py\n\ncomm = MPI.COMM_WORLD\nrank = comm.rank\nsize = comm.size\n\nf = h5py.File('parallel_test.hdf5', 'w', driver='mpio', comm=MPI.COMM_WORLD)\n\ndset = f.create_dataset('test', (size,), dtype='i')\ndset[rank] = rank\n\nf.close()\n</code></pre> <ol> <li> <p>Load system <code>HDF5/xxx-parallel</code> and your custom python environment with <code>h5py</code> and <code>mpi4py</code>. Run <code>parallel_h5py.py</code> script:</p> <pre><code>srun python parallel_h5py.py\n</code></pre> </li> <li> <p>Inspect output:</p> <pre><code>h5dump parallel_test.h5\n</code></pre> </li> </ol>"},{"location":"articles/archive/homelab/","title":"A Raspberry PI homelab setup","text":"<p>Last updated: February 10, 2020</p>"},{"location":"articles/archive/homelab/#install-rocky-linux-os","title":"Install Rocky Linux OS","text":"<ol> <li> <p>Download <code>RockyPi</code> Rocky Linux OS from Official Repo</p> <pre><code>wget https://download.rockylinux.org/pub/rocky/8/rockyrpi/aarch64/images/RockyRpi_x.x_xxxxxxxx.img.xz\n</code></pre> </li> <li> <p>Verify checksum of the <code>img.xz</code> with <code>`RockyRpi_x.x_xxxxxxxx.sha256sum</code>:</p> <pre><code>xzcat RockyRpi_x.x_xxxxxxxx.img.xz | sha256sum\n</code></pre> </li> <li> <p>Write image to SD card mounted at <code>/dev/sdX</code>:</p> <pre><code>sudo bash -c \"xzcat RockyRpi_x.x_xxxxxxxx.img.xz &gt; /dev/sdX\"\n</code></pre> </li> <li> <p>Initial login to raspberry pi with password <code>rockylinux</code>:</p> <pre><code>ssh rocky@rockypi\n</code></pre> </li> <li> <p>Grow the SD card partition to max (where <code>/</code> is the <code>3</code>rd partition)</p> <pre><code>growpart /dev/sdX 3\n</code></pre> </li> <li> <p>Resize the fs to max</p> <pre><code>resize2fs /dev/sdX3\n</code></pre> </li> </ol>"},{"location":"articles/archive/homelab/#setup-homelab-using-ansible-playbook-homelab","title":"Setup Homelab using ansible playbook: Homelab","text":"<ol> <li> <p>Important: Make sure to run <code>init</code> first separately, where it will create a default user with <code>sudo</code> privileges. Edit <code>playbook-setup.yml</code> appropriately and use <code>just</code> to run the playbook</p> <pre><code>ansible-playbook --diff -K --vault-password-file pass.key playbook-setup.yml # or: just run\n</code></pre> </li> <li> <p>Run additional setup roles: <code>ssh</code>, <code>timezone</code>, <code>packages</code>, <code>upgrade</code>, <code>dnfautomatic</code>, <code>firewalld</code>:</p> <pre><code>just run\n</code></pre> </li> </ol>"},{"location":"articles/archive/homelab/#deploy-all-the-services-onto-the-raspberry-pi","title":"Deploy all the services onto the raspberry pi","text":"<ol> <li> <p>Install docker using <code>geerlingguy.docker</code>.</p> </li> <li> <p>Configure firewall to allow all ports for the services using <code>firewalld</code> role.</p> </li> <li> <p>Setup up a presistent volume for all the data for the docker containers using <code>fs</code> role.</p> </li> <li> <p>Deploy all the services using roles (<code>portainer</code>, <code>watchtower</code>, <code>pihole</code>, ...)</p> </li> </ol>"},{"location":"articles/archive/linear-regression/","title":"Linear regression in PyTorch","text":"<p>Linear regression</p> <p>Given a data set $\\{y_i, x_i\\}_{i=1}^n$ of $n$ statistical units, we have the following relationship:</p> <p>$$ y_i = \\theta_1 x_i + \\theta_0 + \\varepsilon_i, \\qquad i=1,\\ldots, n,$$</p> <p>where:</p> <ul> <li>$y_i$ is observed value (dependent variable</li> <li>$x_i$ is the independent variable</li> <li>$\\theta_1$ and $\\theta_0$ are model parameters</li> <li>$\\varepsilon_i$ is the measurement error</li> </ul> <p>Table of Content</p> <ol> <li>Setup environment</li> <li>Define the model, loss function and optimizer</li> <li>Train the model</li> <li>Predict and evaluate the model</li> <li>Save the trained model</li> <li>Load pretrained model</li> </ol> <p></p> In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.optim\n</pre> import numpy as np import matplotlib as mpl import matplotlib.pyplot as plt  import torch import torch.nn as nn import torch.optim In\u00a0[2]: Copied! <pre>mpl.style.use('seaborn-poster')\nmpl.rcParams['mathtext.fontset'] = 'cm'\nmpl.rcParams['figure.figsize'] = 5 * np.array([1.618033988749895, 1])\n</pre> mpl.style.use('seaborn-poster') mpl.rcParams['mathtext.fontset'] = 'cm' mpl.rcParams['figure.figsize'] = 5 * np.array([1.618033988749895, 1]) In\u00a0[3]: Copied! <pre># Reproducibility\nseed = 234\nnp.random.seed(seed)\ntorch.random.manual_seed(seed);\n</pre> # Reproducibility seed = 234 np.random.seed(seed) torch.random.manual_seed(seed); In\u00a0[4]: Copied! <pre>n = 500\ntheta_1 = 2.0\ntheta_0 = 0.4\neps_std = 0.2\n</pre> n = 500 theta_1 = 2.0 theta_0 = 0.4 eps_std = 0.2 In\u00a0[5]: Copied! <pre>x_train = np.random.rand(n,1)-0.5\neps = np.random.normal(scale=eps_std, size=(n,1))\ny_train = x_train*theta_1 + theta_0 + eps\n</pre> x_train = np.random.rand(n,1)-0.5 eps = np.random.normal(scale=eps_std, size=(n,1)) y_train = x_train*theta_1 + theta_0 + eps In\u00a0[6]: Copied! <pre>fig, ax = plt.subplots()\nax.plot(x_train, y_train, 'k.', label='observations')\nax.plot(x_train, x_train*theta_1 + theta_0, 'tab:gray', lw=5,\n        label=r'analytical ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(theta_1, theta_0))\nax.set(xlabel='$x$', ylabel='$y$', xlim=(-0.52,0.52), ylim=(-1.0, 1.5));\n# ax.legend();\nfig.legend(loc='right', bbox_to_anchor=(1.5, 0.6));\n</pre> fig, ax = plt.subplots() ax.plot(x_train, y_train, 'k.', label='observations') ax.plot(x_train, x_train*theta_1 + theta_0, 'tab:gray', lw=5,         label=r'analytical ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(theta_1, theta_0)) ax.set(xlabel='$x$', ylabel='$y$', xlim=(-0.52,0.52), ylim=(-1.0, 1.5)); # ax.legend(); fig.legend(loc='right', bbox_to_anchor=(1.5, 0.6)); <p></p> In\u00a0[7]: Copied! <pre>n_features = 1 # number of nodes (1 weight + 1 bias)\nnum_epochs = 150 # i.e. number of iterations\nlearning_rate = 0.2\n</pre> n_features = 1 # number of nodes (1 weight + 1 bias) num_epochs = 150 # i.e. number of iterations learning_rate = 0.2 In\u00a0[8]: Copied! <pre># Linear regression model\nmodel = nn.Linear(in_features=n_features, out_features=n_features)\nmodel\n</pre> # Linear regression model model = nn.Linear(in_features=n_features, out_features=n_features) model Out[8]: <pre>Linear(in_features=1, out_features=1, bias=True)</pre> In\u00a0[9]: Copied! <pre>for i, (name, param) in enumerate(model.named_parameters()):\n    print(r\"{:6s} (theta_{}): {:.4f}\".format(name, 1-i, param.item()))\n</pre> for i, (name, param) in enumerate(model.named_parameters()):     print(r\"{:6s} (theta_{}): {:.4f}\".format(name, 1-i, param.item())) <pre>weight (theta_1): 0.8553\nbias   (theta_0): 0.1633\n</pre> In\u00a0[10]: Copied! <pre># Loss and optimizer\ncriterion = nn.L1Loss() # L^1-norm, aka. mean absolute error loss\ncriterion\n</pre> # Loss and optimizer criterion = nn.L1Loss() # L^1-norm, aka. mean absolute error loss criterion Out[10]: <pre>L1Loss()</pre> In\u00a0[11]: Copied! <pre>optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) # Stochastic gradient-descent\noptimizer\n</pre> optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) # Stochastic gradient-descent optimizer Out[11]: <pre>SGD (\nParameter Group 0\n    dampening: 0\n    lr: 0.2\n    momentum: 0\n    nesterov: False\n    weight_decay: 0\n)</pre> <p></p> In\u00a0[12]: Copied! <pre>history = dict(loss=[], parameters=[], grads=[])\nfor epoch in range(num_epochs):\n    # 1. Convert numpy arrays to torch tensors\n    x = torch.from_numpy(x_train.astype('float32'))\n    y = torch.from_numpy(y_train.astype('float32'))\n\n    # 2. Forward-pass:\n    y_hat = model(x) # prediction step\n    \n    # 3. Calculate loss\n    loss = criterion(y_hat, y)\n    \n    # 4. Backward propagation \n    optimizer.zero_grad() # reset gradients to zero\n    loss.backward() # backprop: calculate gradients w.r.t to loss\n    \n    # 5. Update weights\n    optimizer.step() # update gradient\n    \n    # 6. Log\n    history['loss'].append(loss.item())\n    history['parameters'].append([param.detach().item() for param in model.parameters()])\n    history['grads'].append([param.grad.detach().item() for param in model.parameters()])\n    if (epoch % 10) == 0 or epoch==(num_epochs-1):\n        print('[Epoch {:3d}]: loss={:.4f}, w={:.2f}, b={:.2f}'.format(\n            epoch, history['loss'][-1], *history['parameters'][-1]))\n</pre> history = dict(loss=[], parameters=[], grads=[]) for epoch in range(num_epochs):     # 1. Convert numpy arrays to torch tensors     x = torch.from_numpy(x_train.astype('float32'))     y = torch.from_numpy(y_train.astype('float32'))      # 2. Forward-pass:     y_hat = model(x) # prediction step          # 3. Calculate loss     loss = criterion(y_hat, y)          # 4. Backward propagation      optimizer.zero_grad() # reset gradients to zero     loss.backward() # backprop: calculate gradients w.r.t to loss          # 5. Update weights     optimizer.step() # update gradient          # 6. Log     history['loss'].append(loss.item())     history['parameters'].append([param.detach().item() for param in model.parameters()])     history['grads'].append([param.grad.detach().item() for param in model.parameters()])     if (epoch % 10) == 0 or epoch==(num_epochs-1):         print('[Epoch {:3d}]: loss={:.4f}, w={:.2f}, b={:.2f}'.format(             epoch, history['loss'][-1], *history['parameters'][-1])) <pre>[Epoch   0]: loss=0.3869, w=0.89, b=0.26\n[Epoch  10]: loss=0.2384, w=1.31, b=0.42\n[Epoch  20]: loss=0.1822, w=1.63, b=0.40\n[Epoch  30]: loss=0.1639, w=1.81, b=0.40\n[Epoch  40]: loss=0.1591, w=1.90, b=0.40\n[Epoch  50]: loss=0.1579, w=1.94, b=0.40\n[Epoch  60]: loss=0.1575, w=1.97, b=0.40\n[Epoch  70]: loss=0.1573, w=1.99, b=0.40\n[Epoch  80]: loss=0.1572, w=2.00, b=0.40\n[Epoch  90]: loss=0.1572, w=2.01, b=0.40\n[Epoch 100]: loss=0.1571, w=2.02, b=0.40\n[Epoch 110]: loss=0.1571, w=2.03, b=0.40\n[Epoch 120]: loss=0.1571, w=2.03, b=0.40\n[Epoch 130]: loss=0.1571, w=2.04, b=0.40\n[Epoch 140]: loss=0.1571, w=2.04, b=0.40\n[Epoch 149]: loss=0.1571, w=2.04, b=0.40\n</pre> In\u00a0[13]: Copied! <pre>fig, axes = plt.subplots(1, 2, figsize=(mpl.rcParams['figure.figsize'][0]*2, mpl.rcParams['figure.figsize'][1]))\n\naxes[0].plot(history['loss'])\naxes[0].set(xlabel='epoch', ylabel='$L^1$ loss',\n       title='Training loss history');\n\naxes[1].plot(history['grads'])\naxes[1].set(xlabel='epoch', ylabel='gradients',\n            title='Training gradient history');\naxes[1].legend([r'$\\nabla w \\equiv \\nabla \\theta_1$',\n                r'$\\nabla b \\equiv \\nabla \\theta_0$'])\n</pre> fig, axes = plt.subplots(1, 2, figsize=(mpl.rcParams['figure.figsize'][0]*2, mpl.rcParams['figure.figsize'][1]))  axes[0].plot(history['loss']) axes[0].set(xlabel='epoch', ylabel='$L^1$ loss',        title='Training loss history');  axes[1].plot(history['grads']) axes[1].set(xlabel='epoch', ylabel='gradients',             title='Training gradient history'); axes[1].legend([r'$\\nabla w \\equiv \\nabla \\theta_1$',                 r'$\\nabla b \\equiv \\nabla \\theta_0$']) Out[13]: <pre>&lt;matplotlib.legend.Legend at 0x7f89b09c0ac0&gt;</pre> In\u00a0[14]: Copied! <pre># L^1 norm: numpy version\nl1_norm = lambda y_hat, y: np.abs(y_hat - y).mean(axis=0)\n\n# Loss landscape\ntheta_1_h, theta_0_h = np.meshgrid(np.linspace(0, 4),\n                                 np.linspace(-0.2, 0.8))\nloss_surface = l1_norm(x_train[...,None]*theta_1_h[None] + theta_0_h[None],\n                       y_train[...,None])\n</pre> # L^1 norm: numpy version l1_norm = lambda y_hat, y: np.abs(y_hat - y).mean(axis=0)  # Loss landscape theta_1_h, theta_0_h = np.meshgrid(np.linspace(0, 4),                                  np.linspace(-0.2, 0.8)) loss_surface = l1_norm(x_train[...,None]*theta_1_h[None] + theta_0_h[None],                        y_train[...,None]) In\u00a0[15]: Copied! <pre>fig, ax = plt.subplots()\nim = ax.contourf(theta_1_h, theta_0_h, loss_surface)\nax.plot(*history['parameters'][0], 'c.', ms=15, label='start', zorder=10)\nax.plot(theta_1, theta_0, 'r.', ms=20, label='optima', zorder=10)\nax.plot(np.array(history['parameters'])[:,0],\n        np.array(history['parameters'])[:,1],\n        '.-', c='k', label='path')\nax.set(xlabel=r'$\\theta_1$ ($w$, weight)',\n       ylabel=r'$\\theta_0$ ($b$, bias)',\n       title='$L^1$ loss landscape')\nfig.colorbar(im, ax=ax)\nfig.legend(loc='right', bbox_to_anchor=(1.15, 0.7));\n</pre> fig, ax = plt.subplots() im = ax.contourf(theta_1_h, theta_0_h, loss_surface) ax.plot(*history['parameters'][0], 'c.', ms=15, label='start', zorder=10) ax.plot(theta_1, theta_0, 'r.', ms=20, label='optima', zorder=10) ax.plot(np.array(history['parameters'])[:,0],         np.array(history['parameters'])[:,1],         '.-', c='k', label='path') ax.set(xlabel=r'$\\theta_1$ ($w$, weight)',        ylabel=r'$\\theta_0$ ($b$, bias)',        title='$L^1$ loss landscape') fig.colorbar(im, ax=ax) fig.legend(loc='right', bbox_to_anchor=(1.15, 0.7)); <p></p> In\u00a0[16]: Copied! <pre># Predict\npredict = model(torch.from_numpy(x_train.astype('float32'))).detach().numpy()\n\n# Plot the graph\nfig, ax = plt.subplots()\nax.plot(x_train, y_train, 'k.', label='observations')\nax.plot(x_train, x_train*theta_1 + theta_0, 'tab:gray', lw=5,\n        label=r'analytical: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(theta_1, theta_0))\nax.plot(x_train, x_train*history['parameters'][0][0] + history['parameters'][0][1], 'tab:blue',\n        label=r'prediction [epoch 0]: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(*history['parameters'][0]))\nax.plot(x_train, predict, 'tab:red',\n        label=r'prediction [trained]: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(*history['parameters'][-1]))\nax.set(xlabel='$x$', ylabel='$y$',\n       title='Training accuracy',\n       xlim=(-0.52,0.52), ylim=(-1.0, 1.5))\n\nfig.legend(loc='right', bbox_to_anchor=(1.6, 0.6));\n</pre> # Predict predict = model(torch.from_numpy(x_train.astype('float32'))).detach().numpy()  # Plot the graph fig, ax = plt.subplots() ax.plot(x_train, y_train, 'k.', label='observations') ax.plot(x_train, x_train*theta_1 + theta_0, 'tab:gray', lw=5,         label=r'analytical: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(theta_1, theta_0)) ax.plot(x_train, x_train*history['parameters'][0][0] + history['parameters'][0][1], 'tab:blue',         label=r'prediction [epoch 0]: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(*history['parameters'][0])) ax.plot(x_train, predict, 'tab:red',         label=r'prediction [trained]: ($\\theta_1={:.2f}$, $\\theta_0={:.2f}$)'.format(*history['parameters'][-1])) ax.set(xlabel='$x$', ylabel='$y$',        title='Training accuracy',        xlim=(-0.52,0.52), ylim=(-1.0, 1.5))  fig.legend(loc='right', bbox_to_anchor=(1.6, 0.6)); <p></p> In\u00a0[17]: Copied! <pre># Save the model checkpoint\ntorch.save(model.state_dict(), 'model.ckpt')\n</pre> # Save the model checkpoint torch.save(model.state_dict(), 'model.ckpt') <p></p> In\u00a0[18]: Copied! <pre>checkpoint = torch.load('model.ckpt')\ncheckpoint\n</pre> checkpoint = torch.load('model.ckpt') checkpoint Out[18]: <pre>OrderedDict([('weight', tensor([[2.0430]])), ('bias', tensor([0.4025]))])</pre> In\u00a0[19]: Copied! <pre>model.load_state_dict(checkpoint)\n</pre> model.load_state_dict(checkpoint) Out[19]: <pre>&lt;All keys matched successfully&gt;</pre>"},{"location":"articles/archive/linear-regression/#linear-regression-in-pytorch","title":"Linear regression in PyTorch\u00b6","text":"<p>Last updated: December 1, 2020</p> <p></p> <p>References</p> <ul> <li>https://pytorch.org/</li> <li>https://github.com/yunjey/pytorch-tutorial/blob/master/tutorials/01-basics/linear_regression/main.py</li> <li>https://en.wikipedia.org/wiki/Linear_regression</li> <li>https://en.wikipedia.org/wiki/Backpropagation</li> <li>https://en.wikipedia.org/wiki/Stochastic_gradient_descent</li> </ul>"},{"location":"articles/archive/linear-regression/#1-setup-environment","title":"1. Setup environment\u00b6","text":""},{"location":"articles/archive/linear-regression/#load-packages-modules","title":"Load packages / modules\u00b6","text":""},{"location":"articles/archive/linear-regression/#generate-training-dataset","title":"Generate training dataset\u00b6","text":""},{"location":"articles/archive/linear-regression/#2-define-the-model-loss-function-and-optimizer","title":"2. Define the model, loss function and optimizer\u00b6","text":""},{"location":"articles/archive/linear-regression/#hyperparameters","title":"Hyperparameters\u00b6","text":""},{"location":"articles/archive/linear-regression/#model","title":"Model\u00b6","text":"<p>$$ \\mathcal{F}(x;\\ \\theta): x \\rightarrow y $$</p> <p>Linear 1-D model:</p> <p>$$ \\mathcal{F}(x;\\ \\theta) = w x + b = \\hat{y}$$</p> <p>where:</p> <ul> <li>$y$ is the ground truth</li> <li>$\\hat{y}$ is the predicted output</li> <li>$\\theta$ are the trainable parameters, with<ul> <li>$w$ is the learnable weight, i.e. $w \\equiv \\theta_1$</li> <li>$b$ is the learnable bias, i.e. $b \\equiv \\theta_0$</li> </ul> </li> </ul>"},{"location":"articles/archive/linear-regression/#loss-function","title":"Loss function\u00b6","text":"<p>$L^1$-norm:</p> <p>$$ \\mathcal{L}(\\hat{Y}, Y;\\ \\theta) = \\textrm{mean} \\left( \\{l_1,\\dots,l_N\\}^\\top \\right), \\quad l_n = \\left| \\hat{y}_n - y_n \\right| $$ where:</p> <ul> <li>$X \\in \\mathbb{R}^N$ is the input matrix</li> <li>$Y \\in \\mathbb{R}^N$ is the ground truth matrix</li> <li>$N$ is the batch size (for now, batch size = number of examples)</li> </ul>"},{"location":"articles/archive/linear-regression/#optimizer","title":"Optimizer\u00b6","text":"<p>Stochastic gradient descent</p> <p>$$ \\theta^{n+1} = \\theta^n - \\eta \\nabla \\mathcal{L}(\\theta^n) $$</p> <p>where:</p> <ul> <li>$\\eta$ is the learning rate (i.e. step size)</li> </ul>"},{"location":"articles/archive/linear-regression/#3-train-the-model","title":"3. Train the model\u00b6","text":"<p>$$ \\mathcal{F}^* = \\arg \\min_{\\mathcal{F}}\\ \\mathcal{L}(\\hat{Y}, Y;\\ \\theta)$$</p> <p>Algorithm:</p> <ol> <li>Convert data to torch tensor: <code>torch.from_numpy(...)</code></li> <li>Forward pass: <code>y_hat = model(x)</code></li> <li>Calculate loss: <code>loss = criterion(y_hat, y)</code></li> <li>Compute gradients: <code>loss.backward()</code></li> <li>Update weights: <code>optimizer.step()</code></li> </ol>"},{"location":"articles/archive/linear-regression/#training-loss-history","title":"Training loss history\u00b6","text":""},{"location":"articles/archive/linear-regression/#optimization-over-the-loss-landscape","title":"Optimization over the loss landscape\u00b6","text":""},{"location":"articles/archive/linear-regression/#4-predict-and-evaluate-the-model","title":"4. Predict and evaluate the model\u00b6","text":""},{"location":"articles/archive/linear-regression/#training-accuracy","title":"Training accuracy\u00b6","text":""},{"location":"articles/archive/linear-regression/#5-save-the-trained-model","title":"5. Save the trained model\u00b6","text":""},{"location":"articles/archive/linear-regression/#6-load-pretrained-model","title":"6. Load pretrained model\u00b6","text":""},{"location":"articles/archive/ragnarok/","title":"Lattice Boltzmann solver: Ragnarok","text":"<p>Ragnarok is an open-source python library for solving lattice boltzmann method.</p> <p> </p> <p>Pip install (directly from git repo):</p> <pre><code>$ pip install git+https://github.com/lrmn7/ragnarok.git\n</code></pre> <p>Standard</p> In\u00a0[1]: Copied! <pre>import time\nimport numpy as np\nimport math\n</pre> import time import numpy as np import math <p>High performance computing</p> In\u00a0[2]: Copied! <pre>from numba import vectorize, jit\n</pre> from numba import vectorize, jit <p>Plotting</p> In\u00a0[3]: Copied! <pre>import matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n</pre> import matplotlib.pyplot as plt import matplotlib.animation as animation <p>Lattice boltzmann solver</p> In\u00a0[4]: Copied! <pre>import ragnarok\n</pre> import ragnarok In\u00a0[5]: Copied! <pre>def doublyperiodicshearlayer():\n    delta = 0.05\n    kappa = 80.0\n    u0 = 0.01\n    ux = np.zeros(x.shape)\n    ux[y&lt;=Ny/2.0] = u0*np.tanh(kappa*(y[y&lt;=Ny/2.0]/float(Ny) - 0.25))\n    ux[y&gt;Ny/2.0]  = u0*np.tanh(kappa*(0.75 - y[y&gt;Ny/2.0]/float(Ny)))\n    uy = delta*u0*np.sin(2*np.pi*(x/float(Nx) + 0.25))\n    return ux, uy\n</pre> def doublyperiodicshearlayer():     delta = 0.05     kappa = 80.0     u0 = 0.01     ux = np.zeros(x.shape)     ux[y&lt;=Ny/2.0] = u0*np.tanh(kappa*(y[y&lt;=Ny/2.0]/float(Ny) - 0.25))     ux[y&gt;Ny/2.0]  = u0*np.tanh(kappa*(0.75 - y[y&gt;Ny/2.0]/float(Ny)))     uy = delta*u0*np.sin(2*np.pi*(x/float(Nx) + 0.25))     return ux, uy <p>GR version</p> In\u00a0[6]: Copied! <pre>def plot(t,zlim=(-0.25,0.25)):\n    vortz = curl(solver.u)\n    pygr.surface(vortz, rotation=0, tilt=90,colormap=34,\n                 xlabel='x', ylabel='y', title='vortz - T = {}'.format(t),\n                 zlim=zlim, accelerate=True)\n</pre> def plot(t,zlim=(-0.25,0.25)):     vortz = curl(solver.u)     pygr.surface(vortz, rotation=0, tilt=90,colormap=34,                  xlabel='x', ylabel='y', title='vortz - T = {}'.format(t),                  zlim=zlim, accelerate=True) <p>** MPL version:**</p> In\u00a0[7]: Copied! <pre>def plot_mpl(i):\n    plt.figure('plot')    \n    plt.clf()\n    vortz = curl(solver.u)\n    levels = np.linspace(-0.25,0.25,26)\n    plt.contourf(x,y,vortz,levels,cmap='RdBu_r',extend='both')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('T = %d' % i)\n    plt.colorbar(ticks=levels[::5])\n    plt.axis('scaled')\n    plt.axis([0,Nx,0,Ny])\n    plt.pause(0.1)\n</pre> def plot_mpl(i):     plt.figure('plot')         plt.clf()     vortz = curl(solver.u)     levels = np.linspace(-0.25,0.25,26)     plt.contourf(x,y,vortz,levels,cmap='RdBu_r',extend='both')     plt.xlabel('x')     plt.ylabel('y')     plt.title('T = %d' % i)     plt.colorbar(ticks=levels[::5])     plt.axis('scaled')     plt.axis([0,Nx,0,Ny])     plt.pause(0.1) <p>Velocity norm:</p> In\u00a0[8]: Copied! <pre>@vectorize(['float64(float64,float64)'],target='parallel')\ndef calcnorm(ux,uy):\n    return math.sqrt(ux**2+uy**2)\n</pre> @vectorize(['float64(float64,float64)'],target='parallel') def calcnorm(ux,uy):     return math.sqrt(ux**2+uy**2) <p>Velocity curl - vorticity:</p> In\u00a0[9]: Copied! <pre>@jit\ndef curl(u):\n    dudx,dudy = np.gradient(u[0], 1.0/Nx,1.0/Ny)\n    dvdx,dvdy = np.gradient(u[1], 1.0/Nx,1.0/Ny)\n    return dvdx - dudy\n</pre> @jit def curl(u):     dudx,dudy = np.gradient(u[0], 1.0/Nx,1.0/Ny)     dvdx,dvdy = np.gradient(u[1], 1.0/Nx,1.0/Ny)     return dvdx - dudy <p>Simulation parameters</p> In\u00a0[10]: Copied! <pre>Re = 30000 # Reynolds number\n# T = 20000 # Number of time steps \nT = 20000 # Number of time steps \nU = 0.1 # Lattice velocity\n\nNx = 100 # Number of lattice in x-dir\nNy = 100 # Number of lattice in y-dir\n</pre> Re = 30000 # Reynolds number # T = 20000 # Number of time steps  T = 20000 # Number of time steps  U = 0.1 # Lattice velocity  Nx = 100 # Number of lattice in x-dir Ny = 100 # Number of lattice in y-dir <p>Postprocessing parameters</p> In\u00a0[11]: Copied! <pre># Flags\napply_bc = True\nplot_step = 100\nplot_save = False\nplot_flag = True\n</pre> # Flags apply_bc = True plot_step = 100 plot_save = False plot_flag = True <p>Initialze the 2D NS solver:</p> In\u00a0[12]: Copied! <pre>solver = ragnarok.NavierStokes2D(U=U, Re=Re, Nx=Nx, Ny=Ny)\n</pre> solver = ragnarok.NavierStokes2D(U=U, Re=Re, Nx=Nx, Ny=Ny) <pre>nu = 0.000333\nbeta = 0.998004\nomega = 1.996008\n</pre> <p>Reference parameters:</p> In\u00a0[13]: Copied! <pre># Get parameters\nL = solver.L\nU = solver.U\nnu = solver.nu\nNx = solver.Nx\nNy = solver.Ny\ncs = solver.cs\nx = solver.x[0]\ny = solver.x[1]\n</pre> # Get parameters L = solver.L U = solver.U nu = solver.nu Nx = solver.Nx Ny = solver.Ny cs = solver.cs x = solver.x[0] y = solver.x[1] <p>Assign the initial condition:</p> In\u00a0[14]: Copied! <pre># Setup initial conditions (Doubly periodic shear layer)\nux, uy = doublyperiodicshearlayer()\n</pre> # Setup initial conditions (Doubly periodic shear layer) ux, uy = doublyperiodicshearlayer() <p>Initialize the population:</p> In\u00a0[15]: Copied! <pre>solver.initialize(ux=ux,uy=uy)\n</pre> solver.initialize(ux=ux,uy=uy) <p>** Plot initial condition **</p> In\u00a0[17]: Copied! <pre>plot_mpl(0)\n</pre> plot_mpl(0) In\u00a0[18]: Copied! <pre>fig, ax = plt.subplots()\n\nims = []\nfor t in range(T+1):\n    if t==1: # for JIT\n        startTime = time.time()\n    \n    # Plot\n    if plot_flag and t % plot_step == 0:\n        vortz = curl(solver.u)\n        im = ax.imshow(vortz, vmin=-0.25, vmax=0.25, cmap='RdBu_r')\n        ims.append([im])\n\n    # Step 1: Streaming / advection step: f'_i(x) &lt;- f^n_i(x-c_i)\n    solver.stream()\n    \n    # Step 2: Apply boundary condition\n    solver.apply_periodic()\n    \n    # Step 3: Relaxation / collision step: f^{n+1}_i(x) &lt;- f'_i + \\alpha\\beta [f^{eq}'_i(x,t) - f'_i(x,t)]\n    solver.relax()\n    \n    if solver.rho.min() &lt;= 0.:\n        print('Density is negative!')\n        break\n\n# Done\nduration = time.time()-startTime\nprint('Total time: {:3g} sec for {:d} steps, {:3g} ms/step'.format(duration, T, duration/T*1000))\n</pre> fig, ax = plt.subplots()  ims = [] for t in range(T+1):     if t==1: # for JIT         startTime = time.time()          # Plot     if plot_flag and t % plot_step == 0:         vortz = curl(solver.u)         im = ax.imshow(vortz, vmin=-0.25, vmax=0.25, cmap='RdBu_r')         ims.append([im])      # Step 1: Streaming / advection step: f'_i(x) &lt;- f^n_i(x-c_i)     solver.stream()          # Step 2: Apply boundary condition     solver.apply_periodic()          # Step 3: Relaxation / collision step: f^{n+1}_i(x) &lt;- f'_i + \\alpha\\beta [f^{eq}'_i(x,t) - f'_i(x,t)]     solver.relax()          if solver.rho.min() &lt;= 0.:         print('Density is negative!')         break  # Done duration = time.time()-startTime print('Total time: {:3g} sec for {:d} steps, {:3g} ms/step'.format(duration, T, duration/T*1000))  <pre>Total time: 9.13418 sec for 20000 steps, 0.456709 ms/step\n</pre> In\u00a0[\u00a0]: Copied! <pre>ani = animation.ArtistAnimation(fig, ims, interval=10, repeat_delay=1000)\nani.save('animation.mp4')\n</pre> ani = animation.ArtistAnimation(fig, ims, interval=10, repeat_delay=1000) ani.save('animation.mp4') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"articles/archive/ragnarok/#lattice-boltzmann-solver-ragnarok","title":"Lattice Boltzmann solver: Ragnarok\u00b6","text":"<p>Last updated: September 1, 2020</p>"},{"location":"articles/archive/ragnarok/#doubly-periodic-shear-layer","title":"Doubly-periodic shear layer\u00b6","text":"<p>A 2D NS problem with a doubly-period shear layer initial condition.</p> <p>** Lattice Boltzmann method **</p> <p>A simple lattice Boltzmann Bhatnagar-Gross-Krook (LBGK) model is used, given in discrete form as: \\begin{equation} f_i \\left(\\mathbf{x} + \\mathbf{c}_i, t+1\\right) - f_i \\left(\\mathbf{x}, t\\right) = \\alpha \\beta \\left(f_i^{eq} - f_i\\right) \\end{equation}</p> <p>where $\\alpha = 2$, $\\beta = \\left(2\\nu/c_s^2 +1 \\right)^{-1}$, $f_i$ is the population of discrete velocities $\\mathbf{c}_i$ and $f_i^{eq}$ is the equilibrium population. The local macroscopic (i.e. density and momentum) is defined as:</p> <p>\\begin{equation} \\rho = \\Sigma_i f_i \\end{equation} and \\begin{equation} \\rho \\mathbf{u} = \\Sigma_i \\mathbf{c}_i f_i \\end{equation}</p> <p>The present LBM model uses D2Q9 lattice, discretizing the velocity spaces with 9 population function for simulating 2D-dimensional flow. The associated lattice velocites $[c_x, c_y]^T$ and lattice weights $W$ are:</p> <p>\\begin{equation} \\left[\\begin{array}{c} \tc_x\\\\c_y \t\\end{array} \\right] \t= \t\\left[ \\begin{array}{ccccccccc} \t0 &amp; 1 &amp; 0 &amp; -1 &amp; 0 &amp; 1 &amp; -1 &amp; -1 &amp; 1\\\\  \t0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 &amp; 1 &amp; 1 &amp; -1 &amp; -1\\\\  \t\\end{array} \\right] \\end{equation} and \\begin{equation} W =  \\left[ \\begin{array}{ccccccccc} \\frac{4}{9} &amp; \\frac{1}{9} &amp; \\frac{1}{9} &amp; \\frac{1}{9}&amp; \\frac{1}{9} &amp; \\frac{1}{36} &amp; \\frac{1}{36}  &amp; \\frac{1}{36}  &amp; \\frac{1}{36} \\\\  \\end{array} \\right] \\end{equation}</p> <p>The equilibrium population $f_i^{eq}$ is determined from local conservations: \\begin{equation} f_i^{eq} = \\rho W_i \\left(2 - \\sqrt{1 + 3 u_x^2}\\right) \\left(2 - \\sqrt{1 + 3 u_y^2}\\right) \\\\ \\left(\\frac{2u_x- \\sqrt{1 + 3 u_x^2}}{1 - u_x}\\right)^{c_{x,i}} \\left(\\frac{2u_y- \\sqrt{1 + 3 u_y^2}}{1 - u_y}\\right)^{c_{y,i}} \\end{equation}</p> <p>The discrete LBM is split into two operations: advection (streaming) and relaxtion (collision) step.</p>"},{"location":"articles/archive/ragnarok/#import-modules","title":"Import Modules\u00b6","text":""},{"location":"articles/archive/ragnarok/#initial-condition","title":"Initial condition\u00b6","text":""},{"location":"articles/archive/ragnarok/#plotting-function","title":"Plotting function\u00b6","text":""},{"location":"articles/archive/ragnarok/#post-processing-functions","title":"Post-processing functions\u00b6","text":""},{"location":"articles/archive/ragnarok/#settings","title":"Settings\u00b6","text":""},{"location":"articles/archive/ragnarok/#solver","title":"Solver\u00b6","text":""},{"location":"articles/archive/ragnarok/#initial-conditions","title":"Initial conditions\u00b6","text":"<p>The doubly periodic shear layer (DPSL) describes the case of roll-up of two anti-parallel shear layers within a periodic square domain. The initial condition is given as:</p> <p>\\begin{align} u_x &amp;= \\left\\{  \\begin{array}{l} u_0 \\tanh \\left[\\kappa \\left(\\frac{y}{N} - \\frac{1}{4}\\right) \\right], y \\le N/2, \\\\ u_0 \\tanh \\left(\\kappa \\left(\\frac{3}{4} - \\frac{y}{N}\\right) \\right), y &gt; N/2, \\\\ \\end{array} \\right.\\\\ \\\\ u_y &amp;= \\delta \\sin \\left[ 2 \\pi  \\left(\\frac{x}{N} + \\frac{1}{4} \\right)\\right]. \\end{align}</p>"},{"location":"articles/archive/ragnarok/#time-stepping","title":"Time stepping\u00b6","text":"<p>The simulation parameters are $\\mathrm{Re} = (U L)/\\nu = 30\\ 000$, $\\delta = 0.05$, $\\kappa = 80$, $L = N = N_x = N_y = 100$ and $U=0.1$, providing a $\\beta = 0.9980$. The vorticity of the flow is defined as $\\omega = \\nabla \\times \\mathbf{u}$ and in 2D with $\\mathbf{u} = (u_x,u_y)^T$, it is given as: \\begin{equation} \\omega = \\frac{\\partial v}{\\partial x} - \\frac{\\partial u}{\\partial y} \\end{equation}</p> <p>Simulation Algorithm:</p> <ol> <li><code>stream</code>: Streaming / advection step: $f'_i(x) \\leftarrow f^n_i(x-c_i)$</li> <li><code>apply_periodic</code>: Apply periodic boundary condition</li> <li><code>relax</code>: Relaxation / collision step: $f^{n+1}_i(x) \\leftarrow f'_i  + \\alpha\\beta \\left[f'^{eq}_i(x,t) - f'_i(x,t)\\right]$</li> </ol>"},{"location":"articles/archive/ragnarok/#save-animation","title":"Save animation\u00b6","text":""},{"location":"articles/archive/random-irrotational-flow/","title":"Irrotational random flow","text":"<p>Setup</p> In\u00a0[1]: Copied! <pre>import numpy as np\nimport skimage.filters\nimport scipy.ndimage\nimport scipy.sparse\n\n# Plotting\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport proplot as pplt\n\n# Lima\nimport lima\n</pre> import numpy as np import skimage.filters import scipy.ndimage import scipy.sparse  # Plotting import matplotlib as mpl import matplotlib.pyplot as plt import proplot as pplt  # Lima import lima In\u00a0[2]: Copied! <pre>lima.plot.init_mpl_style()\n</pre> lima.plot.init_mpl_style() In\u00a0[3]: Copied! <pre>debug = True\n</pre> debug = True In\u00a0[4]: Copied! <pre>subplotgrid = [  \n    [1, 1, 2, 2, 3, 3],\n    [0, 4, 4, 5, 5, 0],\n]\n</pre> subplotgrid = [       [1, 1, 2, 2, 3, 3],     [0, 4, 4, 5, 5, 0], ] <p>Functions</p> In\u00a0[5]: Copied! <pre>def vortZ(u, v):\n    dudy, dudx = np.gradient(u)\n    dvdy, dvdx = np.gradient(v)\n    return dvdx - dudy\n\ndef divUV(u, v):\n    dudy, dudx = np.gradient(u)\n    dvdy, dvdx = np.gradient(v)\n    return dudx + dvdy\n\ndef random_dataset(vscale=1.0, height=256, width=256, filter_size=5, seed=None):\n    if seed:\n        np.random.seed(seed)\n    # Coordinates\n    x, y = np.meshgrid(np.arange(height, dtype='float32'),\n                       np.arange(width, dtype='float32'))\n\n    #u, v = np.random.rand(2, height, width).astype('float32') - 0.5\n    u, v = np.random.uniform(-1, 1, size=(2, height, width)).astype('float32')\n    u = skimage.filters.gaussian(u, filter_size, mode='reflect')\n    v = skimage.filters.gaussian(v, filter_size, mode='reflect')\n    u = u/np.abs(u).max() * vscale\n    v = v/np.abs(v).max() * vscale\n    # Parameters\n    #print(np.max(u), np.max(v))\n    return x, y, u, v\n\ndef quiver(ax, x, y, u, v, skip=1, *args, **kwargs):\n    return ax.quiver(\n        x[::skip, ::skip], y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],\n        *args, **kwargs\n    )\n\nnorm = lambda u,v: np.sqrt(u**2 + v**2)\n</pre> def vortZ(u, v):     dudy, dudx = np.gradient(u)     dvdy, dvdx = np.gradient(v)     return dvdx - dudy  def divUV(u, v):     dudy, dudx = np.gradient(u)     dvdy, dvdx = np.gradient(v)     return dudx + dvdy  def random_dataset(vscale=1.0, height=256, width=256, filter_size=5, seed=None):     if seed:         np.random.seed(seed)     # Coordinates     x, y = np.meshgrid(np.arange(height, dtype='float32'),                        np.arange(width, dtype='float32'))      #u, v = np.random.rand(2, height, width).astype('float32') - 0.5     u, v = np.random.uniform(-1, 1, size=(2, height, width)).astype('float32')     u = skimage.filters.gaussian(u, filter_size, mode='reflect')     v = skimage.filters.gaussian(v, filter_size, mode='reflect')     u = u/np.abs(u).max() * vscale     v = v/np.abs(v).max() * vscale     # Parameters     #print(np.max(u), np.max(v))     return x, y, u, v  def quiver(ax, x, y, u, v, skip=1, *args, **kwargs):     return ax.quiver(         x[::skip, ::skip], y[::skip, ::skip], u[::skip, ::skip], v[::skip, ::skip],         *args, **kwargs     )  norm = lambda u,v: np.sqrt(u**2 + v**2) In\u00a0[6]: Copied! <pre>def construct_LHS(nx, ny, h=1):\n    n = nx * ny \n    B = np.zeros((5, n))\n\n    for i in range(ny):\n        for j in range(nx):\n            k = j*nx + i\n            if i == 0:\n                if j == 0:\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h)\n                    B[3, k+1]  = -2*h/(h + h)\n                    B[4, k+nx] = -2*h/(h + h)\n                elif j == nx-1:\n                    B[0, k-nx] = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h)\n                    B[3, k+1]  = -2*h/(h + h)\n                else:\n                    B[0, k-nx] = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)\n                    B[3, k+1]  = -2*h/(h + h)\n                    B[4, k+nx] = -2*h/(h + h)\n            elif i == nx-1:\n                if j == 0:\n                    B[1, k-1]  = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h)\n                    B[4, k+nx] = -2*h/(h + h)\n                elif j == nx-1:\n                    B[0, k-nx] = -2*h/(h + h)\n                    B[1, k-1]  = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h)\n                else:\n                    B[0, k-nx] = -2*h/(h + h)\n                    B[1, k-1]  = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)\n                    B[4, k+nx] = -2*h/(h + h)\n            elif j == 0:\n                if ( i &gt; 0 and i &lt; nx-1 ):\n                    B[1, k-1]  = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)\n                    B[3, k+1]  = -2*h/(h + h)\n                    B[4, k+nx] = -2*h/(h + h)\n            elif j == nx-1:\n                if ( i &gt; 0 and i &lt; nx-1 ):\n                    B[0, k-nx] = -2*h/(h + h)\n                    B[1, k-1]  = -2*h/(h + h)\n                    B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)\n                    B[3, k+1]  = -2*h/(h + h)\n            else:\n                B[0, k-nx]     = -2*h/(h + h)\n                B[1, k-1]      = -2*h/(h + h)\n                B[2, k]        =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)\n                B[3, k+1]      = -2*h/(h + h)\n                B[4, k+nx]     = -2*h/(h + h)\n    \n    # Diagonal indices\n    diags = np.array([-nx, -1, 0, 1, nx])\n\n    # Construct sparse diagonal matrix\n    L = scipy.sparse.spdiags(B, diags, n, n).tocsr()\n    return L\n\ndef construct_RHS(u, v):\n    f = -divUV(u, v)\n    return f.ravel()\n\ndef solve_poisson_equation(u, v, L=None, debug=False, maxiter=100):\n    if L is None:\n        L = construct_LHS(u.shape[0], u.shape[1])\n    f = construct_RHS(u, v)\n    # Solve using gmres\n    phi, info = scipy.sparse.linalg.gmres(L, f, maxiter=maxiter)\n    if debug:\n        print(f\"Residual: {np.sum(np.abs(L.dot(phi) - f))}\")\n    phi = phi.reshape(u.shape[0], u.shape[1])\n    return phi\n    \ndef calculate_irrotational_flow(u, v, L=None, debug=False, maxiter=100):\n    # Solve poisson equation: $\\nabla^2 \\phi = -\\nabla \\cdot u$\n    phi = solve_poisson_equation(u, v, L, debug, maxiter)\n    \n    # Calculate irrotation flow\n    v_phi, u_phi = np.gradient(phi)\n    \n    return u_phi, v_phi\n</pre> def construct_LHS(nx, ny, h=1):     n = nx * ny      B = np.zeros((5, n))      for i in range(ny):         for j in range(nx):             k = j*nx + i             if i == 0:                 if j == 0:                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h)                     B[3, k+1]  = -2*h/(h + h)                     B[4, k+nx] = -2*h/(h + h)                 elif j == nx-1:                     B[0, k-nx] = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h)                     B[3, k+1]  = -2*h/(h + h)                 else:                     B[0, k-nx] = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)                     B[3, k+1]  = -2*h/(h + h)                     B[4, k+nx] = -2*h/(h + h)             elif i == nx-1:                 if j == 0:                     B[1, k-1]  = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h)                     B[4, k+nx] = -2*h/(h + h)                 elif j == nx-1:                     B[0, k-nx] = -2*h/(h + h)                     B[1, k-1]  = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h)                 else:                     B[0, k-nx] = -2*h/(h + h)                     B[1, k-1]  = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)                     B[4, k+nx] = -2*h/(h + h)             elif j == 0:                 if ( i &gt; 0 and i &lt; nx-1 ):                     B[1, k-1]  = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)                     B[3, k+1]  = -2*h/(h + h)                     B[4, k+nx] = -2*h/(h + h)             elif j == nx-1:                 if ( i &gt; 0 and i &lt; nx-1 ):                     B[0, k-nx] = -2*h/(h + h)                     B[1, k-1]  = -2*h/(h + h)                     B[2, k]    =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)                     B[3, k+1]  = -2*h/(h + h)             else:                 B[0, k-nx]     = -2*h/(h + h)                 B[1, k-1]      = -2*h/(h + h)                 B[2, k]        =  2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h) + 2*h/(h + h)                 B[3, k+1]      = -2*h/(h + h)                 B[4, k+nx]     = -2*h/(h + h)          # Diagonal indices     diags = np.array([-nx, -1, 0, 1, nx])      # Construct sparse diagonal matrix     L = scipy.sparse.spdiags(B, diags, n, n).tocsr()     return L  def construct_RHS(u, v):     f = -divUV(u, v)     return f.ravel()  def solve_poisson_equation(u, v, L=None, debug=False, maxiter=100):     if L is None:         L = construct_LHS(u.shape[0], u.shape[1])     f = construct_RHS(u, v)     # Solve using gmres     phi, info = scipy.sparse.linalg.gmres(L, f, maxiter=maxiter)     if debug:         print(f\"Residual: {np.sum(np.abs(L.dot(phi) - f))}\")     phi = phi.reshape(u.shape[0], u.shape[1])     return phi      def calculate_irrotational_flow(u, v, L=None, debug=False, maxiter=100):     # Solve poisson equation: $\\nabla^2 \\phi = -\\nabla \\cdot u$     phi = solve_poisson_equation(u, v, L, debug, maxiter)          # Calculate irrotation flow     v_phi, u_phi = np.gradient(phi)          return u_phi, v_phi In\u00a0[7]: Copied! <pre>filter_size = 5\nvscale = 1\nheight = width = 64\n</pre> filter_size = 5 vscale = 1 height = width = 64 In\u00a0[8]: Copied! <pre># Random dist.\nnp.random.seed(234)\n\nx, y, _,_ = random_dataset(vscale=1, height=height, width=width, filter_size=filter_size)\nu, v = np.random.uniform(-1, 1, size=(2, height, width)).astype('float32')\n\n# Filtered\nuf = skimage.filters.gaussian(u, filter_size, mode=\"reflect\")#, preserve_range=True) \nvf = skimage.filters.gaussian(v, filter_size, mode=\"reflect\")#, preserve_range=True)\nuf = uf/np.abs(uf).max() * vscale\nvf = vf/np.abs(vf).max() * vscale\n# Scaled\nus = uf\nvs = vf\n</pre> # Random dist. np.random.seed(234)  x, y, _,_ = random_dataset(vscale=1, height=height, width=width, filter_size=filter_size) u, v = np.random.uniform(-1, 1, size=(2, height, width)).astype('float32')  # Filtered uf = skimage.filters.gaussian(u, filter_size, mode=\"reflect\")#, preserve_range=True)  vf = skimage.filters.gaussian(v, filter_size, mode=\"reflect\")#, preserve_range=True) uf = uf/np.abs(uf).max() * vscale vf = vf/np.abs(vf).max() * vscale # Scaled us = uf vs = vf In\u00a0[9]: Copied! <pre>fig = pplt.figure(refwidth='1.8', span=False)\naxes = fig.subplots(subplotgrid)\n\ns = 5\n# u\nax = axes[0]\nim = ax.imshow(us,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=r\"U-Velocity: $u$\")\n\n# v\nax = axes[1]\nim = ax.imshow(vs,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=r\"V-Velocity: $v$\")\n\n# |u| \nax = axes[2]\nim = ax.imshow((us**2 + vs**2)**0.5,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nquiver(ax, x, y, us, vs, skip=2, color='k', scale=s)\nax.format(title=r\"Velocity mag.: $|u|$\")\n\n# vorticity |u| \nax = axes[3]\nim = ax.imshow(np.abs(vortZ(us, vs)), interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=fr\"Vorticity mag.: $|\\nabla \\times u|$ (sum={np.abs(vortZ(us, vs)).sum():2g})\")\nax.streamplot(x, y, us, vs, c='k', lw=0.5)\nax.axis([0, height, 0, width])\n\n# divergence |u| \nax = axes[4]\nim = ax.imshow(divUV(us, vs), interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=r\"Divergence: $\\nabla \\cdot u$\")\n\n# Quiver\n\n# # Format\naxes.format(\n    abc='(a)', abcloc='ul', abcbbox=True,\n    xlabel='$x$ (px)', ylabel='$y$ (px)',\n    suptitle='Pure random vector field',\n)\n</pre> fig = pplt.figure(refwidth='1.8', span=False) axes = fig.subplots(subplotgrid)  s = 5 # u ax = axes[0] im = ax.imshow(us,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') ax.format(title=r\"U-Velocity: $u$\")  # v ax = axes[1] im = ax.imshow(vs,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') ax.format(title=r\"V-Velocity: $v$\")  # |u|  ax = axes[2] im = ax.imshow((us**2 + vs**2)**0.5,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') quiver(ax, x, y, us, vs, skip=2, color='k', scale=s) ax.format(title=r\"Velocity mag.: $|u|$\")  # vorticity |u|  ax = axes[3] im = ax.imshow(np.abs(vortZ(us, vs)), interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') ax.format(title=fr\"Vorticity mag.: $|\\nabla \\times u|$ (sum={np.abs(vortZ(us, vs)).sum():2g})\") ax.streamplot(x, y, us, vs, c='k', lw=0.5) ax.axis([0, height, 0, width])  # divergence |u|  ax = axes[4] im = ax.imshow(divUV(us, vs), interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') ax.format(title=r\"Divergence: $\\nabla \\cdot u$\")  # Quiver  # # Format axes.format(     abc='(a)', abcloc='ul', abcbbox=True,     xlabel='$x$ (px)', ylabel='$y$ (px)',     suptitle='Pure random vector field', ) <p>Solve discrete poisson equation</p> <p>The 2D poisson equation is: $$ \\nabla^2 \\phi = f $$ or in 2D cartesian: $$ \\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} = f $$</p> <p>In discretize form (central): $$ \\frac{\\phi_{i+1,j} - 2\\phi_{i,j} + \\phi_{i-1,j}}{\\Delta x^2} + \\frac{\\phi_{i,j+1} - 2\\phi_{i,j} + \\phi_{i,j-1}}{\\Delta y^2} = f_{i,j} $$</p> <p>Define the discrete Laplacian, i.e., the Laplacian matrix $L$, we then need to solve the system of equation: $$ L \\phi = f $$</p> In\u00a0[10]: Copied! <pre>nx, ny = us.shape\nL = construct_LHS(nx, ny)\n</pre> nx, ny = us.shape L = construct_LHS(nx, ny) <p>Condition number</p> In\u00a0[11]: Copied! <pre>if debug:\n    print(f\"Condition number: {np.linalg.cond(L.todense())}!!!\")\n</pre> if debug:     print(f\"Condition number: {np.linalg.cond(L.todense())}!!!\") <pre>Condition number: 1.1483591666066174e+16!!!\n</pre> In\u00a0[12]: Copied! <pre>if debug:\n    fig = pplt.figure()\n    ax = fig.gca()\n    im = ax.matshow(L.toarray(), cmap='turbo')\n    ax.colorbar(im)\n    ax.axis([100, 0, 0, 100])\n</pre> if debug:     fig = pplt.figure()     ax = fig.gca()     im = ax.matshow(L.toarray(), cmap='turbo')     ax.colorbar(im)     ax.axis([100, 0, 0, 100]) In\u00a0[13]: Copied! <pre>%%time\nmaxiter = 200\nu_phi, v_phi = calculate_irrotational_flow(us, vs, L, debug=debug, maxiter=maxiter)\n</pre> %%time maxiter = 200 u_phi, v_phi = calculate_irrotational_flow(us, vs, L, debug=debug, maxiter=maxiter) <pre>Residual: 6.324544840488443\nCPU times: user 847 ms, sys: 20.1 ms, total: 867 ms\nWall time: 434 ms\n</pre> <p>Inspect vorticity</p> In\u00a0[14]: Copied! <pre>fig = pplt.figure(refwidth='1.8', span=False)\naxes = fig.subplots(subplotgrid)\n\ns = 5\n# u\nax = axes[0]\nim = ax.imshow(u_phi,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\n# quiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s)\nax.format(title=r\"U-Velocity: $u$\")\n\n# v\nax = axes[1]\nim = ax.imshow(v_phi,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\n# quiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s)\nax.format(title=r\"V-Velocity: $v$\")\n\n# |u| \nax = axes[2]\nim = ax.imshow((u_phi**2 + v_phi**2)**0.5,  interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nquiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s)\nax.format(title=r\"Velocity mag.: $|u|$\")\n# ax.streamplot(x, y, u_phi, v_phi, c='k', lw=0.5)\n# ax.axis([0, height, 0, width])\n\n# vorticity |u| \nax = axes[3]\nim = ax.imshow(np.abs(vortZ(u_phi, v_phi)), interpolation='none')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=fr\"Vorticity mag.: $|\\nabla \\times u|$ (sum={np.abs(vortZ(u_phi, v_phi)).sum():2g})\")\n\n# divergence |u| \nax = axes[4]\nim = ax.imshow(divUV(u_phi, v_phi), interpolation='none', cmap='turbo')\ncb = ax.colorbar(im, width='0.75em')\nax.format(title=r\"Divergence: $\\nabla \\cdot u$\")\n# ax.axis([0,64,0,64])\n\n# Quiver\n\n# # Format\naxes.format(\n    abc='(a)', abcloc='ul', abcbbox=True,\n    xlabel='$x$ (px)', ylabel='$y$ (px)',\n    suptitle='Irrotatonal random vector field',\n)\n</pre> fig = pplt.figure(refwidth='1.8', span=False) axes = fig.subplots(subplotgrid)  s = 5 # u ax = axes[0] im = ax.imshow(u_phi,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') # quiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s) ax.format(title=r\"U-Velocity: $u$\")  # v ax = axes[1] im = ax.imshow(v_phi,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') # quiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s) ax.format(title=r\"V-Velocity: $v$\")  # |u|  ax = axes[2] im = ax.imshow((u_phi**2 + v_phi**2)**0.5,  interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') quiver(ax, x, y, u_phi, v_phi, skip=2, color='k', scale=s) ax.format(title=r\"Velocity mag.: $|u|$\") # ax.streamplot(x, y, u_phi, v_phi, c='k', lw=0.5) # ax.axis([0, height, 0, width])  # vorticity |u|  ax = axes[3] im = ax.imshow(np.abs(vortZ(u_phi, v_phi)), interpolation='none') cb = ax.colorbar(im, width='0.75em') ax.format(title=fr\"Vorticity mag.: $|\\nabla \\times u|$ (sum={np.abs(vortZ(u_phi, v_phi)).sum():2g})\")  # divergence |u|  ax = axes[4] im = ax.imshow(divUV(u_phi, v_phi), interpolation='none', cmap='turbo') cb = ax.colorbar(im, width='0.75em') ax.format(title=r\"Divergence: $\\nabla \\cdot u$\") # ax.axis([0,64,0,64])  # Quiver  # # Format axes.format(     abc='(a)', abcloc='ul', abcbbox=True,     xlabel='$x$ (px)', ylabel='$y$ (px)',     suptitle='Irrotatonal random vector field', )"},{"location":"articles/archive/random-irrotational-flow/#irrotational-random-flow","title":"Irrotational random flow\u00b6","text":"<p>Last updated: March 3, 2021</p>"},{"location":"articles/archive/random-irrotational-flow/#pure-random-flow","title":"Pure-random flow\u00b6","text":""},{"location":"articles/archive/random-irrotational-flow/#rotational-and-irrotational-component","title":"Rotational and irrotational component\u00b6","text":""},{"location":"articles/archive/random-irrotational-flow/#irrotational-flow","title":"Irrotational Flow\u00b6","text":"<ol> <li>Perform helmholtz decomposition: $$ u = -\\nabla \\phi + \\nabla \\times \\psi $$</li> <li>Construct poisson equation by taking divergence of velocity: $$ \\nabla \\cdot u = -\\nabla^2 \\phi \\equiv f $$</li> <li>Solve poisson equation using iterative method (relaxation method) or directly.</li> <li>Calculate irrotation velocity: $$ u_{\\phi} = -\\nabla \\phi $$</li> </ol>"},{"location":"articles/archive/random-irrotational-flow/#construct-the-sparse-l-matrix-lhs","title":"Construct the Sparse L matrix (LHS)\u00b6","text":""},{"location":"articles/archive/random-irrotational-flow/#calculate-irrotational-velocity","title":"Calculate irrotational velocity\u00b6","text":"<p>The irrotation velocity component is defined as: $$ u_{\\phi} = -\\nabla \\phi $$</p> <p>where $$ \\begin{aligned} u_{x,\\phi} &amp;= \\frac{\\partial \\phi}{\\partial x}\\\\ u_{y,\\phi} &amp;= \\frac{\\partial \\phi}{\\partial y} \\end{aligned} $$</p>"},{"location":"articles/archive/rockylinux/","title":"Rockylinux","text":"<p>Last updated: February 10, 2019</p>"},{"location":"articles/archive/rockylinux/#installing-rocky-linux-9","title":"Installing Rocky Linux 9","text":"<p>A detailed guide on installing rocky linux is available at: docs.rockylinux.org.</p>"},{"location":"articles/archive/rockylinux/#download-and-verify-iso","title":"Download and verify ISO","text":"<ol> <li> <p>Download using <code>wget</code>:</p> <pre><code>wget https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9.0-20220808.0-x86_64-dvd.iso\n</code></pre> </li> <li> <p>Check validity of ISO</p> <pre><code>wget https://download.rockylinux.org/pub/rocky/9.0/isos/x86_64/CHECKSUM\nsha256sum -c CHECKSUM --ignore-missing\n</code></pre> </li> <li> <p>Make bootable USB</p> <pre><code>sudo dd if=/path/to/iso.iso of=/dev/sdX status=progress\n</code></pre> <p>Change <code>/path/to/iso</code> and <code>/dev/sdX</code> appropriately. Use <code>lsblk</code> or <code>diskutil list</code> (macos) to find available drives.</p> </li> </ol>"},{"location":"articles/archive/rockylinux/#install-os-using-anaconda","title":"Install OS using anaconda","text":"<p>Follow the instructions shown. Setup keyboard, language, drive, softwares, network, hostname, time &amp; date, root password and default user. Make sure to give <code>administrator</code> privileges to default user.</p>"},{"location":"articles/archive/rockylinux/#installing-graphical-environment-gnome","title":"Installing Graphical environment (Gnome)","text":"<pre><code>sudo dnf group list\nsudo dnf groupinstall \"Workstation\"\nsudo dnf groupinstall \"Server with GUI\"\nsudo systemctl set-default graphical\nsudo reboot\n</code></pre>"},{"location":"articles/archive/rockylinux/#install-cuda-drivers-and-cudatoolkit","title":"Install CUDA drivers and cudatoolkit","text":"<p>A detailed instruction is available at: cuda-installation-guide-linux.</p> <ol> <li> <p>Install development tools, kernel, libraries</p> <pre><code>sudo dnf config-manager --set-enabled crb # codeready-builder\nsudo dnf group install -y \"Development tools\"\nsudo dnf install epel-release rpmfusion-free-release # extra and free\nsudo dnf install -y kernel-devel kernel-headers\n</code></pre> </li> <li> <p>Instructions from Nvidia Cudatoolkit: developer.nvidia.com/cuda-downloads.</p> <pre><code>sudo dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/cuda-rhel9.repo\nsudo dnf clean all\nsudo dnf -y module install nvidia-driver:latest-dkms\nsudo dnf -y install cuda\n</code></pre> </li> <li> <p>Post-installation setup</p> <p>Append to bash environment:</p> <pre><code>export PATH=/usr/local/cuda-11.8/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-11.8/lib64\\\n                        ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n</code></pre> </li> <li> <p>Install third-party libraries</p> <pre><code>sudo dnf install libX11-devel libXi-devel libXmu-devel make mesa-libGLU-devel freeimage-devel\nsudo dnf --enablerepo=devel install freeglut-devel\n</code></pre> </li> <li> <p>Verify cuda environment</p> <p>Download cuda samples, compile and run <code>deviceQuery</code>.</p> </li> </ol>"},{"location":"articles/archive/rockylinux/#setup-terminal-environment","title":"Setup terminal environment","text":"<ol> <li> <p>Install zsh</p> <pre><code>sudo dnf install zsh\n</code></pre> </li> <li> <p>(Optional) setup and customizations</p> <ul> <li>ohmyzsh: https://ohmyz.sh/</li> <li>nordtheme: https://www.nordtheme.com/</li> <li>Fira code fonts: https://github.com/tonsky/FiraCode</li> </ul> </li> </ol>"},{"location":"articles/archive/rockylinux/#install-libraries-apps-tools","title":"Install libraries, apps, tools","text":"<ol> <li> <p>Monitoring apps</p> <pre><code>sudo dnf install htop btop glances\n</code></pre> </li> <li> <p>Build tools</p> <pre><code>sudo dnf install libdrm-devel systemd-devel\nsudo dnf install cmake ncurses-devel git gcc-c++\nsudo dnf install qt5-qtdeclarative\n</code></pre> <p>additional: <pre><code>sudo dnf install gcc make dkms acpid libglvnd-glx libglvnd-opengl libglvnd-devel pkgconfig # programming\n</code></pre></p> </li> <li> <p>Audio/Video dependencies</p> <pre><code>sudo dnf install vlc ffmpeg ffmpeg-devel\n</code></pre> </li> </ol>"},{"location":"articles/archive/rockylinux/#install-popular-apps-using-flatpak","title":"Install popular apps using Flatpak","text":"<ol> <li> <p>Setup <code>FlatHub</code> repo: flathub.org</p> <pre><code>sudo dnf install flatpak\nflatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\nsudo reboot\n</code></pre> </li> <li> <p>Install vscode, spotify, etc.</p> <pre><code>flatpak install flathub com.spotify.Client\nflatpak install flathub com.slack.Slack\nflatpak install flathub us.zoom.Zoom\n</code></pre> </li> </ol>"},{"location":"articles/archive/rockylinux/#setup-python-environment","title":"Setup python environment","text":"<p>Install a conda environment using mambaforge: github.com/conda-forge/miniforge</p>"},{"location":"articles/archive/rockylinux/#more-info","title":"More info","text":"<ul> <li>CRB: (CRB is \"Code Ready Builder\" - PowerTools was a carryover from CentOS, which is still the equivalent of CRB in RHEL. crb will be the repository name going forward in Rocky Linux and other derivatives.) More info</li> </ul> <p>Additional resources:</p> <ul> <li>https://www.linuxcapable.com/how-to-install-ffmpeg-on-rocky-linux-9/</li> <li>https://medium.com/@panda1100/setup-nvidia-gpu-driver-on-rocky-linux-9-0-166d7ce111b2A</li> <li>https://darryldias.me/2021/nvidia-drivers-on-rocky-linux/</li> <li>https://www.if-not-true-then-false.com/2021/install-nvidia-drivers-on-centos-rhel-rocky-linux/</li> </ul>"},{"location":"articles/archive/setup-jupyterhub/","title":"Setup jupyterhub","text":"<p>Last updated: February 10, 2020</p>"},{"location":"articles/archive/setup-jupyterhub/#a-guide-to-setup-jupyterhub","title":"A guide to setup jupyterhub","text":"<p>References:</p> <ul> <li>https://jupyterhub.readthedocs.io/en/stable/quickstart.html#installation.</li> <li>https://github.com/markusschanta/awesome-jupyter#jupyterlab-extensions</li> </ul>"},{"location":"articles/archive/setup-jupyterhub/#install-jupyterhub","title":"Install <code>jupyterhub</code>","text":"<ol> <li> <p>Setup jupyterhub in conda environment. This is the simplest option from experience.</p> <pre><code>conda install -c conda-forge jupyterhub  # installs jupyterhub and proxy\nconda install jupyterlab notebook  # needed if running the notebook servers in the same environmen\n</code></pre> </li> <li> <p>Install any additional libraries (eg.: <code>numpy</code>, <code>cudatoolkit</code>, <code>MATLAB</code>)</p> <pre><code>conda install -c nvidia cuda\npython -m pip install numpy scipy matplotlib # basic numerical libraries\npython -m pip install jupyter-matlab-proxy # matlab (assuming matlab is available locally)\njupyter labextension install @jupyterlab/server-proxy\n</code></pre> </li> <li> <p>Install extensions for <code>jupyterlab</code>:</p> <pre><code>pip install JLDracula # dracula theme\npip install jupyterlab_nvdashboard # GPU dashboard\npip install jupyterlab-drawio # drawing diagrams\npip install nb_black # linting\npip install jupyterlab-code-formatter # formatting\n</code></pre> </li> </ol>"},{"location":"articles/archive/setup-jupyterhub/#create-a-startup-script-for-jupyterhub","title":"Create a startup script for <code>jupyterhub</code>","text":"<p>A nice startup script for starting jupyterhub:</p> <p>Contents of <code>/etc/jupyterhub/start_jupyterhub.sh</code>: <pre><code>#!/bin/env bash\n\nexport PYTHONPATH=''\neval \"$(/opt/conda/condabin/conda shell.bash hook)\"\n\nconda activate jupyterhub\n\njupyterhub -f jupyterhub_config.py\n</code></pre></p> <p>We can add additional bash config that might be needed for setting up the jupyter environment.</p>"},{"location":"articles/archive/setup-jupyterhub/#create-a-systemd-unit-for-jupyterhub","title":"Create a <code>systemd</code> unit for jupyterhub","text":"<p>Now to ensure that jupyterhub is started as system boot, we can add it as a <code>systemd</code> unit which will call the bash script above.</p> <p>Contents of <code>/etc/systemd/system/jupyterhub.service</code>: <pre><code>[Unit]\nDescription=JupyterHub\nAfter=syslog.target network-online.target nginx.target sshd.target\n\n[Service]\nUser=root\nWorkingDirectory=/etc/jupyterhub\nEnvironment=\"PATH=/opt/conda/condabin:$PATH\"\nExecStart=/etc/jupyterhub/start_jupyterhub.sh\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>We can enabled and start the following systemd unit by: <pre><code>systemctl daemon-reload\nsystemctl enable jupyterhub.service\nsystemctl start jupyterhub.service\n</code></pre></p> <p>Now, upon boot, a <code>jupyterhub</code> service will automatically started with jupyterhub served at default port (e.g.: <code>http://localhost:8880</code>).</p>"},{"location":"articles/archive/setup-jupyterhub/#setup-reverse-proxy-using-nginx","title":"Setup reverse-proxy using <code>nginx</code>","text":"<p>It is still inconvenient to remember the port number. So it would be nice to have <code>jupyterhub</code> accessible at some subdomain or subdirectory (e.g.: <code>http://localhost/jupyter</code>). We can achieve this by using a reverse-proxy such as <code>nginx</code>.</p> <p>Contents of <code>/etc/nginx/sites-available/default</code>:</p> <pre><code>server {\n...\n\n    ## &gt;&gt;&gt; Append this below\n\n# JupyterHub\nlocation /jupyter/ {\n# NOTE important to also set base url of jupyterhub to /jupyter in its config\nproxy_pass http://127.0.0.1:8880;\n\nproxy_redirect   off;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header Host $host;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\n\n# websocket headers\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection $connection_upgrade;\n\n}\n</code></pre> <p>We can update the nginx using following commands: <pre><code>nginx -t # Test the configuration\nnginx -s reload # Reload the configuration\n</code></pre></p> <p>Now we should have jupyterhub served at: <code>http://localhost/jupyter</code>. If we have port exposed to outside, then <code>http://&lt;your_hostname&gt;/jupyter</code>.</p>"},{"location":"articles/archive/slurm/","title":"Slurm: Usage guide for HPC Job Scheduler","text":"<p>Last updated: October 27, 2021</p>"},{"location":"articles/archive/slurm/#administrative-commands","title":"Administrative commands","text":"<ul> <li> <p>Change the state of <code>node02</code>:</p> <pre><code>scontrol update nodename=node02 state=resume\n</code></pre> </li> <li> <p>Show partitions, nodes</p> <pre><code>scontrol show partition\nscontrol show nodes\n</code></pre> </li> <li> <p>Show status of slurm</p> <pre><code>sinfo\n</code></pre> </li> <li> <p>Report only down, drained of draining nodes and their reason</p> <pre><code>sinfo -R\n</code></pre> </li> </ul>"},{"location":"articles/archive/slurm/#user-commands","title":"User commands","text":"<ul> <li> <p>Run one task on a given partition with 3 nodes</p> <pre><code>srun --nodes=3 --partition=cluster hostname\n</code></pre> </li> <li> <p>Run one task on a specific node list</p> <pre><code>srun --nodelist=node01,node02 hostname\n</code></pre> </li> <li> <p>Run multiple task on a single node</p> <pre><code>srun --ntasks-per-node=4 hostname\n</code></pre> </li> <li> <p>Submit a batch job</p> <pre><code>sbatch submit.job\n</code></pre> </li> </ul> <p>Contents of of the <code>submit.job</code></p> <pre><code>#!/bin/bash\n#SBATCH --nodes=2\n#SBATCH --ntasks-per-node=4\n#SBATCH --partition=cluster\n\ncd $SLURM_SUBMIT_DIR\n\nsrun echo \"Hello, World!\"\n</code></pre>"},{"location":"articles/archive/snapshot-backups/","title":"Snapshot backups","text":"<p>Last updated: December 10, 2020</p>"},{"location":"articles/archive/snapshot-backups/#quick-and-simple-snapshot-backuping-using-rsync","title":"Quick and simple snapshot backuping using rsync","text":"<pre><code>The 3-2-1 rule can aid in the backup process. It states that there should be at least 3 copies of the data, stored on 2 different types of storage media, and one copy should be kept offsite, in a remote location.\n\n- Wikipedia on Backup\n</code></pre> <p>References:</p> <ul> <li>https://en.wikipedia.org/wiki/Backup</li> </ul>"},{"location":"articles/archive/snapshot-backups/#step-1-make-a-rsync-snapshot","title":"Step 1: Make a rsync snapshot","text":"<p>We first make a snapshot of whatever folder you are interested. In this example, we take a snapshot of the home directory (<code>/home/</code>) to a mounted external device mounted at <code>/mnt/backup</code>.</p> <pre><code>rsync -avhux --delete /home/ /mnt/backup/snap-latest/\n</code></pre> <p>The <code>--delete</code> option is used to ensure it's a literal snapshot and unwanted files are also removed. Ideally, we should periodically and automatically perform this command, e.g. using a <code>cron</code> job. Add the following line by editing the crontab, <code>crontab -e</code>:</p> <pre><code>0 12 * * 6 rsync -avhux --delete --info=stats2 /home/ /mnt/backup/snap-latest/ &gt;/mnt/backup/logs/snap-\"$(date +'\\%Y\\%m\\%d')\".log 2&gt;&amp;1\n</code></pre> <p>We now scheduled it for saturday (i.e., <code>6</code>) at noon and also log the transfer to a log file with a timestamp.</p>"},{"location":"articles/archive/snapshot-backups/#step-2-make-a-compressed-backup","title":"Step 2: Make a compressed backup","text":"<p>Once, we have a snapshot clone of our <code>/home/</code> dir, we can also periodically make a compressed backup of the snapshot. All we need is to tar and compress the latest snapshot with the timestamp of the snapshot:</p> <pre><code>tar -cvzf /mnt/backup/snap-\"$(date +'\\%Y\\%m\\%d')\".tgz --directory=/mnt/backup/snap-latest/ .\n</code></pre> <p>Ideally, we can now make a backup of the compressed file to another backup device. Like with <code>rsync</code>, we can schedule the compressing and ideally we do it once a month:</p> <pre><code>0 0 1 * * tar -cvzf /mnt/backup/snap-\"$(date +'\\%Y\\%m\\%d')\".tgz --directory=/mnt/backup/snap-latest/ . &gt;/mnt/backup/logs/tar-\"$(date +'\\%Y\\%m\\%d')\".log 2&gt;&amp;1\n</code></pre> <p>We perfom the command again with <code>cron</code>, at first day of the month (<code>1</code>).</p>"},{"location":"articles/archive/systemd-timers/","title":"How to setup a systemd timer","text":"<p>Last updated: March 10, 2021</p> <p>Timers are systemd unit files that can execute commands similar to cron jobs.</p>"},{"location":"articles/archive/systemd-timers/#example-setup-a-timer-to-notify-if-system-is-up","title":"Example: Setup a timer to notify if system is up","text":"<ol> <li> <p>Setup a notify script to send notification to mattermost:</p> <p><code>/opt/notify/notify_up.sh</code> <pre><code>#!/bin/env bash\n\nWEBHOOK_URL=https://mattermost.myserver.ch/hooks/hookurl\n\ncurl -i -X POST -H 'Content-Type: application/json' -d '{\"text\": \":sparkles: **I am back online** :sparkles: :sunglasses::+1:\"}' $WEBHOOK_URL &gt; /dev/null\n</code></pre></p> </li> <li> <p>Setup a timer unit file</p> <p><code>/usr/lib/systemd/system/notify_up.timer</code> <pre><code>[Unit]\nDescription=Notify server is back online\nWants=network-online.target sshd.service\n\n[Timer]\nOnBootSec=5min\nUnit=notify_up.service\n\n[Install]\nWantedBy=timers.target\n</code></pre></p> </li> <li> <p>Setup the service unit file:</p> <p><code>/usr/lib/systemd/system/notify_up.service</code> <pre><code>[Unit]\nDescription=Notify server is back online\nAfter=network-online.target sshd.service\n\n[Service]\nType=oneshot\nExecStart=/opt/notify/notify_up.sh\n</code></pre></p> </li> <li> <p>Reload systemd:</p> <p><code>systemctl daemon-reload</code></p> </li> <li> <p>Enable and start the timer unit file:</p> <pre><code>systemctl enable notify_up.timer\nsystemctl start notify_up.timer\n</code></pre> </li> <li> <p>Show list of timers:</p> <pre><code>$ systemctl list-timers --all\n\nNEXT                        LEFT          LAST                        PASSED       UNIT                         ACTIVATES\nThu 2022-03-10 15:33:45 CET 30min left    Thu 2022-03-10 14:30:30 CET 32min ago    anacron.timer                anacron.service\nThu 2022-03-10 17:38:57 CET 2h 36min left Wed 2022-03-09 22:18:37 CET 16h ago      apt-daily.timer              apt-daily.service\nThu 2022-03-10 19:00:23 CET 3h 57min left Thu 2022-03-10 09:02:59 CET 5h 59min ago fwupd-refresh.timer          fwupd-refresh.service\nThu 2022-03-10 19:02:13 CET 3h 59min left Thu 2022-03-10 12:39:48 CET 2h 23min ago ua-timer.timer               ua-timer.service\nThu 2022-03-10 23:56:18 CET 8h left       Thu 2022-03-10 06:50:02 CET 8h ago       motd-news.timer              motd-news.service\nFri 2022-03-11 00:00:00 CET 8h left       Thu 2022-03-10 00:00:02 CET 15h ago      logrotate.timer              logrotate.service\nFri 2022-03-11 00:00:00 CET 8h left       Thu 2022-03-10 00:00:02 CET 15h ago      man-db.timer                 man-db.service\nFri 2022-03-11 06:58:28 CET 15h left      Thu 2022-03-10 06:50:38 CET 8h ago       apt-daily-upgrade.timer      apt-daily-upgrade.service\nFri 2022-03-11 10:06:01 CET 19h left      Thu 2022-03-10 10:06:01 CET 4h 56min ago systemd-tmpfiles-clean.timer systemd-tmpfiles-clean.service\nSun 2022-03-13 03:10:30 CET 2 days left   Sun 2022-03-06 03:10:13 CET 4 days ago   e2scrub_all.timer            e2scrub_all.service\nMon 2022-03-14 00:00:00 CET 3 days left   Mon 2022-03-07 00:00:22 CET 3 days ago   fstrim.timer                 fstrim.service\nn/a                         n/a           Wed 2022-03-09 09:55:24 CET 1 day 5h ago notify_up.timer              notify_up.service\nn/a                         n/a           n/a                         n/a          snapd.snap-repair.timer      snapd.snap-repair.service\nn/a                         n/a           n/a                         n/a          ua-license-check.timer       ua-license-check.service\n\n14 timers listed.\n</code></pre> </li> </ol>"},{"location":"articles/archive/systemd/","title":"How to make a custom systemd service","text":"<p>Last updated: October 20, 2019</p> <p>Basic systemd commands:</p> <ul> <li><code>systemctl status</code>: Show status of all systemd service</li> <li><code>systemctl daemon-reload</code>: Reload systemd if units are modified</li> <li><code>systemctl enable</code>: to enable a new service</li> <li><code>systemctl start</code>: to start a new service</li> <li><code>systemctl restart</code>: to restart a service</li> </ul>"},{"location":"articles/archive/systemd/#example-service-file","title":"Example service file","text":"<ol> <li> <p>Make new service unit file in <code>/etc/systemd/system/new-service.service</code>:</p> <pre><code>[Unit]\nDescription = Sensai background service\nAfter = network.target\n\n[Service]\nExecStart = /usr/bin/python3 /home/lento/projects/sensai/log.py\nUser = lento\nGroup = lento\n\n[Install]\nWantedBy = default.target\n</code></pre> </li> <li> <p>Reload systemd and enable the service</p> <pre><code>systemctl daemon-reload\nsystemctl enable new-service.service\n</code></pre> </li> <li> <p>Start the new service</p> <pre><code>systemctl start new-service.service\n</code></pre> </li> <li> <p>Inspect the status</p> <pre><code>systectl status new-service.service\n</code></pre> </li> </ol>"},{"location":"articles/archive/wifi/","title":"Manage and connect to WIFI","text":"<p>Last updated: March 4, 2019</p>"},{"location":"articles/archive/wifi/#step-by-step-guide","title":"Step by step guide","text":"<ol> <li> <p>Install required packages <code>wireless-tools</code>, <code>network-manager</code>.</p> </li> <li> <p>Display wireless devices using <code>iwconfig</code>:</p> <pre><code>$ iwconfig\n\nlo        no wireless extensions.\n\neth0      no wireless extensions.\n\nwlan0     IEEE 802.11  ESSID:off/any\n          Mode:Managed  Access Point: Not-Associated\n          Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:on\n</code></pre> </li> <li> <p>Check status of device using <code>ip</code>:</p> <pre><code>$ ip a\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet 127.0.0.1/8 scope host lo\n   valid_lft forever preferred_lft forever\ninet6 ::1/128 scope host\n   valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\nlink/ether b8:27:eb:0d:38:af brd ff:ff:ff:ff:ff:ff\n    inet 192.168.2.126/24 brd 192.168.2.255 scope global dynamic eth0\n       valid_lft 85767sec preferred_lft 85767sec\n    inet6 fe80::ba27:ebff:fe0d:38af/64 scope link\n       valid_lft forever preferred_lft forever\n3: wlan0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\nlink/ether b8:27:eb:58:6d:fa brd ff:ff:ff:ff:ff:ff\n</code></pre> </li> <li> <p>Set <code>wlan0</code> up using <code>nmcli</code>:</p> <pre><code>$ sudo nmcli radio wifi on\n</code></pre> </li> <li> <p>Check status of wifi:</p> <pre><code>$ nmcli radio wifi\n</code></pre> <p>and</p> <pre><code>$ nmcli dev status\n</code></pre> </li> <li> <p>Scan for wifi:</p> <pre><code>$ nmcli dev wifi list\n\nIN-USE  BSSID              SSID                           MODE   CHAN  RATE        SIGNAL  BARS  SECURITY\n    F0:F7:F9:F7:F3:FC  home_wifi                      Infra  3     270 Mbit/s  100     \u2582\u2584\u2586\u2588  WPA2\n    10:C2:5A:0B:74:70  Fuen6Kli007                    Infra  1     130 Mbit/s  60      \u2582\u2584\u2586_  WPA1 WPA3\n    58:90:43:A5:B9:24  Sunrise_2.4GHz_A5B920          Infra  1     195 Mbit/s  57      \u2582\u2584\u2586_  WPA1 WPA2\n</code></pre> </li> <li> <p>Connect to the wifi network (<code>SSID=home_wifi</code>):</p> <pre><code>$ sudo nmcli --ask dev wifi connect home_wifi\n\nPassword: \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\nDevice 'wlan0' successfully activated with 'ffffa3ff-ffc0-44ff-9792-2ff39f2affe28'.\n</code></pre> </li> </ol>"},{"location":"articles/posts/ansible-apache-mariadb/","title":"Ansible apache mariadb","text":"<p>Last updated: April 1, 2020</p>"},{"location":"articles/posts/ansible-apache-mariadb/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Apache. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/ansible-apache-mariadb/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible dan konfigurasi apache. <pre><code>lrmn@ubuntu-controller:~$ mkdir latihan-ansible\nlrmn@ubuntu-controller:~$ cd latihan-ansible/\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-mariadb/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server: <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn\nhost_key_checking = False\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-mariadb/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible <pre><code>vim inventory\n</code></pre> <pre><code>[latihan1ansible]\nubuntu-managed1\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-mariadb/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Langkah terkahir adalah dengan membuat ansible playbook, disini kita menggunaka 3 module yaitu apt, copy dan service. <pre><code>vim latihan1.yml\n</code></pre> <pre><code>---\n- name: Install Apache2, MariaDB, PHP dengan Ansible Playbook\n  hosts: latihan1ansible\n  become: true\n  become_user: root\n  remote_user: lrmn\n  tasks:\n    - name: Install apache2\n      apt:\n        name: apache2\n        update_cache: yes\n        state: latest\n        force_apt_get: yes\n    - name: Install mariadb-server\n      apt:\n        name: mariadb-server\n        update_cache: yes\n        state: latest\n        force_apt_get: yes\n    - name: Install php\n      apt:\n        name: php\n        update_cache: yes\n        state: latest\n        force_apt_get: yes\n    - name: Install php-mysql\n      apt:\n        name: php-mysql\n        update_cache: yes\n        state: latest\n        force_apt_get: yes\n    - name: Ensure apache2 is running\n      service:\n        name: apache2\n        state: started\n        enabled: true\n    - name: Ensure mariadb is running\n      service:\n        name: mariadb\n        state: started\n        enabled: true\n    - name: Generate web content\n      copy:\n        content: \"Praktik: Install Apache2, MariaDB, PHP dengan Ansible Playbook\"\n        dest: /var/www/html/index.php\n\n- name: Verify apache\n  hosts: localhost\n  tasks:\n    - name: Tests the web service is running\n      uri:\n        url: http://ubuntu-managed1/index.php\n        status_code: 200\n        return_content: yes\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-mariadb/#mengecek-ansible-playbook","title":"Mengecek ansible playbook","text":"<p>Ansible playbook yang sudah kalian tulis lebih baik di cek terlebih dahulu apakah terdapat error atau tidak dengan menggunakan command dibawah ini: <pre><code>ansible-playbook --syntax-check latihan1.yml\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-mariadb/#menjalankan-ansible-playbook","title":"Menjalankan ansible playbook","text":"<p>Jika playbook tidak ada yang error, langkah selanjutnya adalah menjalankannya <pre><code>ansible-playbook -i inventory latihan1.yml\n</code></pre></p> <p>Jika berhasil maka akan tampil seperti dibawah ini <pre><code>lrmn@ubuntu-controller:~/latihan-ansible$ ansible-playbook -i inventory latihan1.yml\n\nPLAY [Install Apache2, MariaDB, PHP dengan Ansible Playbook] *******************************************************\n\nTASK [Gathering Facts] *********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Install apache2] *********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Install mariadb-server] **************************************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Install php] *************************************************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Install php-mysql] *******************************************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Ensure apache2 is running] ***********************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Ensure mariadb is running] ***********************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Generate web content] ****************************************************************************************\nchanged: [ubuntu-managed1]\n\nPLAY [Verify apache] ***********************************************************************************************\n\nTASK [Gathering Facts] *********************************************************************************************\nok: [localhost]\n\nTASK [Tests the web service is running] ****************************************************************************\nok: [localhost]\n\nPLAY RECAP *********************************************************************************************************\nlocalhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  \nubuntu-managed1            : ok=8    changed=4    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </code></pre></p> <p>Karena sebelumnya di ubuntu-managed1 Apache sudah di install, maka Task Install Apache jika sudah pernah akan menjadi <code>ok</code> bukan <code>changed</code>.</p>"},{"location":"articles/posts/ansible-apache-mariadb/#mengecek-apache2-di-managed-server","title":"Mengecek Apache2 di Managed Server","text":"<p>Jika ansible sudah dijalankan maka tertulis changed di ubuntu managed1 untuk task install dan copy, itu berarti bisa saja apache sudah diinstall dan file index.html.j2 sudah di copy ke folder configurasi apache2. Langkah selanjutnya cek managed servernya. <pre><code>curl http://ubuntu-managed1/index.php\n</code></pre></p> <p>Jika tampil seperti dibawah, maka kita telah berhasil menginstall apache2 menggunakan ansible. <pre><code>lrmn@ubuntu-controller:~/latihan-ansible$ curl http://ubuntu-managed1/index.php\nPraktik: Install Apache2, MariaDB, PHP dengan Ansible Playbook\n</code></pre> Kita juga dapat melakukan port forwarding ubuntu-managed1 untuk melihatnya di laptop host kita dengan membukanya di browser, caranya sudah dituliskan di artikel sebelumnya.</p> <p></p>"},{"location":"articles/posts/ansible-apache-variable/","title":"Ansible apache variable","text":"<p>Last updated: April 3, 2020</p>"},{"location":"articles/posts/ansible-apache-variable/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Apache. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/ansible-apache-variable/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible dan konfigurasi apache.</p> <pre><code>lrmn@ubuntu-controller:~$ mkdir latihan-ansible-2\nlrmn@ubuntu-controller:~$ cd latihan-ansible-2/\n</code></pre>"},{"location":"articles/posts/ansible-apache-variable/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server:</p> <p><pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn\nhost_key_checking = False\n</code></pre></p>"},{"location":"articles/posts/ansible-apache-variable/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory </p> <pre><code>vim inventory\n</code></pre> <pre><code>[latihan2ansible]\nubuntu-managed2\n</code></pre>"},{"location":"articles/posts/ansible-apache-variable/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Langkah terkahir adalah dengan membuat ansible playbook, disini kita menggunaka 3 module yaitu apt, copy dan service.</p> <pre><code>vim latihan2.yml\n</code></pre> <pre><code>- name: Praktik Install Apache2 dengan Required Package &amp; Variable di Playbook\n  hosts: latihan2ansible\n  become: true\n  become_user: root\n  remote_user: lrmn\n  vars:\n    required_Pkg:\n      - apache2\n      - python3-urllib3\n    web_Service: apache2\n    content_File: \"Hello World! - Praktik: Install Apache2 dengan Required Package &amp; Variable di Playbook\"\n    dest_File: /var/www/html/index.html\n  tasks:\n    - name: Installed required packages\n      apt:\n        update_cache: yes\n        force_apt_get: yes\n        name: \"{{ required_Pkg }}\"\n        state: latest\n    - name: Check {{ web_Service }} service is started and enabled\n      service:\n         name: \"{{ web_Service }}\"\n         enabled: true\n         state: started\n    - name: Web content is in place\n      copy:\n        content: \"{{ content_File }}\"\n        dest: \"{{ dest_File }}\"\n\n- name: Verify the apache service\n  hosts: localhost\n  tasks:\n    - name: Ensure the webserver is reacheable\n      uri:\n        url: http://ubuntu-managed2/index.html\n        status_code: 200\n        return_content: yes\n</code></pre>"},{"location":"articles/posts/ansible-apache-variable/#mengecek-ansible-playbook","title":"Mengecek ansible playbook","text":"<p>Ansible playbook yang sudah kalian tulis lebih baik di cek terlebih dahulu apakah terdapat error atau tidak dengan menggunakan command dibawah ini:</p> <pre><code>ansible-playbook --syntax-check latihan2.yml\n</code></pre>"},{"location":"articles/posts/ansible-apache-variable/#menjalankan-ansible-playbook","title":"Menjalankan ansible playbook","text":"<p>Jika playbook tidak ada yang error, langkah selanjutnya adalah menjalankannya</p> <pre><code>ansible-playbook -i inventory latihan2.yml\n</code></pre> <p>Jika berhasil maka akan tampil seperti dibawah ini</p> <pre><code>lrmn@ubuntu-controller:~/latihan-ansible-2$ ansible-playbook -i inventory latihan2.yml\n\nPLAY [Praktik Install Apache2 dengan Required Package &amp; Variable di Playbook] **************************************\n\nTASK [Gathering Facts] *********************************************************************************************\nok: [ubuntu-managed2]\n\nTASK [Installed required packages] *********************************************************************************\nchanged: [ubuntu-managed2]\n\nTASK [Check apache2 service is started and enabled] ****************************************************************\nok: [ubuntu-managed2]\n\nTASK [Web content is in place] *************************************************************************************\nchanged: [ubuntu-managed2]\n\nPLAY [Verify the apache service] ***********************************************************************************\n\nTASK [Gathering Facts] *********************************************************************************************\nok: [localhost]\n\nTASK [Ensure the webserver is reacheable] **************************************************************************\nok: [localhost]\n\nPLAY RECAP *********************************************************************************************************\nlocalhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  \nubuntu-managed2            : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </code></pre>"},{"location":"articles/posts/ansible-apache-variable/#mengecek-apache2-di-managed-server","title":"Mengecek Apache2 di Managed Server","text":"<p>Jika ansible sudah dijalankan maka tertulis changed di ubuntu managed1 untuk task install dan copy, itu berarti bisa saja apache sudah diinstall dan file index.html.j2 sudah di copy ke folder configurasi apache2. Langkah selanjutnya cek managed servernya.</p> <pre><code>curl http://ubuntu-managed2/index.html\n</code></pre> <p>Jika tampil seperti dibawah, maka kita telah berhasil menginstall apache2 menggunakan ansible.</p> <pre><code>lrmn@ubuntu-controller:~/latihan-ansible-2$ curl http://ubuntu-managed2/index.html\nHello World! - Praktik: Install Apache2 dengan Required Package &amp; Variable di Playbook\n</code></pre> <p>Kita juga dapat melakukan port forwarding ubuntu-managed2 untuk melihatnya di laptop host kita dengan membukanya di browser, caranya sudah dituliskan di artikel sebelumnya.</p>"},{"location":"articles/posts/ansible-apache2/","title":"Ansible apache2","text":"<p>Last updated: April 6, 2020</p>"},{"location":"articles/posts/ansible-apache2/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Apache. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/ansible-apache2/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible dan konfigurasi apache. <pre><code>mkdir -p ansible-apache2/files\ncd ansible-apache2\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server: <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible <pre><code>vim inventory\n</code></pre> <pre><code>[web]\nubuntu-managed1\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#file-indexhtml-untuk-apache2","title":"File index.html untuk Apache2","text":"<p>Jika sudah selanjutnya buat file yang akan digunakan untuk apache2 sebagai bukti kalau kita sudah berhasil menginstall apache2 <pre><code>echo \"Hello world! This is from Ansible x Apache2.\" &gt; files/index.html\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Langkah terkahir adalah dengan membuat ansible playbook, disini kita menggunaka 3 module yaitu apt, copy dan service. <pre><code>vim site.yml\n</code></pre> <pre><code>---\n- name: Install and start Apache2\n  hosts: web\n  become: true\n  tasks:\n    - name: Check/Install apache2 package is present\n      apt: name=apache2 state=present\n\n    - name: Copy index.html file / correct index.html is present\n      copy:\n        src: ./files/index.html\n        dest: /var/www/html/index.html\n\n    - name: Ensure Apache 2 is started\n      service:\n        name: apache2\n        state: started\n        enabled: true\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#mengecek-ansible-playbook","title":"Mengecek ansible playbook","text":"<p>Ansible playbook yang sudah kalian tulis lebih baik di cek terlebih dahulu apakah terdapat error atau tidak dengan menggunakan command dibawah ini: <pre><code>ansible-playbook --syntax-check site.yml\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#menjalankan-ansible-playbook","title":"Menjalankan ansible playbook","text":"<p>Jika playbook tidak ada yang error, langkah selanjutnya adalah menjalankannya <pre><code>ansible-playbook site.yml\n</code></pre></p> <p>Jika berhasil maka akan tampil seperti dibawah ini <pre><code>lrmn@ubuntu-controller:~/ansible-apache2$ ansible-playbook site.yml\n\nPLAY [Install and start Apache2] ********************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Check/Install apache2 package is present] *****************************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Copy index.html file / correct index.html is present] *****************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Ensure Apache 2 is started] *******************************************************************************************\nok: [ubuntu-managed1]\n\nPLAY RECAP ******************************************************************************************************************\nubuntu-managed1            : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre></p>"},{"location":"articles/posts/ansible-apache2/#mengecek-apache2-di-managed-server","title":"Mengecek Apache2 di Managed Server","text":"<p>Jika ansible sudah dijalankan maka tertulis changed di ubuntu managed1 untuk task install dan copy, itu berarti bisa saja apache sudah diinstall dan file index.html sudah di copy ke folder configurasi apache2. Langkah selanjutnya cek managed servernya. <pre><code>curl ubuntu-managed1\n</code></pre></p> <p>Jika tampil seperti dibawah, maka kita telah berhasil menginstall apache2 menggunakan ansible. <pre><code>lrmn@ubuntu-controller:~/ansible-apache2$ curl ubuntu-managed1\nHello world! This is from Ansible x Apache2.\n</code></pre> Kita juga dapat melakukan port forwarding ubuntu-managed1 untuk melihatnya di laptop host kita dengan membukanya di browser, caranya sudah dituliskan di artikel sebelumnya.</p>"},{"location":"articles/posts/ansible-inventory/","title":"Ansible inventory","text":"<p>Last updated: April 14, 2020</p>"},{"location":"articles/posts/ansible-inventory/#apa-itu-ansible-inventory","title":"Apa itu Ansible Inventory ?","text":"<p>Ansible inventory adalah file yang berisi daftar host atau node yang akan dikelola oleh Ansible. Inventory berisi informasi seperti nama host, alamat IP, dan koneksi SSH.</p> <p>Inventory dapat ditulis dalam berbagai format, seperti file teks sederhana, file YAML, file JSON, atau file dinamis yang dihasilkan secara otomatis oleh program atau layanan konfigurasi lainnya.</p> <p>Setiap host dalam inventory memiliki satu atau beberapa grup yang mengelompokkan host sesuai dengan fungsinya. Ansible menggunakan grup ini untuk mengelola host secara bersamaan, memilih host yang akan dioperasikan, dan menentukan tindakan apa yang harus dilakukan pada host tersebut.</p> <p>Inventory juga dapat menyertakan variabel tambahan yang akan digunakan oleh playbook Ansible. Variabel ini dapat didefinisikan pada level host atau grup, dan dapat diakses oleh playbook saat menjalankan tugas.</p> <p>Secara umum, inventory adalah elemen penting dalam pengelolaan konfigurasi dan otomatisasi dengan Ansible. Dengan menyimpan informasi host dan grup dalam inventory, pengguna Ansible dapat mengelola dan mengkonfigurasi server dan aplikasi secara efektif dan efisien.</p>"},{"location":"articles/posts/ansible-inventory/#kapan-penggunaan-grup-dalam-ansible-inventory-diperlukan","title":"Kapan penggunaan Grup dalam Ansible Inventory diperlukan ?","text":"<p>Grup dalam Ansible inventory diperlukan ketika kita ingin mengelompokkan host sesuai dengan fungsinya atau atribut tertentu, sehingga kita dapat mengelola dan mengeksekusi playbook pada kelompok host yang sama secara bersamaan. Beberapa contoh penggunaan grup dalam inventory adalah:</p> <ol> <li> <p>Memisahkan host production dan staging: Dalam lingkungan produksi, kita mungkin ingin memisahkan host yang digunakan untuk produksi dan host yang digunakan untuk pengujian atau staging. Dalam hal ini, kita dapat membuat dua grup berbeda dalam inventory: group production dan group staging.</p> </li> <li> <p>Mengelompokkan host berdasarkan peran: Dalam beberapa kasus, host mungkin memiliki peran yang berbeda-beda. Sebagai contoh, kita mungkin memiliki beberapa host yang berperan sebagai web server dan beberapa host lain yang berperan sebagai database server. Dalam hal ini, kita dapat membuat dua grup berbeda dalam inventory: group webserver dan group database.</p> </li> <li> <p>Mengatur variabel: Grup dapat digunakan untuk menentukan variabel yang hanya berlaku pada satu atau beberapa host tertentu. Sebagai contoh, kita mungkin ingin menetapkan variabel yang berbeda untuk host yang digunakan di lingkungan produksi dan pengujian. Dalam hal ini, kita dapat membuat grup production dan staging yang masing-masing memiliki variabel yang berbeda.</p> </li> </ol> <p>Dengan menggunakan grup dalam inventory, kita dapat mengelola dan mengeksekusi playbook dengan lebih mudah dan efisien. Kita dapat memilih grup tertentu atau seluruh host dalam inventory untuk dieksekusi playbook, serta menentukan tindakan yang berbeda untuk setiap grup atau host yang berbeda.</p>"},{"location":"articles/posts/ansible-inventory/#aturan-penamaan-ansible-inventory","title":"Aturan penamaan Ansible Inventory","text":"<p>Aturan penamaan grup dalam Ansible inventory tidaklah baku, namun ada beberapa pedoman yang umumnya diikuti oleh komunitas Ansible, yaitu:</p> <ol> <li> <p>Gunakan nama grup yang mudah dipahami: Nama grup harus mudah dipahami dan deskriptif, sehingga mudah diidentifikasi dan dipahami oleh seluruh anggota tim. Sebagai contoh, grup yang digunakan untuk server web dapat diberi nama \"webserver\".</p> </li> <li> <p>Hindari spasi atau karakter khusus: Nama grup sebaiknya tidak mengandung spasi atau karakter khusus, karena dapat menyebabkan masalah pada saat pengolahan inventory. Sebagai alternatif, kita dapat menggunakan underscore (_) atau dash (-) sebagai pengganti spasi.</p> </li> <li> <p>Gunakan huruf kecil: Nama grup sebaiknya menggunakan huruf kecil semua, karena penggunaan huruf besar dapat menyebabkan kesalahan penulisan dan sulit untuk dibaca.</p> </li> <li> <p>Hindari nama yang sama dengan variabel bawaan: Sebaiknya hindari nama grup yang sama dengan variabel bawaan Ansible seperti all, ungrouped, atau localhost, karena ini dapat menyebabkan konflik dan masalah pada inventory.</p> </li> <li> <p>Gunakan format yang konsisten: Sebaiknya gunakan format yang konsisten dalam penamaan grup, misalnya menggunakan format \"role-nama\" atau \"app-nama\" untuk memudahkan pengelompokan.</p> </li> </ol> <p>Dengan mengikuti aturan penamaan grup yang baik, kita dapat membuat inventory yang mudah dikelola dan diorganisasi dengan baik.</p>"},{"location":"articles/posts/ansible-inventory/#contoh-ansible-inventory","title":"Contoh Ansible Inventory","text":"<p>Berikut dibawah ini adalah beberapa contoh penulisan ansible inventory baik yang menuliskan menggunakan nama host, ip , grouping dan lainnya.</p>"},{"location":"articles/posts/ansible-inventory/#inventory-dengan-grup-menggunakan-nama-host","title":"Inventory dengan grup menggunakan nama host","text":"<p>Penjelasan:</p> <ul> <li>Dalam inventory ini, kita hanya menggunakan nama host untuk mengidentifikasi host yang akan diatur dan dikelola.</li> <li>Ada dua grup yaitu webserver dan database, dimana webserver memiliki 3 host yaitu web-01, web-02, dan web-03, sedangkan database memiliki 2 host yaitu db-01 dan db-02.</li> </ul> <pre><code>[webserver]\nweb-01\nweb-02\nweb-03\n\n[database]\ndb-01\ndb-02\n</code></pre>"},{"location":"articles/posts/ansible-inventory/#inventory-dengan-grup-menggunakan-ip-address","title":"Inventory dengan grup menggunakan IP address","text":"<p>Penjelasan:</p> <ul> <li>Dalam inventory ini, kita menggunakan alamat IP untuk mengidentifikasi host yang akan diatur dan dikelola.</li> <li>Ada dua grup yaitu webserver dan database, dimana webserver memiliki 3 host dengan alamat IP berturut-turut 192.168.0.10, 192.168.0.11, dan 192.168.0.12 </li> <li>Sedangkan database memiliki 2 host dengan alamat IP berturut-turut 192.168.0.20 dan 192.168.0.21</li> </ul> <pre><code>[webserver]\n192.168.0.10\n192.168.0.11\n192.168.0.12\n\n[database]\n192.168.0.20\n192.168.0.21\n</code></pre>"},{"location":"articles/posts/ansible-inventory/#inventory-dengan-grup-dan-variabel-menggunakan-nama-host","title":"Inventory dengan grup dan variabel menggunakan nama host","text":"<p>Penjelasan:</p> <ul> <li>Dalam inventory ini, kita menggunakan nama host untuk mengidentifikasi host yang akan diatur dan dikelola, serta menentukan variabel http_port dan db_port untuk masing-masing host.</li> <li>Ada dua grup yaitu webserver dan database, dimana webserver memiliki 3 host yaitu web-01, web-02, dan web-03, sedangkan database memiliki 2 host yaitu db-01 dan db-02.</li> <li>Pada grup webserver, variabel http_port didefinisikan dengan nilai 80 untuk host web-01 dan web-02, sedangkan untuk host web-03 variabel http_port didefinisikan dengan nilai 8080.</li> <li>Pada grup database, variabel db_port didefinisikan dengan nilai 3306 untuk host db-01 dan nilai 5432 untuk host db-02.</li> </ul> <pre><code>[webserver]\nweb-01 http_port=80\nweb-02 http_port=80\nweb-03 http_port=8080\n\n[database]\ndb-01 db_port=3306\ndb-02 db_port=5432\n</code></pre>"},{"location":"articles/posts/ansible-inventory/#ansible-inventory-tanpa-grup","title":"Ansible inventory tanpa grup","text":"<p>Penjelasan:</p> <ul> <li>Ini adalah contoh Ansible inventory sederhana yang hanya terdiri dari tiga host, yaitu \"webserver1\", \"webserver2\", dan \"webserver3\".</li> <li>Setiap host didefinisikan dengan menggunakan parameter \"ansible_host\" yang menentukan alamat IP host yang digunakan oleh Ansible untuk terhubung ke host tersebut.</li> <li>Tidak ada grup yang didefinisikan dalam file inventory ini. Oleh karena itu, semua host yang didefinisikan dalam file inventory akan diperlakukan secara individual oleh Ansible.</li> <li>Dalam playbook atau perintah Ansible lainnya, kita dapat menggunakan nama host \"webserver1\", \"webserver2\", atau \"webserver3\" untuk merujuk pada host yang terkait dalam file inventory ini.</li> </ul> <pre><code>webserver1 ansible_host=192.168.1.101\nwebserver2 ansible_host=192.168.1.102\nwebserver3 ansible_host=192.168.1.103\n</code></pre> <p>Atau bisa juga dengan ansible inventory seperti materi sebelumnya</p> <pre><code>ubuntu-managed1\n\n[belajaransible]\nubuntu-managed2\n</code></pre>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/","title":"Ansible nginx mariadb jinja2","text":"<p>Last updated: April 20, 2020</p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Nginx. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible. <pre><code>lrmn7@ubuntu-controller:~$ mkdir latihan-ansible-3\nlrmn7@ubuntu-controller:~$ cd latihan-ansible-3\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server: <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn7\nhost_key_checking = False\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible <pre><code>vim inventory\n</code></pre> <pre><code>[latihan3ansible]\nubuntu-managed1\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#membuat-jinja2-template","title":"Membuat Jinja2 Template","text":"<p>Langkah selanjutnya adalah membuat Jinja2 Template untuk Nginx dan MariaDB <pre><code>vim mariadb.list.j2\n</code></pre> Kemdudian di <code>mariadb.list.j2</code> silahkan masukkan text dibawah ini <pre><code>deb https://download.nus.edu.sg/mirror/mariadb/repo/10.9/ubuntu jammy main\n</code></pre> Setelah itu lanjut ke nginx <pre><code>vim nginx.list.j2\n</code></pre> Isi <code>nginx.list.j2</code> seperti dibawah ini <pre><code>deb http://nginx.org/packages/mainline/ubuntu/ jammy nginx\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Langkah terkahir adalah dengan membuat ansible playbook, disini kita menggunaka 3 module yaitu apt, copy dan service. <pre><code>vim latihan3.yml\n</code></pre> <pre><code>---\n- name: Praktik Install Nginx dan Mariadb Menggunakan Jinja2 Template di Playbook\n  hosts: latihan3ansible\n  become: true\n  tasks:\n    - name: Add nginx repo\n      template:\n        src: nginx.list.j2\n        dest: /etc/apt/sources.list.d/nginx.list\n\n    - name: Add maridb 10.9 repo\n      template:\n        src: mariadb.list.j2\n        dest: /etc/apt/sources.list.d/mariadb.list\n\n    - name: Apt key nginx\n      ansible.builtin.apt_key:\n        url: https://nginx.org/keys/nginx_signing.key\n        state: present\n    - name: Apt key mariadb\n      ansible.builtin.apt_key:\n        url: https://mariadb.org/mariadb_release_signing_key.asc\n        state: present\n\n    - name: Update repo\n      apt:\n        update_cache: true\n        cache_valid_time: 3600\n        force_apt_get: true\n\n    - name: Install nginx\n      apt:\n        name: nginx=1.23.1-1~jammy\n        update_cache: yes\n        force_apt_get: yes\n\n    - name: Starting the nginx service\n      service: name=nginx state=started enabled=yes\n\n    - name: Install mariadb\n      apt:\n        name:\n           - mariadb-server-10.9\n           - mariadb-client-10.9\n        update_cache: yes\n        force_apt_get: yes\n\n    - name: Starting the mariadb server\n      service: name=mariadb state=started enabled=yes\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#mengecek-ansible-playbook","title":"Mengecek ansible playbook","text":"<p>Ansible playbook yang sudah kalian tulis lebih baik di cek terlebih dahulu apakah terdapat error atau tidak dengan menggunakan command dibawah ini: <pre><code>ansible-playbook --syntax-check latihan3.yml\n</code></pre></p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#menjalankan-ansible-playbook","title":"Menjalankan ansible playbook","text":"<p>Jika playbook tidak ada yang error, langkah selanjutnya adalah menjalankannya <pre><code>ansible-playbook -i inventory latihan3.yml\n</code></pre></p> <p>Jika berhasil maka akan tampil seperti dibawah ini <pre><code>lrmn7@ubuntu-controller:~/latihan-ansible-3$ ansible-playbook -i inventory latihan3.yml\n\nPLAY [Praktik Install Nginx dan Mariadb Menggunakan Jinja2 Template di Playbook] ***********************************\n\nTASK [Gathering Facts] *********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Add nginx repo] **********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Add maridb 10.9 repo] ****************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Apt key nginx] ***********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Apt key mariadb] *********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Update repo] *************************************************************************************************\nchanged: [ubuntu-managed1]\n\nTASK [Install nginx] ***********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Start the nginx service] *************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Install mariadb] *********************************************************************************************\nok: [ubuntu-managed1]\n\nTASK [Start the mariadb server] ************************************************************************************\nok: [ubuntu-managed1]\n\nPLAY RECAP *********************************************************************************************************\nubuntu-managed1            : ok=10   changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  </code></pre></p> <p>Karena saya sudah beberapa kali running playbook ini, maka beberapa task yang seharusnya sekali jalan seperti menambahkan repository akan berubah menjadi changed. Namun karena ada beberapa config ansible playbook yang harus saya perbaiki maka task tersebut yang sebelumnya changed ketika di running kembali akan berubah menjadi ok.</p>"},{"location":"articles/posts/ansible-nginx-mariadb-jinja2/#mengecek-nginx-di-managed-server","title":"Mengecek Nginx di Managed Server","text":"<p>Jika ansible sudah dijalankan maka tertulis changed atau ok di ubuntu-managed1 untuk task install dan copy. Langkah selanjutnya cek managed servernya. Bisa diikuti dengan mengetikan command dibawah ini. <pre><code>curl http://ubuntu-managed1/\n</code></pre></p> <p>Jika tampil seperti dibawah, maka kita telah berhasil menginstall nginx menggunakan ansible. <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Kita juga dapat melakukan port forwarding ubuntu-managed1 untuk melihatnya di laptop host kita dengan membukanya di browser, caranya sudah dituliskan di artikel sebelumnya.</p> <p></p>"},{"location":"articles/posts/ansible-variable/","title":"Ansible variable","text":"<p>Last updated: April 21, 2020</p>"},{"location":"articles/posts/ansible-variable/#apa-itu-ansible-playbook","title":"Apa itu Ansible Playbook ?","text":"<p>Ansible variable adalah nilai yang diberikan kepada variabel yang digunakan dalam playbook Ansible. Variabel ini dapat digunakan untuk mengatur nilai dari modul Ansible, seperti modul <code>package</code>, <code>copy</code>, atau <code>template</code>. Penggunaan variabel memungkinkan playbook untuk menjadi lebih fleksibel dan dapat digunakan di berbagai lingkungan dengan mudah.</p>"},{"location":"articles/posts/ansible-variable/#jenis-ansibel-variable","title":"Jenis Ansibel Variable","text":"<p>Ada beberapa jenis variabel yang dapat digunakan dalam playbook Ansible, antara lain:</p> <ol> <li> <p>Variabel Built-in: Variabel ini disediakan oleh Ansible secara default dan dapat digunakan tanpa harus didefinisikan secara eksplisit. Contohnya adalah variabel <code>inventory_hostname</code>, yang berisi nama host yang diatur dalam inventory Ansible.</p> </li> <li> <p>Variabel Dinamis: Variabel ini didefinisikan secara dinamis dalam playbook Ansible dan diisi dengan nilai yang dihasilkan oleh tugas sebelumnya. Contohnya adalah variabel <code>ansible_facts</code>, yang berisi fakta-fakta tentang host yang diatur dalam playbook.</p> </li> <li> <p>Variabel Pengguna: Variabel ini didefinisikan oleh pengguna dan digunakan dalam playbook Ansible. Contohnya adalah variabel <code>apache_port</code> atau <code>apache_root</code> pada contoh playbook yang telah diberikan sebelumnya.</p> </li> </ol> <p>Penggunaan variabel yang tepat dapat membuat playbook Ansible menjadi lebih efektif dan efisien, serta dapat mempermudah pengaturan nilai pada modul-modul Ansible.</p>"},{"location":"articles/posts/ansible-variable/#penamaan-variabel","title":"Penamaan Variabel","text":"<p>Untuk menggunakan variabel dalam playbook Ansible, pengguna dapat memanggil variabel menggunakan tanda kurung kurawal. </p>"},{"location":"articles/posts/ansible-variable/#waktu-yang-tepat-menggunakan-variable","title":"Waktu yang tepat menggunakan Variable","text":"<p>Waktu yang tepat untuk menggunakan variabel dalam Ansible adalah ketika pengguna ingin mengatur konfigurasi infrastruktur mereka secara fleksibel dan dinamis. Beberapa situasi yang umumnya memerlukan penggunaan variabel dalam Ansible adalah:</p> <ol> <li> <p>Konfigurasi yang berbeda untuk host yang berbeda: Ketika pengguna ingin memberikan konfigurasi yang berbeda untuk setiap host dalam inventory file, pengguna dapat menggunakan variabel untuk menyimpan nilai konfigurasi yang spesifik untuk setiap host.</p> </li> <li> <p>Penggunaan playbook yang sama untuk lingkungan yang berbeda: Ketika pengguna ingin menggunakan playbook yang sama untuk lingkungan produksi dan pengembangan, pengguna dapat menggunakan variabel untuk menentukan nilai konfigurasi yang berbeda untuk setiap lingkungan.</p> </li> <li> <p>Penggunaan playbook yang kompleks: Ketika pengguna menggunakan playbook yang kompleks, variabel dapat membantu memudahkan pengelolaan playbook dan menjaga kode playbook tetap terorganisir.</p> </li> <li> <p>Menentukan nilai berdasarkan kondisi tertentu: Ketika pengguna ingin menentukan nilai variabel berdasarkan kondisi tertentu, seperti jenis sistem operasi atau versi perangkat lunak yang diinstal pada host, variabel dapat digunakan untuk menentukan nilai yang sesuai untuk setiap kondisi.</p> </li> <li> <p>Menghindari pengulangan kode yang tidak perlu: Ketika pengguna ingin menghindari pengulangan kode yang tidak perlu dalam playbook, variabel dapat digunakan untuk menyimpan nilai yang sama dan digunakan di beberapa bagian playbook.</p> </li> </ol> <p>Dalam situasi-situasi ini, penggunaan variabel dapat membantu pengguna mengatur dan mengelola infrastruktur mereka dengan lebih mudah dan efisien. Namun, penting untuk memahami cara kerja variabel dan memastikan bahwa variabel yang digunakan sudah didefinisikan dengan benar untuk menghindari kesalahan dalam konfigurasi sistem.</p>"},{"location":"articles/posts/ansible-variable/#contoh-ansible-variable-di-playbook","title":"Contoh Ansible Variable di Playbook","text":""},{"location":"articles/posts/ansible-variable/#contoh-penggunaan-ansible-variable-built-in-di-ansible-playbook","title":"Contoh penggunaan ansible variable built-in di ansible playbook","text":"<p><pre><code>---\n- name: Contoh Playbook menggunakan Variabel Built-In Ansible\n  hosts: webservers\n  become: true\n\n  tasks:\n    - name: Install Apache HTTP Server\n      package:\n        name: httpd\n        state: present\n\n    - name: Copy Apache Config File\n      copy:\n        src: files/httpd.conf\n        dest: /etc/httpd/conf/httpd.conf\n        owner: root\n        group: root\n        mode: '0644'\n      notify:\n        - Restart Apache\n\n  handlers:\n    - name: Restart Apache\n      service:\n        name: httpd\n        state: restarted\n</code></pre> Beberapa variabel built-in Ansible yang digunakan dalam playbook di atas adalah:</p> <ul> <li> <p><code>hosts</code>: variabel ini menentukan host yang akan diatur oleh playbook. Pada contoh di atas, playbook akan dijalankan pada host dengan grup <code>webservers</code>.</p> </li> <li> <p><code>become</code>: variabel ini menentukan apakah pengguna ingin menggunakan akses root pada host yang diatur oleh playbook. Pada contoh di atas, variabel <code>become</code> diatur sebagai <code>true</code> yang berarti playbook akan dijalankan dengan akses root.</p> </li> <li> <p><code>name</code>: variabel ini menentukan nama tugas yang akan dilakukan oleh playbook. Pada contoh di atas, tugas pertama bernama \"Install Apache HTTP Server\" dan tugas kedua bernama \"Copy Apache Config File\".</p> </li> <li> <p><code>package</code>: variabel ini mengaktifkan modul Ansible <code>package</code> yang digunakan untuk menginstal paket pada host yang diatur oleh playbook. Pada contoh di atas, modul <code>package</code> digunakan untuk menginstal paket <code>httpd</code> pada host.</p> </li> <li> <p><code>copy</code>: variabel ini mengaktifkan modul Ansible <code>copy</code> yang digunakan untuk menyalin file ke host yang diatur oleh playbook. Pada contoh di atas, modul <code>copy</code> digunakan untuk menyalin file <code>httpd.conf</code> ke direktori <code>/etc/httpd/conf</code> pada host.</p> </li> <li> <p><code>notify</code>: variabel ini menentukan handler yang akan dipanggil ketika tugas selesai. Pada contoh di atas, handler <code>Restart Apache</code> akan dipanggil setelah tugas kedua selesai.</p> </li> <li> <p><code>handlers</code>: variabel ini menentukan daftar handler yang akan dipanggil oleh playbook. Pada contoh di atas, handler <code>Restart Apache</code> akan merestart layanan <code>httpd</code> pada host.</p> </li> </ul>"},{"location":"articles/posts/ansible-variable/#contoh-playbook-ansible-yang-menggunakan-variabel-yang-didefinisikan-oleh-pengguna","title":"Contoh playbook Ansible yang menggunakan variabel yang didefinisikan oleh pengguna","text":"<p>Beberapa variabel yang didefinisikan oleh pengguna dalam playbook di atas adalah:</p> <ul> <li> <p><code>apache_port</code>: variabel ini menentukan port yang akan digunakan oleh Apache HTTP Server. Pada contoh di atas, variabel <code>apache_port</code> diatur sebagai <code>80</code>.</p> </li> <li> <p><code>apache_root</code>: variabel ini menentukan direktori root yang akan digunakan oleh Apache HTTP Server. Pada contoh di atas, variabel <code>apache_root</code> diatur sebagai <code>/var/www/html</code>.</p> </li> <li> <p><code>proxy_server</code>: variabel ini merupakan contoh variabel yang harus didefinisikan oleh pengguna sebelum menjalankan playbook. Variabel ini digunakan untuk mengatur nilai dari variabel <code>http_proxy</code> dan <code>https_proxy</code> di dalam environment variable.</p> </li> </ul>"},{"location":"articles/posts/ansible-variable/#contoh-ansible-playbook-lainnya-yang-menggunakan-variable-dengan-loop","title":"Contoh ansible playbook lainnya yang menggunakan variable dengan loop","text":"<p>Pada contoh playbook di atas, variabel <code>required_packages</code> didefinisikan oleh pengguna dan berisi daftar nama paket yang harus diinstal pada host. Variabel tersebut kemudian digunakan untuk melakukan perulangan dengan menggunakan <code>loop</code> pada tugas Install Required Packages. Setiap iterasi pada perulangan akan menginstal satu paket yang terdapat pada variabel <code>required_packages</code>.</p>"},{"location":"articles/posts/apa-itu-ansible/","title":"Apa itu ansible","text":"<p>Last updated: April 1, 2020</p>"},{"location":"articles/posts/apa-itu-ansible/#apa-itu-ansible","title":"Apa itu Ansible?","text":"<p>Ansible adalah alat open source yang digunakan untuk mengotomatisasi tugas-tugas IT seperti manajemen konfigurasi, penyebaran aplikasi, dan otomatisasi tugas-tugas rutin. Ansible memungkinkan Anda untuk mengotomatisasi tugas-tugas IT di seluruh lingkungan, dari server lokal hingga server cloud dan lingkungan hybrid.</p> <p>Dalam istilah yang lebih sederhana, Ansible adalah alat yang dapat membantu Anda mengelola banyak server secara efisien, sehingga Anda tidak perlu menghabiskan banyak waktu dan upaya dalam melakukan tugas-tugas manual seperti menginstal perangkat lunak, mengonfigurasi sistem, dan melakukan tugas-tugas serupa pada banyak server yang berbeda.</p>"},{"location":"articles/posts/apa-itu-ansible/#kenapa-perlu-ansible","title":"Kenapa perlu Ansible?","text":"<p>Sebagai seorang DevOps, Ansible dapat sangat bermanfaat bagi Anda dalam beberapa cara:</p> <ol> <li> <p>Otomatisasi: Dalam dunia DevOps, otomatisasi sangat penting untuk meningkatkan efisiensi dan mengurangi kesalahan manusia. Ansible memungkinkan Anda untuk mengotomatisasi banyak tugas rutin seperti manajemen konfigurasi, penyebaran aplikasi, dan otomatisasi tugas-tugas operasional sehingga Anda dapat menghabiskan lebih sedikit waktu dan upaya dalam melakukan tugas-tugas manual.</p> </li> <li> <p>Konsistensi: Dalam sebuah lingkungan IT, konsistensi sangat penting untuk memastikan bahwa semua server dan sistem bekerja dengan benar. Ansible memungkinkan Anda untuk melakukan tugas-tugas yang sama pada banyak server dengan cara yang konsisten, sehingga memastikan bahwa semua server bekerja pada tingkat yang sama.</p> </li> <li> <p>Skalabilitas: Ansible dapat membantu Anda mengelola lingkungan IT yang kompleks dan berkembang dengan cepat. Dengan Ansible, Anda dapat mengelola banyak server dan sistem dengan cara yang efisien dan mudah diperluas.</p> </li> <li> <p>Integrasi: Ansible dapat diintegrasikan dengan banyak alat dan platform lain seperti Git, Jenkins, Docker, dan sebagainya. Ini memungkinkan Anda untuk mengotomatisasi seluruh siklus hidup aplikasi dari pengembangan hingga produksi dan membantu Anda mencapai tujuan DevOps Anda dengan lebih efisien.</p> </li> <li> <p>Manajemen infrastruktur: Ansible membantu Anda mengelola infrastruktur dan lingkungan IT secara keseluruhan. Dalam peran DevOps, Anda harus memastikan bahwa semua sistem, server, dan aplikasi berjalan dengan benar dan Ansible dapat membantu Anda mencapai tujuan itu.</p> </li> </ol>"},{"location":"articles/posts/apa-itu-ansible/#apa-itu-ansible-module","title":"Apa itu Ansible Module?","text":"<p>Ansible Module adalah unit kerja dasar dalam Ansible yang digunakan untuk menentukan tindakan yang harus dilakukan pada host yang dikelola. Module Ansible dapat digunakan untuk melakukan tugas-tugas seperti manajemen paket, manajemen file, pengaturan konfigurasi, manajemen pengguna, dan banyak lagi.</p> <p>Module Ansible berisi kode yang dapat dijalankan pada host yang dikelola untuk menyelesaikan tugas-tugas tertentu. Module ini dapat dijalankan secara independen atau sebagai bagian dari playbook Ansible. Setiap module Ansible memiliki parameter khusus yang dapat dikonfigurasi untuk menyesuaikan perilaku module.</p> <p>Ada ratusan module Ansible yang tersedia untuk digunakan, dan module-module ini terus berkembang seiring dengan perkembangan teknologi dan permintaan komunitas. Beberapa contoh module Ansible yang umum digunakan adalah:</p> <ul> <li>Module File: Digunakan untuk mengelola file dan direktori pada host yang dikelola.</li> <li>Module Copy: Digunakan untuk menyalin file dari mesin kontrol ke host yang dikelola.</li> <li>Module Service: Digunakan untuk mengelola layanan pada host yang dikelola, seperti memulai, menghentikan, dan me-restart layanan.</li> <li>Module Package: Digunakan untuk menginstal atau menghapus paket perangkat lunak pada host yang dikelola.</li> <li>Module User: Digunakan untuk mengelola pengguna dan kelompok pengguna pada host yang dikelola.</li> </ul> <p>Module-module ini membantu memudahkan tugas-tugas administrasi pada host yang dikelola, dan dapat disesuaikan untuk memenuhi kebutuhan spesifik dari lingkungan yang dikelola. Dalam Ansible, Anda dapat menggunakan module-module ini untuk membangun playbook yang efisien dan akurat untuk mengotomatisasi tugas-tugas Anda.</p>"},{"location":"articles/posts/apa-itu-ansible/#format-yaml-di-ansible","title":"Format YAML di Ansible","text":"<p>YAML (YAML Ain't Markup Language) adalah format serialisasi data yang umum digunakan di Ansible. Format YAML digunakan dalam playbook Ansible untuk menyediakan struktur yang mudah dibaca dan dipahami. Format ini membantu membuat file playbook Ansible menjadi lebih mudah dibaca dan dipahami oleh manusia.</p> <p>Berikut adalah contoh playbook Ansible dengan format YAML:</p> <pre><code>---\n- name: Install Apache\nhosts: webservers\nbecome: yes\ntasks:\n- name: Install Apache\napt: name=apache2 state=present\nnotify:\n- restart apache\n\n- name: Ensure Apache is running\nservice: name=apache2 state=started enabled=yes\n\nhandlers:\n- name: restart apache\nservice: name=apache2 state=restarted\n</code></pre> <p>Beberapa poin penting yang harus diperhatikan dalam format YAML di Ansible adalah sebagai berikut:</p> <ol> <li>Nama file playbook harus memiliki ekstensi .yml atau .yaml.</li> <li>Struktur playbook harus diawali dengan tiga tanda strip atau dash (---) untuk menunjukkan awal dari dokumen YAML.</li> <li>Setiap bagian dalam playbook seperti hosts, tasks, atau handlers harus dinyatakan sebagai key-value pairs.</li> <li>Key dalam playbook harus ditulis tanpa tanda petik atau quotes, sedangkan value dalam playbook bisa ditulis dalam tanda petik atau tanpa tanda petik tergantung pada konteksnya.</li> <li>Indentasi sangat penting dalam format YAML. Indentasi digunakan untuk menunjukkan tingkat hierarki dan membuat playbook lebih mudah dibaca.</li> <li>Tanda titik dua (:) digunakan untuk memisahkan key dan value dalam playbook.</li> <li>Tanda strip atau dash (-) digunakan untuk membuat list dalam playbook.</li> </ol> <p>Dalam format YAML di Ansible, penting untuk mengikuti aturan format yang benar untuk membuat playbook yang valid dan dapat dijalankan dengan benar.</p>"},{"location":"articles/posts/apa-itu-ansible/#apa-itu-ansible-playbook","title":"Apa itu Ansible Playbook?","text":"<p>Ansible Playbook adalah file YAML yang digunakan untuk mengotomatisasi tugas-tugas pada host yang dikelola. Playbook berisi kumpulan tugas yang harus dijalankan pada host yang dikelola. Setiap tugas dalam playbook mewakili satu unit kerja dalam proses otomatisasi.</p> <p>Contoh sederhana dari playbook Ansible adalah playbook untuk menginstal dan mengkonfigurasi Nginx pada host yang dikelola:</p> <pre><code>---\n- name: Install Nginx\nhosts: webservers\nbecome: true\ntasks:\n- name: Install Nginx\napt:\nname: nginx\nstate: present\n\n- name: Configure Nginx\ncopy:\nsrc: /path/to/nginx.conf\ndest: /etc/nginx/nginx.conf\nnotify: restart nginx\n\nhandlers:\n- name: restart nginx\nservice:\nname: nginx\nstate: restarted\n</code></pre> <p>Penjelasan dari playbook di atas:</p> <ul> <li><code>name</code>: Nama playbook, yang memberikan deskripsi tentang tugas yang dilakukan.</li> <li><code>hosts</code>: Target host yang akan dikelola.</li> <li><code>become</code>: Digunakan untuk mengaktifkan hak akses superuser atau sudo untuk menjalankan tugas-tugas di host yang dikelola.</li> <li><code>tasks</code>: Daftar tugas yang akan dijalankan pada host yang dikelola.</li> <li><code>name</code>: Nama tugas, yang memberikan deskripsi tentang apa yang akan dilakukan tugas tersebut.</li> <li><code>apt</code>: Modul Ansible yang digunakan untuk mengelola paket di sistem berbasis Debian/Ubuntu.</li> <li><code>copy</code>: Modul Ansible yang digunakan untuk menyalin file dari mesin kontrol ke host yang dikelola.</li> <li><code>notify</code>: Tindakan yang harus dilakukan jika ada perubahan dalam tugas. Dalam contoh ini, jika file konfigurasi Nginx berubah, maka tindakan restart nginx akan dilakukan.</li> <li><code>handlers</code>: Daftar tindakan yang harus dilakukan jika ada notifikasi dari tugas. Dalam contoh ini, tindakan restart nginx akan dilakukan jika ada notifikasi dari tugas Configure Nginx.</li> </ul> <p>Playbook Ansible seperti contoh di atas dapat membantu memudahkan tugas-tugas administrasi pada host yang dikelola. Dengan mengikuti format YAML dan module-module yang disediakan oleh Ansible, playbook dapat dibuat dengan mudah dan dipahami dengan baik.</p>"},{"location":"articles/posts/apa-itu-ansible/#apa-itu-ansible-inventory","title":"Apa itu Ansible Inventory","text":"<p>Ansible Inventory adalah file konfigurasi yang digunakan untuk mengelompokkan host yang akan dikelola oleh Ansible. File ini berisi daftar host yang dikelola, grup host, dan variabel yang terkait dengan host atau grup host. Ansible Inventory juga digunakan untuk menentukan bagaimana Ansible akan menghubungi host yang dikelola, seperti melalui SSH atau WinRM.</p> <p>Contoh sederhana dari file Ansible Inventory adalah sebagai berikut: <pre><code>[webservers]\nweb1.example.com\nweb2.example.com\n\n[dbservers]\ndb1.example.com\ndb2.example.com\n\n[all:vars]\nansible_user=ubuntu\nansible_ssh_private_key_file=/path/to/private_key.pem\n</code></pre></p> <p>Penjelasan dari file Inventory di atas:</p> <ul> <li><code>[webservers]</code> dan <code>[dbservers]</code> adalah grup host yang digunakan untuk mengelompokkan host yang akan dikelola oleh Ansible.</li> <li><code>web1.example.com</code>, <code>web2.example.com</code>, <code>db1.example.com</code>, dan <code>db2.example.com</code> adalah host yang dikelola oleh Ansible.</li> <li><code>[all:vars]</code> adalah bagian yang digunakan untuk menyediakan variabel yang terkait dengan host atau grup host. Dalam contoh di atas, variabel ansible_user digunakan untuk menentukan nama pengguna yang akan digunakan untuk menghubungi host, sedangkan variabel <code>ansible_ssh_private_key_file</code> digunakan untuk menentukan lokasi kunci privat SSH yang digunakan untuk autentikasi.</li> </ul> <p>Dalam file Ansible Inventory, host dan grup host dapat dikelompokkan berdasarkan berbagai kriteria, seperti lingkungan, lokasi, atau peran. Dengan cara ini, tugas-tugas administrasi pada host yang dikelola dapat dikelola secara lebih terstruktur dan efisien.</p>"},{"location":"articles/posts/apa-itu-ansible/#ansible-tower","title":"Ansible Tower","text":"<p>Ansible Tower adalah platform manajemen konfigurasi yang menyediakan antarmuka pengguna berbasis web dan fitur-fitur tambahan untuk membantu mengotomatisasi tugas-tugas konfigurasi pada skala enterprise. </p> <p>Ansible Tower menyediakan antarmuka yang mudah digunakan, akses kontrol yang ketat, dan fitur-fitur pelaporan dan audit, sehingga memudahkan tim IT untuk mengelola dan mengawasi otomatisasi tugas-tugas konfigurasi di seluruh infrastruktur IT mereka. Ansible Tower juga menyediakan fitur-fitur seperti penjadwalan tugas, manajemen inventaris, dan integrasi dengan sistem manajemen konfigurasi lainnya untuk membantu mempercepat dan meningkatkan efisiensi operasi IT.</p>"},{"location":"articles/posts/apa-itu-ansible/#perbedaan-ansible-dan-ansible-tower","title":"Perbedaan Ansible dan Ansible Tower","text":"<p>Perbedaan utama antara Ansible dan Ansible Tower adalah sebagai berikut:</p> <ol> <li> <p>Fungsionalitas: Ansible adalah platform open-source untuk otomatisasi konfigurasi yang digunakan untuk mengotomatisasi tugas-tugas di seluruh infrastruktur IT. Ansible Tower adalah produk komersial yang memperluas fungsionalitas Ansible dengan menambahkan fitur-fitur tambahan, seperti antarmuka pengguna berbasis web, manajemen inventaris, penjadwalan tugas, manajemen akses, dan pelaporan.</p> </li> <li> <p>Antarmuka pengguna: Ansible menggunakan antarmuka baris perintah untuk mengelola tugas-tugas otomatisasi konfigurasinya, sedangkan Ansible Tower menyediakan antarmuka pengguna berbasis web yang memungkinkan pengguna untuk mengelola dan melacak tugas-tugas otomatisasi dengan lebih mudah.</p> </li> <li> <p>Manajemen inventaris: Ansible Tower menyediakan fitur manajemen inventaris yang memudahkan pengguna untuk mengelola dan mengorganisasi host dan grup host dalam inventaris mereka. Fitur ini memungkinkan pengguna untuk melihat status host, menyaring host berdasarkan atribut tertentu, dan melihat riwayat tugas-tugas yang telah dijalankan pada host tertentu.</p> </li> <li> <p>Manajemen akses: Ansible Tower menyediakan fitur manajemen akses yang memungkinkan pengguna untuk menentukan hak akses yang berbeda untuk pengguna dan tim yang berbeda. Dengan cara ini, pengguna dapat membatasi akses ke tugas-tugas otomatisasi dan host yang mungkin tidak relevan untuk pekerjaan mereka.</p> </li> <li> <p>Pelaporan: Ansible Tower menyediakan fitur pelaporan yang memungkinkan pengguna untuk melacak dan menganalisis kinerja tugas-tugas otomatisasi mereka. Fitur ini memungkinkan pengguna untuk melihat riwayat tugas-tugas, status tugas-tugas, dan metrik kinerja yang relevan.</p> </li> </ol> <p>Secara umum, Ansible cocok untuk penggunaan di lingkungan yang lebih kecil dan tidak memerlukan fitur-fitur tambahan, sementara Ansible Tower lebih cocok untuk penggunaan di lingkungan enterprise yang memerlukan manajemen tugas-tugas otomatisasi yang lebih terpusat dan kompleks.</p>"},{"location":"articles/posts/apa-itu-ansible/#jinja2-template-di-ansible","title":"Jinja2 Template di Ansible","text":"<p>Jinja2 adalah mesin template Python yang digunakan oleh Ansible untuk membuat file konfigurasi yang digunakan untuk mengonfigurasi server dan perangkat jaringan. </p> <p>Ansible menggunakan Jinja2 sebagai bahasa template untuk membuat file konfigurasi yang digunakan untuk mengelola host target. Dalam file playbook Ansible, template Jinja2 dapat digunakan untuk mengganti variabel yang disediakan oleh inventory dan faktor-faktor lainnya dengan nilai yang spesifik untuk host target tertentu. </p> <p>Hal ini memungkinkan pengguna untuk membuat konfigurasi yang dapat disesuaikan secara dinamis berdasarkan keadaan masing-masing host target, yang dapat menghemat waktu dan mengurangi kesalahan konfigurasi. Dalam hal ini, Jinja2 berfungsi sebagai mekanisme untuk menghasilkan file konfigurasi yang digunakan oleh Ansible untuk melakukan tugas-tugas konfigurasi dan pengelolaan host.</p> <p>Berikut adalah contoh penggunaan Jinja2 template di playbook Ansible untuk menginstal Nginx di host target:</p> <p>File nginx.list.j2: <pre><code>---\ndeb http://nginx.org/packages/mainline/ubuntu/ jammy nginx\n</code></pre> File playbook.yml: <pre><code>- name: Contoh Jinja2 template install Nginx\nhosts: webservers\nbecome: true\ntasks:\n- name: add nginx repo\ntemplate:\nsrc: nginx.list.j2\ndest: /etc/apt/sources.list.d/nginx.list\n\n- name: apt key nginx\nansible.builtin.apt_key:\nurl: https://nginx.org/keys/nginx_signing.key\nstate: present\n\n- name: update repo\napt:\nupdate_cache: true\ncache_valid_time: 3600\nforce_apt_get: true\n\n- name: install nginx\napt:\nname: nginx=1.23.1-1~jammy\nupdate_cache: yes\nforce_apt_get: yes\n\n- name: starting the nginx service\nservice: name=nginx state=started enabled=yes\n</code></pre></p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/","title":"Devops devsecops cybersecurity","text":"<p>Last updated: May 20, 2020</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#apa-yang-dimaksud-dengan-devsecops","title":"Apa yang dimaksud dengan DevSecOps?","text":"<p>DevSecOps adalah pendekatan pengembangan perangkat lunak yang bertujuan untuk menyatukan tim pengembangan, keamanan, dan operasi untuk membangun dan memelihara aplikasi perangkat lunak yang aman. Pendekatan ini didasarkan pada prinsip-prinsip integrasi berkelanjutan, pengiriman berkelanjutan, dan penerapan berkelanjutan, yang bertujuan untuk memberikan pembaruan dan fitur perangkat lunak dengan lebih cepat dan sering. </p> <p>Dalam DevSecOps, keamanan merupakan bagian penting dari proses pengembangan perangkat lunak. Artinya, pengujian keamanan, pemantauan, dan langkah-langkah keamanan lainnya dibangun ke dalam siklus hidup pengembangan perangkat lunak (SDLC) sejak awal, bukan ditambahkan kemudian. DevSecOps bertujuan untuk meningkatkan kolaborasi dan komunikasi antara tim pengembangan, keamanan, dan operasi, untuk menciptakan proses pengembangan perangkat lunak yang lebih efisien dan efektif.</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#devsecops-vs-devops","title":"DevSecOps vs DevOps","text":"<p>Saya menggunakan kata \"vs\" dengan ringan di sini, tetapi jika kita berpikir kembali ke tahun 2022 dan tujuan DevOps adalah untuk meningkatkan kecepatan, keandalan, dan kualitas rilis perangkat lunak.</p> <p>DevSecOps adalah perpanjangan dari filosofi DevOps yang menekankan pada integrasi praktik keamanan ke dalam proses pengembangan perangkat lunak. Tujuan dari DevSecOps adalah untuk membangun langkah-langkah keamanan ke dalam proses pengembangan perangkat lunak sehingga keamanan menjadi bagian penting dari perangkat lunak sejak awal. Hal ini membantu mengurangi risiko kerentanan keamanan yang dimasukkan ke dalam perangkat lunak dan membuatnya lebih mudah untuk mengidentifikasi dan memperbaiki masalah apa pun yang muncul.</p> <p>DevOps berfokus pada peningkatan kolaborasi dan komunikasi antara pengembang dan staf operasi untuk meningkatkan kecepatan, keandalan, dan kualitas rilis perangkat lunak, sedangkan DevSecOps berfokus pada pengintegrasian praktik keamanan ke dalam proses pengembangan perangkat lunak untuk mengurangi risiko kerentanan keamanan dan meningkatkan keamanan perangkat lunak secara keseluruhan.</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#automated-security","title":"Automated Security","text":"<p>Keamanan otomatis mengacu pada penggunaan teknologi untuk melakukan tugas-tugas keamanan tanpa perlu campur tangan manusia. Hal ini dapat mencakup hal-hal seperti perangkat lunak keamanan yang memantau jaringan dari ancaman dan mengambil tindakan untuk memblokirnya, atau sistem yang menggunakan kecerdasan buatan untuk menganalisis rekaman keamanan dan mengidentifikasi aktivitas yang tidak biasa. Sistem keamanan otomatis dirancang untuk membuat proses keamanan menjadi lebih efisien dan efektif, serta membantu mengurangi beban kerja personel keamanan.</p> <p>Komponen utama dari semua hal yang berkaitan dengan DevSecOps adalah kemampuan untuk mengotomatiskan banyak tugas yang ada saat membuat dan mengirimkan perangkat lunak, ketika kita menambahkan keamanan sejak awal, itu berarti kita juga perlu mempertimbangkan aspek otomatisasi keamanan.</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#security-at-scale-containers-and-microservices","title":"Security at Scale (Containers and Microservices)","text":"<p>Kita tahu bahwa skala dan infrastruktur dinamis yang dimungkinkan oleh <code>Containers</code> dan <code>Microservices</code> telah mengubah cara sebagian besar organisasi menjalankan bisnis.</p> <p>Ini juga alasan mengapa kita harus membawa keamanan otomatis tersebut ke dalam prinsip-prinsip DevOps untuk memastikan bahwa <code>container security guidelines</code> tertentu terpenuhi.</p> <p>Yang saya maksud dengan ini adalah dengan teknologi cloud-native, kita tidak bisa hanya memiliki kebijakan dan postur keamanan yang statis; model keamanan kita juga harus dinamis dengan beban kerja yang ada dan bagaimana hal itu berjalan.</p> <p>Tim DevOps perlu menyertakan keamanan otomatis untuk melindungi lingkungan dan data secara keseluruhan, serta integrasi berkelanjutan dan proses pengiriman yang berkelanjutan.</p> <p>Daftar di bawah ini diambil dari postingan blog <code>RedHat</code>   1. Standardise and automate the environment: Setiap layanan harus memiliki hak istimewa sesedikit mungkin untuk meminimalkan koneksi dan akses yang tidak sah.   2. Centralise user identity and access control capabilities: Kontrol akses yang ketat dan mekanisme otentikasi terpusat sangat penting untuk mengamankan layanan mikro karena otentikasi dilakukan di beberapa titik.   3. Isolate containers running microservices from each other and the network: Ini mencakup data dalam perjalanan dan data saat istirahat karena keduanya dapat menjadi target bernilai tinggi bagi penyerang.   4. Encrypt data between apps and services: Platform orkestrasi kontainer dengan fitur keamanan terintegrasi membantu meminimalkan kemungkinan akses yang tidak sah.   5. Introduce secure API gateways: API yang aman meningkatkan otorisasi dan visibilitas perutean. Dengan mengurangi API yang terbuka, organisasi dapat mengurangi permukaan serangan.</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#cybersecurity-vs-devsecops","title":"Cybersecurity vs DevSecOps","text":"<p>Sesuai dengan judulnya, ini sebenarnya bukan vs, tetapi lebih kepada perbedaan antara kedua topik tersebut. Tapi saya pikir penting untuk mengangkat hal ini karena hal ini akan menjelaskan mengapa Keamanan harus menjadi bagian dari proses, prinsip, dan metodologi DevOps.</p> <p>Cybersecurity adalah praktik melindungi sistem dan jaringan komputer dari serangan digital, pencurian, dan kerusakan. Hal ini melibatkan identifikasi dan penanganan kerentanan, penerapan langkah-langkah keamanan, dan pemantauan sistem terhadap ancaman.</p> <p>DevSecOps, di sisi lain, adalah kombinasi dari praktik pengembangan, keamanan, dan operasi. Ini adalah filosofi yang bertujuan untuk mengintegrasikan keamanan ke dalam proses pengembangan, daripada memperlakukannya sebagai langkah yang terpisah. Hal ini melibatkan kolaborasi antara tim pengembangan, keamanan, dan operasi di seluruh siklus hidup pengembangan perangkat lunak (SDLC).</p>"},{"location":"articles/posts/devops-devsecops-cybersecurity/#beberapa-perbedaan-utama-antara-cybersecurity-dan-devsecops-antara-lain","title":"Beberapa perbedaan utama antara Cybersecurity dan DevSecOps antara lain:","text":"<ul> <li> <p>Focus: Cybersecurity terutama difokuskan untuk melindungi sistem dari ancaman eksternal, sedangkan DevSecOps berfokus pada pengintegrasian keamanan ke dalam proses pengembangan.</p> </li> <li> <p>Scope: Cybersecurity mencakup topik yang lebih luas, termasuk keamanan jaringan, keamanan data, keamanan aplikasi, dan banyak lagi. DevSecOps, di sisi lain, secara khusus berfokus pada peningkatan keamanan pengembangan dan penerapan perangkat lunak.</p> </li> <li> <p>Approach: Cybersecurity biasanya melibatkan penerapan langkah-langkah keamanan setelah proses pengembangan selesai, sedangkan DevSecOps melibatkan pengintegrasian keamanan ke dalam proses pengembangan sejak awal.</p> </li> <li> <p>Collaboration: Cybersecurity sering kali melibatkan kolaborasi antara tim TI dan tim keamanan, sedangkan DevSecOps melibatkan kolaborasi antara tim pengembangan, keamanan, dan operasi.</p> </li> </ul>"},{"location":"articles/posts/dicoding-elite/","title":"Dicoding elite","text":"<p>Last updated: May 1, 2020</p>"},{"location":"articles/posts/dicoding-elite/#technical-test-result","title":"Technical Test Result","text":"<p>Status: Submission Approved</p>"},{"location":"articles/posts/dicoding-elite/#project-script_testsh","title":"Project: script_test.sh","text":""},{"location":"articles/posts/dicoding-elite/#summary-project","title":"Summary Project","text":"<p>Command: <code>sleep 3s | echo -e \"\\n\"</code> dan <code>sleep 1m | echo -e \"\\n\"</code> Command ini tidak memberikan kontribusi yang signifikan terhadap output yang ditampilkan. Command <code>sleep 3s</code> digunakan untuk memberikan jeda selama 3 detik sebelum mencetak baris kosong dengan <code>echo -e \"\\n\"</code>, begitu juga dengan command <code>sleep 1m</code>. </p> <p>Namun, baris kosong tersebut tidak memberikan informasi tambahan yang berguna dalam konteks script ini. Jika tujuannya hanya memberikan jeda sejenak sebelum keluar dari script, maka jeda tersebut tidak diperlukan dan dapat dihapus.</p> <p>Command: <code>free --mega | sort</code> dan <code>df -hBG | sort</code> juga <code>df -x tmpfs --output=source,pcent | sort</code> Dari setiap command diatas, command <code>| sort</code> lebih baik dihapus saja agar hasil yang ditampilkan menjadi humman readable. </p>"},{"location":"articles/posts/dicoding-elite/#code-reviewer","title":"Code Reviewer","text":"<p>Jika menambahkan pipeline <code>sort</code> hasilnya seperti ini: <pre><code>febrian@linuxmint:~/Documents/Devops-submission$ df -hBG | sort\n/dev/sda1             1G    1G        1G   1% /boot/efi\n/dev/sda3           102G   60G       37G  62% /\nFilesystem     1G-blocks  Used Available Use% Mounted on\ntmpfs                 1G    1G        1G   1% /run\ntmpfs                 1G    1G        1G   1% /run/lock\ntmpfs                 1G    1G        1G   1% /run/user/1000\ntmpfs                 4G    1G        4G   3% /dev/shm\n</code></pre> Namun jika menghapus <code>sort</code> akan menjadi seperti ini (membentuk table header dibagian atas): <pre><code>febrian@linuxmint:~/Documents/Devops-submission$ df -hBG\nFilesystem     1G-blocks  Used Available Use% Mounted on\ntmpfs                 1G    1G        1G   1% /run\n/dev/sda3           102G   60G       37G  62% /\ntmpfs                 4G    1G        4G   3% /dev/shm\ntmpfs                 1G    1G        1G   1% /run/lock\n/dev/sda1             1G    1G        1G   1% /boot/efi\ntmpfs                 1G    1G        1G   1% /run/user/1000\n</code></pre> Kalian dapat mengetahui lebih banyak mengenai command yang digunakan dengan mengetikan: <code>man (nama commandnya)</code> contoh: <code>man free</code></p> <ul> <li>Di Linux, perintah <code>man</code> merupakan singkatan dari \"manual\".  Perintah    \"man\" digunakan untuk mengakses dokumentasi manual (manual pages)    yang menyediakan informasi rinci tentang perintah, fungsi, dan file    pada sistem operasi Linux.  </li> <li>Fungsi utama <code>man</code> adalah memberikan    panduan pengguna terperinci tentang cara menggunakan perintah dan    memahami argumen yang diperlukan.</li> </ul>"},{"location":"articles/posts/dicoding-elite/#project2-history_dicodingtxt","title":"Project2: history_dicoding.txt","text":""},{"location":"articles/posts/dicoding-elite/#summary-project_1","title":"Summary Project","text":"<p>Diproject kedua ini, untuk membuang perintah yang ada dalam file history_dicoding.txt, kalian dapat menggunakan command <code>&gt;</code> di linux. - Tanda <code>&gt;</code> digunakan untuk mengalihkan output dari perintah ke sebuah file dan menghapus konten file yang ada sebelumnya.  - Jika file tidak ada, maka file baru akan dibuat. Jika file sudah ada, maka isinya akan digantikan dengan output perintah yang baru.</p>"},{"location":"articles/posts/dicoding-elite/#code-reviewer_1","title":"Code Reviewer","text":"<p>Kalian perlu memasukan perintah dibawah di script yang kalian buat (scipt_test.sh) atau secara langsung di terminal. <code>&gt; history_dicoding.txt</code> maka semua teks yang ada di file tersebut akan hilang (kosong). </p> <p>Perintah <code>&gt;</code> sangat berguna untuk menyimpan hasil output perintah ke dalam file, menghasilkan file baru, atau menggantikan isi file yang ada.</p>"},{"location":"articles/posts/pengaturan-python/","title":"Pengaturan python","text":"<p>Last updated: August 19, 2021</p> <p>Tutorial pemasangan dan pengaturan python ini ditujukan untuk di lingkungan kerja FIAKO Engineering. Sehingga, harap disesuaikan lagi untuk kebutuhan masing-masing. </p> <p>Tutorial ini ditujukan untuk user bukan untuk development. Bisa dibilang proses pemasangan dan pengaturan untuk ruang kerja python bisa menyulitkan dan ribet awal-awalnya, tapi jika sistem sudah terpasang dengan baik, penggunaannya akan lebih mudah kedepannya. Sehingga, jika ada pertanyaan harap langsung hubungi saya.</p>"},{"location":"articles/posts/pengaturan-python/#pendahuluan","title":"Pendahuluan","text":"<p>Secara umum berikut aplikasi yang akan digunakan dan dipasang:</p> <ul> <li>Miniconda</li> <li>Visual Studio Code</li> <li>Google Colab</li> </ul>"},{"location":"articles/posts/pengaturan-python/#anaconda-atau-miniconda","title":"Anaconda atau Miniconda","text":"<p>Banyak tutorial ataupun pelatihan yang menyarankan penggunaan Anaconda, akan tetapi, saya ingin menyarankan hal yang berbeda yaitu Miniconda. Alasan pribadi saya adalah pengguna setidaknya \"dipaksa\" untuk navigasi dalam virtual environment dan membiasakan diri dengan tampilan command prompt. Dan kalau ada kerusakan / error cukup membuat environment baru saja.</p>"},{"location":"articles/posts/pengaturan-python/#visual-studio-code","title":"Visual Studio Code","text":"<p>VSCode ini digunakan sebagai alternatif Notepad++ atau Ultraedit. Saya juga masih awam soal penggunaan VSCode karena saya menghabiskan waktu pengembangnnya menggunakan Google Colab. Tapi VSCode ini bisa dijadikan alternatif kalau tidak mau menggunakan Google Colab. Alternatif lain bisa menggunakan Jupyter Notebook atau Jupyter Lab. Tapi, saya juga lebih jarang menyentuh itu dibandingkan VSCode. Saya menggunakan VSCode lebih sering untuk pengembangan situs (Jekyll).</p>"},{"location":"articles/posts/pengaturan-python/#google-colab","title":"Google Colab","text":"<p>Saya merekomendasikan untuk menggunakan Google Colab untuk pekerjaan Python. Karena dengan Google Colab, kolaborasi akan lebih mudah. Hanya saja, saya sarankan juga untuk menginstall Drive for Desktop. Jadi, jika ketika offline, masih bisa melakukan pekerjaannya menggunakan VSCode atau Jupyter Notebook/Lab. Dan ketika online, sistem tersinkronisasi secara otomatis. Sehingga pekerjaan pythonnya disimpan di cloud. </p>"},{"location":"articles/posts/pengaturan-python/#pemasangan","title":"Pemasangan","text":"<p>Berikut tahapan-tahapan untuk melakukan pemasangan dan pengaturan python. Harap dibaca terlebih dahulu keseluruhan sebelum mengikuti panduan dibawah ini. </p>"},{"location":"articles/posts/pengaturan-python/#miniconda","title":"Miniconda","text":"<ol> <li>Download Miniconda di halaman ini.</li> <li>Pada bagian \"Latest Miniconda Installer Links\", piliah <code>Miniconda3 Windows 64-bit</code>.</li> <li>Akan terdownload file <code>Miniconda3-latest-Windows-x86_64.exe</code>.</li> <li>Jalankan file tersebut dengan akses Administrator.</li> <li>Klik kanan pada file install, kemudian pilih \"Run as Administrator\".</li> <li>Di bagian \"Welcome to Miniconda3 ...\" klik Next.</li> <li>Setujui License Agreement dengan klik I Agree.</li> <li>Pada Bagian \"Install for:\" pilih \"All Users (required admin privileges)\". </li> <li>PENTING!, Pada bagian \"Destination Folder\" ubah alamat instalasi menjadi \"C:\\Miniconda3\"</li> <li>Pada \"Advanced Options\", pastikan hanya \"Register Miniconda3 as the system Python 3.9\" yang dicentang \u2714\ufe0f. </li> <li>Kemudian Install. </li> <li>Selesai sudah tahap instalasi Miniconda. (Bisa dibaca README dan halaman pengenalan Anaconda kalau penasaran. \ud83e\udd2d)</li> </ol> <p>Selanjutnya dilanjutkan dengan pemasangan virtual environment di conda:</p> <ol> <li>Buka \"Anaconda Prompt (Miniconda3)\" melalui start menu (\ud83e\ude9f).</li> <li>Pastikan ada tulisan <code>(base)</code> sebelum alamat working directory.</li> <li>Ketik perintah <code>conda update conda</code> untuk memastikan conda di versi terbaru. Atau bisa disalin dari kode dibawah ini (klik kanan untuk paste di Anaconda Prompt). <pre><code>conda update conda\n</code></pre></li> <li>Jika ada update terbaru, ketik Yes atau y, untuk melanjutkan proses update.</li> <li>Membuat Environment <code>userhk37</code>:</li> <li>Pada Anaconda Prompt ketik perintah <code>conda env create --file \"https://github.com/lrmn7/setup/raw/main/conda/userhk37.yml\"</code>. <pre><code>conda env create --file \"https://github.com/lrmn7/setup/raw/main/conda/userhk37.yml\"\n</code></pre></li> <li>Tunggu untuk conda melakukan solving environment.</li> <li>Tunggu prosesnya sampai selesai. Proses selesai ketika muncul di Anaconda Prompt <code>(base) C:\\Users\\...&gt;</code></li> <li>Setelah itu ketik perintah <code>jupyter serverextension enable --py jupyter_http_over_ws</code>.</li> <li>Oke. Tahap pemasangan environment <code>userhk37</code> telah selesai.</li> </ol> <p>Jika ternyata sudah melakukan pembuatan environment <code>userhk37</code>, Anda bisa memperbaruinya di Anaconda Prompt dengan perintah berikut: <pre><code>conda env update --file \"https://github.com/lrmn7/setup/raw/main/conda/userhk37.yml\" --prune\n</code></pre></p>"},{"location":"articles/posts/pengaturan-python/#visual-studio-code_1","title":"Visual Studio Code","text":"<p>Untuk instalasi Visual Studio Code bisa langsung didownload di sini. Download versi \"System Installer 64-bit\". </p> <p></p> <p>Instalasi ini disesuaikan saja dengan kebutuhan pribadi tidak perlu pakai tutorial rasanya. </p>"},{"location":"articles/posts/pengaturan-python/#pengaturan","title":"Pengaturan","text":"<p>Pengaturan ini diutamakan untuk VSCode dan Google Colab. Untuk miniconda sudah selesai dan bisa langsung digunakan. </p>"},{"location":"articles/posts/pengaturan-python/#visual-studio-code_2","title":"Visual Studio Code","text":"<ol> <li>Buka Visual Studio Code.</li> <li>Jika muncul dialog untuk melakukan instalasi extension, pilih Install. Biasanya muncul untuk python. </li> <li>Buka Command Palette dengan <code>Ctrl + Shift + P</code>.</li> <li>ketik \"terminal select\" sampai muncul pilihan \"Terminal: Select Default Profile\".</li> <li>pilih \"Terminal: Select Default Profile\" dengan keyboard kemudian Enter.</li> <li>pilih \"Command Prompt\".</li> <li>Anda bisa membuka terminal dengan <code>Ctrl + `</code>. Sebelum membuka, bisa mematikan seluruh terminal dengan membuka Command Palette dan mencari opsi \"Terminal: Kill All Terminal\".</li> <li>Install extension yang akan dibutuhkan. Berikut extension yang saya gunakan (yang utama hanya Python dan Jupyter sebenarnya). </li> <li>Ketika ingin melakukan scripting menggunakan python (atau file <code>.py</code>) jangan lupa untuk mengatur interpreter ke <code>conda: userhk37</code>. Caranya dengan membuka Command Palette dan mencari opsi \"Python: Select Interpreter\". Pilih <code>Python 3.7 ('userhk37')</code>.</li> </ol> <p>Karena nanti penggunaan akan lebih fokus ke Notebook, saya biasanya menggunakan Google Colab untuk interfacenya. Tapi hal ini dimungkinkan juga pakai VSCode, ini hanya masalah preferensi saja. </p>"},{"location":"articles/posts/pengaturan-python/#google-colab_1","title":"Google Colab","text":"<p>Jika belum pernah sama sekali membuka Google Colab, tahapan ini perlu dilakukan agar dibuat folder \"Colab Notebooks\" di Google Drive.</p> <ol> <li>Login ke akun Google.</li> <li>Buka halaman Google Colab</li> <li>Pilih \"New Notebook\"</li> <li>Setelah terbuka notebook dengan judul \"Untitled ...\", simpan notebook dengan menekan <code>Ctrl + S</code>. </li> <li>Tutup halamannya.</li> </ol>"},{"location":"articles/posts/pengaturan-python/#google-drive","title":"Google Drive","text":"<p>Bagian ini bisa dilakukan jika ingin menggunakan notebook saat tidak dapat mengakses Google Colab (internet mati/offline).  </p> <ol> <li>Install Google Drive for Desktop. Untuk pengaturan gunakan seperti default.</li> <li>Jika berhasil maka sistem akan membuat Drive baru di sistem yaitu <code>G:\\</code> yang dikhususkan untuk Google Drive.</li> <li>Melalui windows explorer, Buka <code>G:\\</code> &gt; <code>My Drive</code>.</li> <li>Klik kanan pada folder <code>Colab Notebooks</code> kemudian pilih \"Offline Access\" &gt; \"Available Offline\" (Jika menggunakan Windows 11 pilih \"Show more options\")  </li> <li>Selesai sudah, notebook yang telah dibuat di Google Colab akan selalu tersedia di mesin Anda. </li> </ol> <p>Ketika terpasangnya Google Drive for Desktop, hal ini memungkinkan untuk melakukan pekerjaan baik di mesin lokal ataupun cloud. Tergantung kepentingannya. Pengalaman pribadi saya saat melakukan pemodelan Deep Learning, saat melatih model, saya menggunakan cloud server, tapi saat mengevaluasi hasil model, saya menggunakan mesin lokal. Tapi, rasanya, ini untuk tutorial sebagai advanced user saja, karena perlu pengetahuan koding di pythonnya.  </p> <p>Sudah selesai pemasangan dan pengaturan sistem python, untuk memulai bereksperimen dengan python akan dilanjutkan di tulisan berikutnya. Jika ada pertanyaan, hubungi saya langsung, atau melalui <code>lrmn.dev@gmail.com</code>.</p>"},{"location":"articles/posts/penggunaan-python/","title":"Penggunaan python","text":"<p>Last updated: August 19, 2021</p> <p>Tutorial penggunaan python ini ditujukan untuk di lingkungan kerja FIAKO Engineering. Sehingga, harap disesuaikan lagi untuk kebutuhan masing-masing. </p> <p>Tutorial ini merupakan lanjutan dari tutorial pemasangan dan pengaturan python. Tutorial ini akan fokus bagaimana bekerja dengan python. Banyak beberapa metode untuk memulai koding dengan python. Pribadi, yang sering saya gunakan adalah Google Colab. Saat saya melakukan pengembangan hidrokit saya menggunakan VSCode. Jika diperlukan saya juga kadang menggunakan Jupyter Notebook atau Jupyter Lab, tapi kasusnya biasanya kalau keadaan offline atau perlu bereksperimen dengan jupyter notebook/lab.</p>"},{"location":"articles/posts/penggunaan-python/#google-colab","title":"Google Colab","text":"<p>Penggunaan Google Colab bisa menggunakan dua mesin yaitu mesin lokal (offline) atau cloud (online).</p>"},{"location":"articles/posts/penggunaan-python/#online","title":"Online","text":"<p>Untuk online, tidak perlu ada pengaturan sama sekali. Tinggal buka Google Colab, \"New notebook\", jangan lupa rename dokumen, connect ke hosted runtime, langsung deh bereksperimen dengan python. Karena menggunakan mesin cloud, biasanya untuk pekerjaan yang sering dilakukan untuk Data Science atau Machine Learning paketnya sudah tersedia, jadi tidak perlu instalasi paket lainnya. Akan tetapi jika ingin install paket tertentu, bisa menggunakan perintah <code>!pip install [nama paket]</code>.</p>"},{"location":"articles/posts/penggunaan-python/#integrasi-dengan-google-drive","title":"Integrasi dengan Google Drive","text":"<p>Integrasi ini sangat berbahaya jika Anda tidak mengetahui detail koding yang akan dijalankan. Dapat beresiko menghilangkan berkas di google drive, baik sebagian maupun keseluruhan. Konsultasikan terlebih dahulu sebelum melakukan integrasi ini. </p> <p>Tahapan ini jika ingin melakukan integrasi dengan dokumen yang ada di Google Drive. Jadi, saat Anda menaruh berkas di folder <code>G:\\My Drive\\Colab Notebook\\</code>, anda dapat mengaksesnya tanpa perlu terhubung dengan mesin lokal terlebih dahulu (diasumsikan bahwa sinkronisasi telah usai dan berhasil). Berikut recipe untuk dapat mengakses dokumen di google drive. Harap dipahami setiap barisnya sebelum dieksekusi, jika ada pertanyaan, hubungi saya.</p> <pre><code>_IS_LOCAL = False # #@param {type:\"boolean\"}\n\nfrom pathlib import Path\n\nif _IS_LOCAL:\n    _LOCAL_DIRECTORY = '.' #@param {type:\"string\"}\n    _DIRECTORY = Path(_LOCAL_DIRECTORY)\nelse:\n    from google.colab import drive\n    drive.mount('/content/gdrive')\n    _CLOUD_DIRECTORY = '/content/gdrive/My Drive/Colab Notebooks' #@param {type:\"string\"}\n    _DIRECTORY = Path(_CLOUD_DIRECTORY)\n\nprint(f':: Current Working Directory: {_DIRECTORY.cwd()}')\nprint(f':: _DIRECTORY = {_DIRECTORY}')\n</code></pre> <p>Untuk selanjutnya, Anda dapat mengakses berkas di folder Colab Notebook dengan <code>_DIRECTORY / 'lokasi/berkas/atau/folder'</code>. Perlu diingat bahwa hasil return berupa object <code>pathlib.Path</code>. Untuk referensi lanjut mengenai <code>pathlib.Path</code> bisa baca disini.</p>"},{"location":"articles/posts/penggunaan-python/#upload-dokumen","title":"Upload dokumen","text":"<p>Saat menggunakan mesin cloud, terkadang ada dokumen yang ingin kita akses tapi tidak mau melalui Integrasi dengan Google Drive. Solusi alternatifnya adalah mengupload file ke mesin cloud pada sesi tersebut. Jadi, file tersebut hanya untuk sementara, selama session / sesi masih aktif. Ada dua metode untuk upload dokumen, bisa menggunakan script atau drag and drop. </p> <p>Drag and Drop</p> <p>Buka Files disamping kiri, kemudian pilih icon untuk upload.</p> <p></p> <p>Script</p> <p>Gunakan script dibawah ini untuk dapat dialog untuk mengupload files.</p> <pre><code>from google.colab import files\n\nupload = files.upload()\n</code></pre> <p><code>upload</code> merupakan dictionary yang berisikan file yang diupload (key = nama file, value = isi file). </p>"},{"location":"articles/posts/penggunaan-python/#offline","title":"Offline","text":"<p>Untuk menggunakan mesin lokal, bisa tergolong cukup perlu usaha dikarenakan harus membuka Anaconda Prompt dan melakukan copy-paste dari prompt ke Google Colab. Berikut langkah-langkahnya (diasumsikan telah berhasil melakukan pemasangan dan pengaturan python.</p> <ul> <li>Buka Anaconda Prompt (userhk37) di Start Menu (\ud83e\ude9f).</li> <li>Pastikan Anda di environment <code>(userhk37)</code>. Jika tidak, ketik <code>conda activate userhk37</code>.</li> <li>Ketik perintah berikut ini di Anaconda Prompt:</li> </ul> <pre><code>jupyter notebook --NotebookApp.allow_origin=\"https://colab.research.google.com\" --port=8888 --NotebookApp.port_retries=0 --no-browser --notebook-dir \"G:\\My Drive\\Colab Notebooks\"\n</code></pre> <ul> <li>Berikut konfigurasi yang bisa digunakan dan catatan yang perlu diperhatikan:<ul> <li><code>--notebook-dir \"G:\\My Drive\\Colab Notebooks\"</code>, Anda bisa mengganti <code>\"G:\\My Drive\\Colab Notebooks\"</code> ke alamat folder lainnya semisal <code>\"D:\\Data\"</code>. Jika argumen ini dihilangkan, secara otomatis dia mengatur current working directory berdasarkan alamat/path saat perintah ini dipanggil. </li> </ul> </li> <li>Setelah dilakukan perintah tersebut, salin URL yang berawalan <code>http://localhost:8888/?token=...</code>.<ul> <li>Cara copynya arahkan kursor ke bagian awal url, kemudian drag sampai bagian akhir url, klik kanan untuk menyalinnya.</li> </ul> </li> <li>Setelah disalin, buka notebook di Google Colab. Kemudian pilih Connect &gt; \"Connect to a local runtime\".</li> <li>Paste url yang telah disalin menggunakan <code>Ctrl + V</code>. Dilanjutkan dengan memilih Connect.</li> <li>Jika berhasil akan muncul keterangan \"Connected (Local)\". </li> </ul> <p>Beres sudah, untuk tutorial jika menggunakan Google Colab, baik lokal ataupun tidak.</p>"},{"location":"articles/posts/penggunaan-python/#visual-studio-code","title":"Visual Studio Code","text":"<p>Untuk Visual Studio Code, hanya ada opsi untuk offline, sehingga tidak lebih rumit dibandingkan Google Colab. Penggunaan di VSCode juga tergolong sederhana karena navigasinya bisa langsung dilakukan dari Command Palette.</p> <ol> <li>Buka dokumen <code>.py</code>, <code>.ipynb</code>, atau folder kerja menggunakan VSCode (klik kanan &gt; Open with Code).</li> <li>Buka Command Palette (Ctrl + Shift + P), pilih \"Python: Select Interpreter\". Pilih <code>userhk37</code>.</li> <li>Sudah selesai. Dapat langsung eksekusi file <code>.py</code> atau <code>.ipynb</code>. </li> </ol>"},{"location":"articles/posts/penggunaan-python/#jupyter-notebook-lab","title":"Jupyter Notebook / Lab","text":"<p>Untuk menggunakan interface jupyter notebook/lab berikut langkahnya:</p> <ul> <li>Buka Anaconda Prompt (userhk37) di Start Menu (\ud83e\ude9f).</li> <li>Pastikan Anda di environment <code>(userhk37)</code>. Jika tidak, ketik <code>conda activate userhk37</code>.</li> <li>Ketik perintah berikut ini di Anaconda Prompt:<ul> <li><code>jupyter notebook</code> untuk membuka jupyter notebook.</li> <li><code>jupyter lab</code> untuk membuka jupyter lab. </li> </ul> </li> <li>Anda bisa menambah argumen <code>--notebook-dir \"lokasi\\yang\\ingin\\digunakan\"</code> untuk mengatur current working directory. </li> </ul>"},{"location":"articles/posts/perbedaan-useradd-adduser/","title":"Perbedaan useradd adduser","text":"<p>Last updated: May 14, 2021</p>"},{"location":"articles/posts/perbedaan-useradd-adduser/#perbedaan-useradd-adduser","title":"Perbedaan useradd &amp; adduser","text":"<p><code>useradd</code> dan <code>adduser</code> adalah perintah di sistem operasi Linux yang digunakan untuk membuat akun pengguna baru. Meskipun keduanya dapat digunakan untuk tujuan yang sama, ada beberapa perbedaan yang harus dipertimbangkan.</p> <ol> <li> <p>Konfigurasi Default <code>useradd</code> hanya menambahkan pengguna baru ke sistem dan tidak membuat direktori rumah atau mengatur konfigurasi default lainnya. Dalam banyak kasus, pengguna baru harus diatur dengan direktori rumah dan file konfigurasi default tertentu. Dalam hal ini, <code>adduser</code> lebih fleksibel, karena perintah ini akan mengatur konfigurasi default yang tepat saat pengguna baru dibuat.</p> </li> <li> <p>Interaksi dengan Pengguna Ketika menjalankan <code>adduser</code>, pengguna akan diminta untuk memasukkan beberapa informasi tambahan, seperti nama lengkap, nomor telepon, dan alamat email. Informasi ini dapat membantu administrator sistem untuk mengelola akun pengguna secara lebih efektif dan dapat digunakan untuk menghasilkan daftar pengguna yang lebih terorganisir.</p> </li> <li> <p>Konfigurasi yang Lebih Otomatis Seperti yang telah disebutkan sebelumnya, <code>adduser</code> menyediakan konfigurasi yang lebih otomatis daripada <code>useradd</code>. Dalam banyak kasus, hal ini dapat menghemat waktu dan usaha dalam pengaturan akun pengguna.</p> </li> <li> <p>Ketergantungan Paket Beberapa distribusi Linux hanya menyediakan <code>adduser</code>, sementara yang lain menyertakan kedua perintah. Dalam hal ini, penggunaan perintah mana yang lebih tepat tergantung pada preferensi dan kebutuhan pengguna, serta ketergantungan paket.</p> </li> <li> <p>Opsi yang Lebih Mudah Dipahami <code>adduser</code> memiliki opsi yang lebih mudah dipahami daripada <code>useradd</code>, terutama bagi pengguna yang baru mengenal sistem Linux. Ini karena perintah tersebut menyediakan opsi-opsi yang lebih jelas dan dapat dipahami, seperti -gecos untuk memasukkan informasi tambahan pengguna.</p> </li> </ol> <p>Dalam kesimpulan, <code>adduser</code> lebih disukai oleh administrator sistem yang ingin membuat akun pengguna dengan konfigurasi default yang lengkap dan informasi tambahan, sementara <code>useradd</code> lebih cocok untuk pengguna yang ingin membuat akun dengan opsi yang lebih spesifik. Namun, keduanya dapat digunakan untuk membuat akun pengguna baru dan tidak ada yang benar atau salah dalam memilih salah satu perintah tersebut.</p>"},{"location":"articles/posts/perbedaan-useradd-adduser/#menambahkan-akses-sudo-ke-user-baru","title":"Menambahkan akses sudo ke user baru","text":"<p>Untuk memberikan akses sudo kepada user baru setelah melakukan adduser, Anda dapat mengikuti langkah-langkah berikut:</p> <ol> <li> <p>Masuk sebagai root atau sebagai pengguna yang memiliki hak akses sudo.</p> </li> <li> <p>Buka berkas sudoers menggunakan perintah visudo. Pastikan untuk menggunakan perintah ini karena berkas sudoers harus diedit dengan hati-hati untuk menghindari masalah keamanan. <pre><code>sudo visudo\n</code></pre></p> </li> <li> <p>Tambahkan baris berikut pada akhir berkas sudoers untuk memberikan akses sudo ke user baru. Ganti nama_user_baru dengan nama pengguna yang ingin Anda berikan akses sudo. <pre><code>nama_user_baru ALL=(ALL:ALL) NOPASSWD:ALL\n</code></pre></p> </li> <li> <p>Simpan dan keluar dari berkas sudoers. Pastikan untuk menyimpan perubahan dengan benar.</p> </li> <li> <p>Sekarang user baru dapat menggunakan perintah sudo dengan cara mengetikkan perintah sudo diikuti oleh perintah yang ingin mereka jalankan, lalu memasukkan kata sandi mereka saat diminta.</p> </li> </ol> <p>Dengan mengikuti langkah-langkah di atas, user baru sekarang memiliki akses sudo dan dapat menjalankan perintah dengan hak akses root. Namun, pastikan untuk memberikan akses sudo hanya kepada pengguna yang membutuhkannya dan tidak memberikan akses sudo ke semua pengguna tanpa pertimbangan yang matang karena dapat membahayakan keamanan sistem.</p>"},{"location":"articles/posts/praktik-ansible-jinja2/","title":"Praktik ansible jinja2","text":"<p>Last updated: June 5, 2020</p>"},{"location":"articles/posts/praktik-ansible-jinja2/#apa-itu-jinja-2","title":"Apa itu Jinja 2","text":"<p>Jinja2 adalah sebuah library template engine untuk Python yang digunakan untuk mempermudah pembuatan template file dengan menggabungkan struktur file dengan data yang akan digunakan pada file tersebut.</p> <p>Dalam konteks Ansible, Jinja2 digunakan sebagai mekanisme template engine untuk menghasilkan file konfigurasi yang dibutuhkan pada host yang sedang dielola. Hal ini memungkinkan pengguna Ansible untuk membuat file konfigurasi yang lebih dinamis, yang dapat berubah sesuai dengan variabel yang didefinisikan dalam playbook Ansible.</p> <p>Jinja2 sangat berguna dalam membuat file konfigurasi yang kompleks dan dapat digunakan dengan banyak format file seperti .yml, .json, .ini, .xml, dan lain-lain. Pada dasarnya, Jinja2 memungkinkan kita untuk memisahkan konfigurasi dari kode, sehingga dapat memudahkan dalam pemeliharaan dan pengaturan konfigurasi yang lebih dinamis pada infrastruktur IT.</p>"},{"location":"articles/posts/praktik-ansible-jinja2/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Apache. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/praktik-ansible-jinja2/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible dan konfigurasi apache.</p> <pre><code>lrmn7@ubuntu-controller:~$ mkdir ansible-jinja2\nlrmn7@ubuntu-controller:~$ cd ansible-jinja2/\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server:</p> <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn7\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible</p> <pre><code>vim inventory\n</code></pre> <pre><code>[webservers]\nubuntu-managed2\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#file-indexhtml-untuk-apache2","title":"File index.html untuk Apache2","text":"<p>Jika sudah selanjutnya buat file yang akan digunakan untuk apache2 sebagai bukti kalau kita sudah berhasil menginstall apache2</p> <pre><code>mkdir files\ncd files\necho \"Hello world! This is from Ansible x Jinja2 Template.\" &gt; index.html.j2\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Langkah terkahir adalah dengan membuat ansible playbook, disini kita menggunaka 3 module yaitu apt, copy dan service.</p> <pre><code>vim site.yml\n</code></pre> <pre><code>---\n- name: install and start apache2\n  hosts: webservers\n  become: true\n\n  tasks:\n    - name: ensure apache2 package is present\n      apt:\n        name: apache2\n        state: present\n        update_cache: yes\n        force_apt_get: yes\n\n    - name: restart apache2 service\n      service: name=apache2 state=restarted enabled=yes\n\n    - name: copy index.html\n      template: src=files/index.html.j2 dest=/var/www/html/index.html\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#mengecek-ansible-playbook","title":"Mengecek ansible playbook","text":"<p>Ansible playbook yang sudah kalian tulis lebih baik di cek terlebih dahulu apakah terdapat error atau tidak dengan menggunakan command dibawah ini:</p> <pre><code>ansible-playbook --syntax-check site.yml\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#menjalankan-ansible-playbook","title":"Menjalankan ansible playbook","text":"<p>Jika playbook tidak ada yang error, langkah selanjutnya adalah menjalankannya</p> <pre><code>ansible-playbook -i inventory site.yml\n</code></pre> <p>Jika berhasil maka akan tampil seperti dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-jinja2$ ansible-playbook -i inventory site.yml\n\nPLAY [Install &amp; Start apache2 menggunakan Jinja2 Template] *********************************************************************************************\n\nTASK [Gathering Facts] *********************************************************************************************************************************\nok: [ubuntu-managed2]\n\nTASK [ensure apache2 package is installed or present] **************************************************************************************************\nchanged: [ubuntu-managed2]\n\nTASK [restart apache2 service] *************************************************************************************************************************\nchanged: [ubuntu-managed2]\n\nTASK [copy index.html.j2 template] *********************************************************************************************************************\nchanged: [ubuntu-managed2]\n\nPLAY RECAP *********************************************************************************************************************************************\nubuntu-managed2            : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre>"},{"location":"articles/posts/praktik-ansible-jinja2/#mengecek-apache2-di-managed-server","title":"Mengecek Apache2 di Managed Server","text":"<p>Jika ansible sudah dijalankan maka tertulis changed di ubuntu managed2 untuk task install dan copy, itu berarti bisa saja apache sudah diinstall dan file index.html.j2 sudah di copy ke folder configurasi apache2. Langkah selanjutnya cek managed servernya.</p> <pre><code>curl ubuntu-managed2\n</code></pre> <p>Jika tampil seperti dibawah, maka kita telah berhasil menginstall apache2 menggunakan ansible.</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-jinja2$ curl ubuntu-managed2\nHello world! This is from Ansible x Jinja2 Template.\n</code></pre> <p>Kita juga dapat melakukan port forwarding ubuntu-managed2 untuk melihatnya di laptop host kita dengan membukanya di browser, caranya sudah dituliskan di artikel sebelumnya.</p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/","title":"Praktik docker run dengan nginx","text":"<p>Last updated: June 7, 2020</p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#perbedaan-docker-run-dan-docker-create-container","title":"Perbedaan Docker Run dan Docker Create Container","text":"<p>Perintah <code>docker run</code> digunakan untuk menjalankan sebuah container. Perintah ini akan memeriksa apakah gambar yang ditentukan tersedia secara lokal, dan jika tidak, akan menarik gambar dari registry yang ditentukan. Kemudian akan membuat sebuah container baru dari gambar tersebut dan menjalankannya.</p> <p>Perintah <code>docker create</code> digunakan untuk membuat sebuah container baru, tetapi tidak menjalankannya. Perintah ini akan membuat sebuah container tetapi meninggalkannya dalam keadaan berhenti. Untuk menjalankan container tersebut, Anda dapat menggunakan perintah <code>docker start</code>.</p> <p>Jadi, perbedaan utama antara <code>docker run</code> dan <code>docker create</code> adalah bahwa docker run membuat dan menjalankan sebuah container dengan satu perintah, sementara <code>docker create</code> hanya membuat sebuah container. Perintah docker start digunakan untuk menjalankan kembali sebuah container yang telah dihentikan.</p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#mencari-image-nginx","title":"Mencari image nginx","text":"<pre><code>docker search nginx\n</code></pre>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#menjalankan-image-nginx-dengan-nama-container-nginx1-dan-expose-ke-port-8181","title":"Menjalankan image nginx dengan nama container nginx1 dan expose ke port 8181","text":"<p><pre><code>docker run -d --name nginx1 -p 8181:80 nginx:latest\n</code></pre> Dengan perintah diatas, docker akan membuat container dengan nama nginx1 dengan melakukan download / pull image dari Docker hub untuk di expose ke port 8181.</p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#menjalankan-image-nginx-dengan-nama-container-nginx2-dan-expose-ke-port-8282","title":"Menjalankan image nginx dengan nama container nginx2 dan expose ke port 8282","text":"<pre><code>docker run -d --name nginx2 -p 8282:80 nginx:latest\n</code></pre>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#melihat-container-yang-sedang-berjalan","title":"Melihat container yang sedang berjalan","text":"<pre><code>docker ps -a\n</code></pre>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#cek-apakah-nginx-sudah-bisa-diakses-dengan-perintah-curl","title":"Cek apakah nginx sudah bisa diakses dengan perintah curl","text":"<p><pre><code>curl localhost:8181\n</code></pre> Note: Lakukan hal yang sama, curl nginx2 ke port 8282. Maka akan tampil seperti dibawah ini baik itu nginx1 ataupun nginx2 <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#masuk-ke-masing-masing-container-ubah-halaman-default-nginx","title":"Masuk ke masing-masing container, ubah halaman default nginx","text":"<p><pre><code>docker exec -it nginx1 /bin/bash\ntouch index.html &amp;&amp; echo \"hello nginx1\" &gt;&gt; index.html &amp;&amp; mv index.html /usr/share/nginx/html\n</code></pre> Kemudian restart container nginx1 <pre><code>docker restart nginx1\n</code></pre> Note: Lakukan hal yang sama untuk nginx2 namun di index.html ubah menjadi \"hello nginx2\"</p>"},{"location":"articles/posts/praktik-docker-run-dengan-nginx/#cek-kembali-masing-masing-nginx","title":"Cek kembali masing-masing Nginx","text":"<p><pre><code>curl localhost:8181\ncurl localhost:8282\n</code></pre> Maka default page Nginx sudah diganti ke halaman <code>hello nginx1</code> dan <code>hello nginx2</code></p>"},{"location":"articles/posts/praktik-install-mysql-phpmyadmin-docker/","title":"Praktik install mysql phpmyadmin docker","text":"<p>Last updated: June 15, 2020</p>"},{"location":"articles/posts/praktik-install-mysql-phpmyadmin-docker/#menginstall-mysql-dan-phpmyadmin","title":"Menginstall MySQL dan phpMyAdmin","text":"<p>Untuk menginstall MySQL dan phpMyAdmin menggunakan Docker, Anda bisa menjalankan perintah berikut: <pre><code>$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=rootpassword -d mysql:5.7\n$ docker run --name myadmin -d --link mysql:db -p 8383:80 phpmyadmin/phpmyadmin\n</code></pre></p> <p>Perintah pertama akan menjalankan container MySQL dengan nama <code>mysql</code> dan menetapkan password root sebagai <code>rootpassword</code>. Container akan dijalankan dalam mode background (detached mode) dengan menggunakan image MySQL versi 5.7.</p> <p>Perintah kedua akan menjalankan container phpMyAdmin dengan nama <code>myadmin</code>, menghubungkan ke container MySQL yang sudah dijalankan sebelumnya, dan menjalankan webserver pada port 8383. Image yang digunakan adalah <code>phpmyadmin/phpmyadmin</code>.</p> <p>Setelah menjalankan perintah di atas, Anda bisa mengakses phpMyAdmin di http://localhost:8383/. Anda bisa login dengan menggunakan username <code>root</code> dan password <code>rootpassword</code>.</p>"},{"location":"articles/posts/praktik-install-mysql-phpmyadmin-docker/#penjelasan-mengenai-link-mysqldb","title":"Penjelasan mengenai \"--link mysql:db\"","text":"<p>Opsi <code>--link</code> pada perintah docker run digunakan untuk menghubungkan antar container Docker. Dalam contoh di atas, opsi <code>--link mysql:db</code> akan menghubungkan container <code>myadmin</code> ke container <code>mysql</code>.</p> <p>Setelah terhubung, container <code>myadmin</code> bisa mengakses container <code>mysql</code> dengan menggunakan hostname <code>db</code>. Ini berguna ketika container <code>myadmin</code> (phpMyAdmin) perlu mengakses database di container <code>mysql</code>.</p> <p>Contoh penggunaan opsi <code>--link</code> adalah ketika Anda ingin menjalankan aplikasi yang memerlukan database, dan Anda ingin menjalankan database terpisah dari aplikasi tersebut dalam container yang berbeda. Dengan menggunakan opsi --link, aplikasi bisa terhubung ke database dengan menggunakan hostname yang telah ditentukan.</p> <p>Sebagai tambahan, opsi --link sudah tidak direkomendasikan lagi untuk digunakan dalam versi terbaru dari Docker. Penggunaan opsi --link bisa menyebabkan masalah keamanan dan ketergantungan antar container yang tidak perlu. Sebagai gantinya, Anda bisa menggunakan fitur Docker network untuk menghubungkan container, atau menggunakan fitur Docker Compose untuk mengelola beberapa container sekaligus.</p>"},{"location":"articles/posts/praktik-install-mysql-phpmyadmin-docker/#menghubungkan-mysql-dan-phpmyadmin-dengan-docker-network","title":"Menghubungkan MySQL dan phpMyAdmin dengan Docker Network","text":"<p>Untuk menggunakan Docker network untuk menghubungkan container MySQL dan phpMyAdmin, Anda bisa menjalankan perintah berikut: 1. Buat Docker network baru dengan perintah  <pre><code>docker network create mynetwork\n</code></pre> 2. Jalankan container MySQL dengan menambahkan opsi <code>--network mynetwork</code>. <pre><code>docker run --name mysql -e MYSQL_ROOT_PASSWORD=rootpassword --network mynetwork -d mysql:5.7\n</code></pre> 3. Jalankan container phpMyAdmin dengan menambahkan opsi <code>--network mynetwork</code>. <pre><code>docker run --name myadmin -d --network mynetwork -p 8383:80 phpmyadmin/phpmyadmin\n</code></pre> Setelah menjalankan perintah di atas, kedua container akan terhubung dalam Docker network <code>mynetwork</code>. Container <code>myadmin</code> bisa mengakses container <code>mysql</code> dengan menggunakan hostname <code>mysql</code>.</p>"},{"location":"articles/posts/praktik-install-mysql-phpmyadmin-docker/#penggunaan-docker-volume-agar-data-tetap-aman","title":"Penggunaan Docker Volume agar data tetap aman","text":"<p>Sebagai tambahan, jika Anda ingin menambahkan volume untuk menyimpan data MySQL di luar container, Anda bisa menambahkan opsi <code>-v /my/own/datadir:/var/lib/mysql</code> pada perintah docker run untuk container MySQL. Ini akan menyimpan data MySQL di dalam folder <code>/my/own/datadir</code> di host Anda, sehingga data akan tetap tersimpan meskipun container dihapus atau dibongkar. <pre><code>docker run --name mysql -e MYSQL_ROOT_PASSWORD=rootpassword --network mynetwork -v /my/own/datadir:/var/lib/mysql -d mysql:5.7\n</code></pre> Setelah menjalankan perintah di atas, Anda bisa mengakses phpMyAdmin di http://localhost:8383/. Anda bisa login dengan menggunakan username <code>root</code> dan password <code>rootpassword</code>.</p>"},{"location":"articles/posts/praktik-install-postgres-docker/","title":"Praktik install postgres docker","text":"<p>Last updated: June 19, 2020</p>"},{"location":"articles/posts/praktik-install-postgres-docker/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi, ada beberapa hal yang perlu dilakukan yaitu menginstall docker &amp; docker compose terlebih dahulu serta menginstall DBeaver sebagai DBMS-nya. Tutorial dapat dilihat di internet atau artikel sebelumnya.</p>"},{"location":"articles/posts/praktik-install-postgres-docker/#apa-itu-docker","title":"Apa itu Docker ?","text":"<p>Docker adalah perangkat lunak yang memungkinkan Anda untuk membangun, memulai, dan menjalankan aplikasi dalam lingkungan virtual yang dikenal sebagai \"container\". Ini membantu mengatasi masalah kompatibilitas yang sering terjadi saat menjalankan aplikasi pada berbagai sistem operasi. </p> <p>Docker memungkinkan Anda untuk membungkus aplikasi dan dependensinya menjadi satu paket yang dapat dengan mudah dipindahkan dan dijalankan di mana saja. Hal ini membuat aplikasi lebih mudah dikembangkan dan di deployment. Docker juga memungkinkan Anda untuk memanagement sumber daya dan memastikan konsistensi lingkungan selama proses pengembangan dan produksi.</p>"},{"location":"articles/posts/praktik-install-postgres-docker/#kenapa-menggunakan-docker","title":"Kenapa menggunakan Docker ?","text":"<p>Berikut adalah beberapa kelebihan menginstall aplikasi di docker dibandingkan menginstall aplikasi langsung pada windows:</p> <ol> <li> <p>Portabilitas: Aplikasi yang diinstall di dalam docker dapat dengan mudah dipindahkan dari satu sistem ke sistem lain tanpa masalah kompatibilitas.</p> </li> <li> <p>Isolasi lingkungan: Docker membantu memisahkan aplikasi dan dependensinya dari sistem operasi host, sehingga memastikan bahwa aplikasi bekerja dengan benar meskipun sistem operasi host berubah.</p> </li> <li> <p>Kemudahan management: Docker memungkinkan Anda untuk memanage sumber daya dan memastikan konsistensi lingkungan selama proses pengembangan dan produksi.</p> </li> <li> <p>Keamanan: Docker membantu memastikan keamanan aplikasi dengan membatasi akses aplikasi ke sistem operasi host.</p> </li> <li> <p>Efisiensi: Docker memungkinkan Anda untuk menjalankan lebih banyak aplikasi pada satu mesin tanpa mempengaruhi kinerja satu sama lain.</p> </li> </ol> <p>Dengan demikian, menginstall aplikasi di docker dapat memberikan banyak keuntungan dibandingkan menginstall aplikasi secara langsung pada windows.</p>"},{"location":"articles/posts/praktik-install-postgres-docker/#install-postgresql-menggunakan-docker-compose","title":"Install PostgreSQL menggunakan Docker Compose","text":"<p>Untuk langkah pertama disini saya membuat folder dan docker-compose nya:</p> <pre><code>lrmn7@Thinkpad-T460:~$ mkdir belajar-postgres\nlrmn7@Thinkpad-T460:~$ cd belajar-postgres\nlrmn7@Thinkpad-T460:~/belajar-postgres$ touch docker-compose.yml\nlrmn7@Thinkpad-T460:~/belajar-postgres$ sudo vim docker-compose.yml\n</code></pre> <p>Kemudian silahkan copy docker-compose dibawah ini <pre><code>version: '3'\nservices:\n  db:\n    image: postgres:latest\n    container_name: postgresql-compose\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgresql-volume:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=lrmn7\n      - POSTGRES_PASSWORD=secret\n      - POSTGRES_DB=postgresql-database\n    networks:\n      - postgresql-network\nvolumes:\n  postgresql-volume:\nnetworks:\n  postgresql-network:\n</code></pre></p> <p>Berikut penjelasan dari docker-compose diatas.</p> <p>File ini menjalankan sebuah container PostgreSQL yang memiliki nama \"postgresql-compose\", membuka port 5432, dan menyimpan data pada volume \"postgresql-volume\". Container ini juga memiliki beberapa environment variable seperti nama pengguna, password, dan nama database. Container ini tergabung dalam sebuah jaringan bernama \"postgresql-network\".</p> <pre><code>lrmn7@Thinkpad-T460:~/belajar-postgres$ docker-compose up\n</code></pre>"},{"location":"articles/posts/praktik-install-postgres-docker/#koneksi-postgresql-dengan-dbeaver","title":"Koneksi PostgreSQL dengan DBeaver","text":"<p>Setelah berhasil menjalankan Postgre, langkah selanjutnya adalah melakukan tes koneksi dari database ke DMBS yang digunakan yaitu DBeaver. Berikut langkahnya:</p> <ol> <li>Klik Create New Database Connection</li> <li>Kemudian pilih PostgreSQL dan lik next</li> <li>Kemudian isi beberapa kolom berikut ini:</li> <li>Host: 127.0.0.1</li> <li>Port: 5432</li> <li>Database: postgresql-database</li> <li>Username: lrmn7</li> <li>Password: secret</li> <li>Klik Test Connection, jika sukses silahkan klik finish.    </li> <li>Jika sudah bisa dilakukan import sample database yang ada pada tutorial di link ini: Sample database</li> <li>Untuk stop container bisa dilakukan CTRL + C di 'docker-compose up' sebelumnya.</li> </ol> <p> Catatan : Penggunaan docker volume akan menyimpan database yang sudah di eksekusi atau import ketika docker container di stop, sehingga ketika ingin menjalankan kembali PostgreSQL bisa dilakukan <code>docker-compose up</code> kembali tanpa takut data hilang. </p>"},{"location":"articles/posts/praktik-install-wordpress-docker/","title":"Praktik install wordpress docker","text":"<p>Last updated: June 23, 2020</p> <p>Untuk membuat container WordPress dan menghubungkannya ke database MariaDB dengan spesifikasi terbatas, Anda dapat mengikuti langkah-langkah berikut:</p> <ol> <li> <p>Instal Docker pada sistem Anda.</p> </li> <li> <p>Jalankan perintah berikut untuk membuat container MariaDB dengan sumber daya terbatas: <pre><code>docker run --name mariadb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=password -p 3306:3306 --memory=\"256m\" --memory-swap=\"512m\" --cpu-shares=512 --cpus=1 -d mariadb:latest\n</code></pre> Ini akan membuat container MariaDB dengan nama <code>mariadb</code>, kata sandi root <code>password</code>, dan database bernama <code>wordpress</code> dengan pengguna bernama <code>wordpress</code> dan kata sandi <code>password</code>. Ini juga akan membatasi container hingga 256 MB RAM dan 1 CPU core.</p> </li> <li> <p>Jalankan perintah berikut untuk membuat container WordPress dan menghubungkannya ke container MariaDB: <pre><code>docker run --name wordpress --link mariadb:mysql -p 80:80 -e WORDPRESS_DB_HOST=mysql:3306 -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=password -e WORDPRESS_DB_NAME=wordpress --memory=\"256m\" --memory-swap=\"512m\" --cpu-shares=512 --cpus=1 -d wordpress:latest\n</code></pre> Ini akan membuat container WordPress dengan nama <code>wordpress</code> dan menghubungkannya ke container MariaDB menggunakan flag tautan. Ini juga akan mengatur host database, pengguna, kata sandi, dan nama dalam variabel lingkungan WordPress dan membatasi kontainer hingga 256 MB RAM dan 1 CPU core.</p> </li> <li> <p>Akses situs web WordPress dengan mengunjungi http://localhost di browser web Anda untuk menyelesaikan proses instalasi WordPress.</p> </li> </ol>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/","title":"Tutorial adhoc command ansible","text":"<p>Last updated: June 22, 2020</p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#apa-itu-adhoc-command","title":"Apa itu Adhoc Command ?","text":"<p>Adhoc command di Ansible adalah perintah yang dapat Anda jalankan dari command line interface (CLI) untuk melakukan tugas-tugas tertentu pada host atau grup host dalam inventory. Adhoc command terdiri dari modul Ansible yang dijalankan untuk melakukan tugas-tugas seperti menjalankan perintah shell, menginstal paket, memeriksa status service, menyalin file, dan banyak lagi.</p> <p>Adhoc command sangat berguna dalam situasi ketika Anda perlu melakukan tugas yang cepat dan sederhana pada beberapa host tanpa harus membuat playbook Ansible. </p> <p>Misalnya, Anda dapat menggunakan adhoc command untuk memeriksa status service pada beberapa host dalam inventory, melakukan update dan upgrade pada host, atau menjalankan perintah shell pada satu host atau semua host dalam inventory.</p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#kapan-adhoc-command-digunakan","title":"Kapan Adhoc Command digunakan ?","text":"<p>Adhoc command di Ansible diperlukan dalam beberapa situasi, di antaranya:</p> <ol> <li> <p>Ketika Anda perlu melakukan tugas cepat dan sederhana pada beberapa host dalam inventory, tetapi tidak memerlukan playbook Ansible yang lengkap.</p> </li> <li> <p>Ketika Anda ingin menguji tugas tertentu pada satu host atau beberapa host dalam inventory untuk memastikan bahwa semuanya berfungsi dengan baik sebelum Anda menggunakannya dalam playbook Ansible.</p> </li> <li> <p>Ketika Anda ingin memeriksa keadaan suatu host atau beberapa host dalam inventory untuk debugging atau eksperimen.</p> </li> <li> <p>Ketika ada perubahan yang harus dilakukan pada lingkungan Anda dan Anda memerlukan tindakan cepat untuk menangani masalah atau keadaan darurat.</p> </li> <li> <p>Ketika Anda perlu melakukan tugas-tugas yang tidak dapat dilakukan dengan playbook Ansible, seperti menjalankan perintah shell, menginstal paket, memeriksa status service, menyalin file, dan lain sebagainya.</p> </li> </ol> <p>Adhoc command sangat berguna dalam situasi-situasi di atas, karena memungkinkan Anda untuk melakukan tugas-tugas sederhana dengan cepat dan efisien, tanpa harus membuat playbook Ansible yang lengkap dan terstruktur. </p> <p>Dengan menggunakan adhoc command, Anda dapat menghemat waktu dan upaya, dan memungkinkan Anda untuk dengan cepat mengambil tindakan ketika ada masalah atau perubahan yang harus dilakukan pada lingkungan Anda.</p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#persiapan-sever-controller-ansible-2-managed-server","title":"Persiapan Sever Controller Ansible &amp; 2 Managed Server","text":"<p>Disini saya sudah menyiapkan 3 buah server, 1 server sebagi controller dan 2 sebagai managed server yang nanti beberapa job/task dijalankan dari controller. Server saya buat dengan Vagrant, ada di tutorial saya sebelumnya. Berikut konfigurasi Vagrant yang saya buat. </p> <pre><code>Vagrant.configure(\"2\") do |config|\nconfig.vm.box = \"ubuntu/jammy64\"\nconfig.vm.boot_timeout = 900\n\nconfig.vm.provider \"virtualbox\" do |vb|\nvb.gui = false\nvb.memory = \"1024\"\nvb.cpus = 1\nvb.linked_clone = true\nend\n\nconfig.vm.define \"ubuntu-controller\" do |controller|\ncontroller.vm.network :private_network, ip: \"10.10.10.10\"\nend\nconfig.vm.define \"ubuntu-managed1\" do |managed1|\nmanaged1.vm.network :private_network, ip: \"10.10.10.20\"\nend\nconfig.vm.define \"ubuntu-managed2\" do |managed2|\nmanaged2.vm.network :private_network, ip: \"10.10.10.30\"\nend\n\nend\n</code></pre> <p>Kemudian dari tiap-tiap user, sudah diberikan hak akses root dan dapat login antar server secara passwordless. Tutorial juga ada di artikel sebelumnya.</p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#konfigurasi-ansible-inventory","title":"Konfigurasi Ansible Inventory","text":"<p>Ansible Inventory adalah file konfigurasi yang digunakan untuk mengelompokkan host yang akan dikelola oleh Ansible. File ini berisi daftar host yang dikelola, grup host, dan variabel yang terkait dengan host atau grup host. Ansible Inventory juga digunakan untuk menentukan bagaimana Ansible akan menghubungi host yang dikelola, seperti melalui SSH atau WinRM.</p> <p>Kemudian tiap server sudah saya tambahkan ke inventory ansiblenya, berikut detailnya: <pre><code>ubuntu-managed1\n\n[belajaransible]\nubuntu-managed2\n</code></pre></p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#contoh-penggunaan-adhoc-command-ansible","title":"Contoh Penggunaan Adhoc Command Ansible","text":"<p>Berikut dibawah ini kami berikan beberapa contoh adhoc command di ansible yang simple:</p>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#1-menjalankan-perintah-shell-pada-satu-atau-beberapa-host","title":"1. Menjalankan perintah shell pada satu atau beberapa host","text":"<p>Anda perlu mengganti  atau  dengan nama host atau grup host yang ingin Anda gunakan, dan ls -al dengan perintah shell yang sesuai. <pre><code>ansible &lt;nama_host&gt; -a 'ls -al'\nansible &lt;nama_grup_host&gt; -a 'ls -al'\n</code></pre>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#2-melakukan-ping-ke-satu-atau-beberapa-host-untuk-memeriksa-apakah-host-terhubung-atau-tidak","title":"2. Melakukan ping ke satu atau beberapa host untuk memeriksa apakah host terhubung atau tidak","text":"<p>Anda perlu mengganti  atau  dengan nama host atau grup host yang ingin Anda gunakan. <pre><code>ansible &lt;nama_host&gt; -m ping\nansible &lt;nama_grup_host&gt; -m ping\n</code></pre>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#3-menyalin-file-dari-local-ke-remote-host","title":"3. Menyalin file dari local ke remote host:","text":"<p>Anda perlu mengganti  atau , , dan  dengan nilai yang sesuai untuk lingkungan Anda. <pre><code>ansible &lt;nama_host&gt; -m copy -a 'src=&lt;path_to_local_file&gt; dest=&lt;path_to_remote_file&gt;'\nansible &lt;nama_grup_host&gt; -m copy -a 'src=&lt;path_to_local_file&gt; dest=&lt;path_to_remote_file&gt;'\n</code></pre> <p>Pada adhoc command Ansible, src dan dest adalah dua parameter yang digunakan pada modul copy untuk menentukan sumber (source) dan tujuan (destination) dari file yang akan dicopy.</p> <ul> <li> <p>Secara rinci, src adalah lokasi file yang ingin dicopy, bisa berupa path absolut atau path relatif terhadap direktori kerja saat ini. Parameter src pada modul copy dapat digunakan untuk menentukan file yang akan dicopy dari host yang menjalankan Ansible (control node) ke host target, atau sebaliknya.</p> </li> <li> <p>Sedangkan dest adalah lokasi tujuan tempat file akan disalin. Lokasi dest dapat berupa path absolut atau path relatif pada host target. Dalam contoh adhoc command yang telah diberikan sebelumnya, src diisi dengan lokasi file yang ingin dicopy, sedangkan dest diisi dengan lokasi tempat file akan dicopy.</p> </li> </ul>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#4-menginstal-paket-pada-satu-atau-beberapa-host","title":"4. Menginstal paket pada satu atau beberapa host:","text":"<p>Anda perlu mengganti  atau  dan  dengan nilai yang sesuai untuk lingkungan Anda. <pre><code>ansible &lt;nama_host&gt; -m apt -a 'name=&lt;nama_paket&gt; state=latest'\nansible &lt;nama_grup_host&gt; -m apt -a 'name=&lt;nama_paket&gt; state=latest'\n</code></pre>"},{"location":"articles/posts/tutorial-adhoc-command-ansible/#5-memeriksa-status-service-pada-satu-atau-beberapa-host","title":"5. Memeriksa status service pada satu atau beberapa host:","text":"<p>Anda perlu mengganti  atau  dan  dengan nilai yang sesuai untuk lingkungan Anda. <pre><code>ansible &lt;nama_host&gt; -m systemd -a 'name=&lt;nama_service&gt; state=started'\nansible &lt;nama_grup_host&gt; -m systemd -a 'name=&lt;nama_service&gt; state=started'\n</code></pre> <p>Pada contoh-contoh adhoc command Ansible di atas, state adalah salah satu parameter yang digunakan untuk menentukan keadaan atau kondisi yang ingin dicapai oleh modul Ansible yang digunakan.</p> <p>Misalnya, pada contoh keempat di atas, <code>state=latest</code> pada modul apt digunakan untuk memastikan bahwa paket yang diinstal pada host adalah versi terbaru yang tersedia. </p> <p>Sedangkan pada contoh kelima, <code>state=started</code> pada modul systemd digunakan untuk memastikan bahwa service yang ditentukan dalam kondisi <code>started</code> atau berjalan.</p> <p>Ada beberapa nilai state yang dapat digunakan dalam modul-modul Ansible, antara lain: * present: Menunjukkan bahwa suatu objek (misalnya file, direktori, atau paket) harus ada pada host yang ditargetkan. * absent: Menunjukkan bahwa suatu objek harus tidak ada pada host yang ditargetkan. * latest: Menunjukkan bahwa suatu paket harus diperbarui ke versi terbaru yang tersedia. * started: Menunjukkan bahwa suatu service harus berjalan atau dijalankan. * stopped: Menunjukkan bahwa suatu service harus dihentikan atau berhenti. Pilihan state yang tepat akan tergantung pada tugas atau tujuan yang ingin dicapai oleh adhoc command Ansible yang sedang dilakukan.</p>"},{"location":"articles/posts/tutorial-ansible-loop/","title":"Tutorial ansible loop","text":"<p>Last updated: July 10, 2020</p>"},{"location":"articles/posts/tutorial-ansible-loop/#ansible-loop","title":"Ansible Loop","text":"<p>Looping dalam Ansible memungkinkan Anda untuk mengulangi serangkaian tugas atau perintah terhadap satu atau lebih host dalam inventory Anda. Ini memungkinkan Anda untuk melakukan operasi yang sama pada banyak host sekaligus dengan mudah.</p> <p>Kegunaan dari looping dalam Ansible sangat beragam. Beberapa contoh penggunaan yang umum termasuk:</p> <ul> <li>Konfigurasi massal: Anda dapat menggunakan looping untuk mengonfigurasi banyak host sekaligus dengan konfigurasi yang sama.</li> </ul> <pre><code>---\n- name: Konfigurasi Massal\n  hosts: all\n  tasks:\n    - name: Konfigurasi file konfigurasi\n      template:\n        src: template.conf.j2\n        dest: /etc/myapp/config.conf\n      loop:\n        - host1\n        - host2\n        - host3\n</code></pre> <ul> <li>Penyebaran aplikasi: Anda dapat menggunakan looping untuk mendistribusikan dan menginstal aplikasi pada beberapa host dalam waktu yang singkat.</li> </ul> <pre><code>---\n- name: Penyebaran Aplikasi\n  hosts: app_servers\n  tasks:\n    - name: Unduh aplikasi dari repositori\n      git:\n        repo: https://github.com/myapp.git\n        dest: /opt/myapp\n      loop:\n        - app_server1\n        - app_server2\n        - app_server3\n</code></pre> <ul> <li>Pemeliharaan infrastruktur: Anda dapat menggunakan looping untuk melakukan tugas pemeliharaan rutin, seperti pembaruan perangkat lunak atau pemantauan status host.</li> </ul> <p></p> <p>Dengan fitur looping yang kuat ini, Ansible memungkinkan Anda untuk mengotomatisasi tugas yang kompleks dan mengelola infrastruktur dengan efisiensi yang tinggi.</p>"},{"location":"articles/posts/tutorial-ansible-loop/#studi-kasus-ansible-loop","title":"Studi kasus ansible loop","text":""},{"location":"articles/posts/tutorial-ansible-loop/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible.</p> <pre><code>lrmn7@ubuntu-controller:~$ mkdir ansible-loop\nlrmn7@ubuntu-controller:~$ cd ansible-loop\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible</p> <pre><code>vim inventory\n</code></pre> <pre><code>[managed]\nubuntu-managed\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server:</p> <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-daftar-username","title":"Membuat daftar username","text":"<p>Pertama kita buat terlebih dahulu foldernya <code>group_vars</code> kemudian silahkan buat file <code>user-devops.yml</code> dan isi filenya seperti dibawah ini</p> <ul> <li>\ud83d\udcc1group_vars</li> <li>\ud83d\udcc4user-devops.yml</li> </ul> <pre><code>list_user_dev_managed:\n  - dev1\n  - dev2\n  - dev3\n  - dev4\n  - dev5\n\nlist_user_ops_managed:\n  - ops1\n  - ops2\n  - ops3\n  - ops4\n  - ops5\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-secret-file","title":"Membuat secret file","text":"<p>Silahkan buat file <code>secret.yml</code> dan isi username dan password kalian</p> <pre><code>pw: satu2tiga\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#encrypt-file-secret","title":"Encrypt file secret","text":"<p>Selanjutnya adalah melakukan encrypt file secret yang sebelumnya dibuat, silahkan ketikan command dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-loop$ ansible-vault encrypt secret.yml\nNew Vault password: satu2tiga\nConfirm New Vault password:  satu2tiga\nEncryption successful\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Yang terakhir adalah membuat playbooknya, bisa ikuti scriptnya seperti dibawah ini</p> <pre><code>vi devops-loop.yml\n</code></pre> <p></p>"},{"location":"articles/posts/tutorial-ansible-loop/#jalankan-playbook","title":"Jalankan playbook","text":"<p>Sebelum menjalankan playbooknya, kalian juga bisa membuat vault password seperti dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-loop$ ansible-playbook --syntax-check --ask-vault-pass devops-loop.yml\nVault password: satu2tiga\n\nplaybook: devops-loop.yml\nlrmn7@ubuntu-controller:~/ansible-loop$ echo \"satu2tiga\" &gt; rahasia\nlrmn7@ubuntu-controller:~/ansible-loop$ chmod 600 rahasia\n</code></pre> <p>Masukan <code>rahasia</code> sebagai vault passwordnya, sehingga kita tidak perlu memasukan kata sandi ketika menjalankan ansible-nya</p> <pre><code>ansible-playbook --vault-password-file=rahasia devops-loop.yml\n</code></pre> <p>Jika berhasil maka ansible akan menampilkan pesan seperti dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-loop$ ansible-playbook --vault-password-file=rahasia devops-loop.yml\n\nPLAY [Create user account ubuntu-managed] *******************************************************************************************************\n\nTASK [Gathering Facts] **************************************************************************************************************************\nok: [ubuntu-managed]\n\nTASK [Creating user dev1-5] *********************************************************************************************************************\n[DEPRECATION WARNING]: Encryption using the Python crypt module is deprecated. The Python crypt module is deprecated and will be removed from\nPython 3.13. Install the passlib library for continued encryption functionality. This feature will be removed in version 2.17. Deprecation\nwarnings can be disabled by setting deprecation_warnings=False in ansible.cfg.\nchanged: [ubuntu-managed] =&gt; (item=dev1)\nchanged: [ubuntu-managed] =&gt; (item=dev2)\nchanged: [ubuntu-managed] =&gt; (item=dev3)\nchanged: [ubuntu-managed] =&gt; (item=dev4)\nchanged: [ubuntu-managed] =&gt; (item=dev5)\n\nTASK [Creating user ops1-5] *********************************************************************************************************************\n[DEPRECATION WARNING]: Encryption using the Python crypt module is deprecated. The Python crypt module is deprecated and will be removed from\nPython 3.13. Install the passlib library for continued encryption functionality. This feature will be removed in version 2.17. Deprecation\nwarnings can be disabled by setting deprecation_warnings=False in ansible.cfg.\nchanged: [ubuntu-managed] =&gt; (item=ops1)\nchanged: [ubuntu-managed] =&gt; (item=ops2)\nchanged: [ubuntu-managed] =&gt; (item=ops3)\nchanged: [ubuntu-managed] =&gt; (item=ops4)\nchanged: [ubuntu-managed] =&gt; (item=ops5)\n\nPLAY RECAP **************************************************************************************************************************************\nubuntu-managed             : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-loop/#mengecek-semua-login-username-dengan-sshpass","title":"Mengecek semua login username dengan sshpass","text":"<p>Pertama install terlebih dahulu sshpass <code>sudo apt install sshpass</code></p> <p>Kemudian buat script dibawah ini</p> <pre><code>vi test-user.sh\n</code></pre> <p>Kemudian masukan filenya dibawah ini</p> <pre><code>#!/bin/bash\n\nusers=(\"dev1\" \"dev2\" \"dev3\" \"dev4\" \"dev5\" \"ops1\" \"ops2\" \"ops3\" \"ops4\" \"ops5\")\nhostname=\"ubuntu-managed\"\npassword=\"satu2tiga\"\n\nfor user in \"${users[@]}\"\ndo\nsshpass -p \"$password\" ssh \"$user@$hostname\" whoami\ndone\n</code></pre> <p>Setelah itu berikan izin untuk mengeksekusi script dengan command dibawah ini:</p> <pre><code>chmod +x test-user.sh\n</code></pre> <p>Terakhir jalankan script tersebut, jika berhasil akan tampil seperti dibawah</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-loop$ ./test-user.sh\ndev1\ndev2\ndev3\ndev4\ndev5\nops1\nops2\nops3\nops4\nops5\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/","title":"Tutorial ansible roles","text":"<p>Last updated: April 16, 2020</p>"},{"location":"articles/posts/tutorial-ansible-roles/#apa-itu-ansible-role","title":"Apa itu Ansible Role ?","text":"<p>Di Ansible, \"roles\" merujuk pada unit organisasi yang digunakan untuk mengelompokkan dan mengatur konfigurasi, tugas, dan file yang terkait dalam lingkungan Ansible. Roles digunakan untuk memecah konfigurasi menjadi komponen yang lebih kecil dan dapat digunakan kembali, sehingga mempermudah pengelolaan konfigurasi sistem yang kompleks.</p>"},{"location":"articles/posts/tutorial-ansible-roles/#kegunaan-ansible-role","title":"Kegunaan Ansible Role","text":"<p>Kegunaan Roles di Ansible adalah sebagai berikut:</p> <ol> <li> <p>Modularitas: Roles memungkinkan Anda untuk membagi konfigurasi sistem menjadi bagian-bagian yang lebih kecil dan terorganisir. Setiap role dapat mewakili fungsionalitas atau peran yang berbeda dalam sistem, seperti web server, database server, atau load balancer. Hal ini membuat konfigurasi lebih mudah diorganisir, dipelihara, dan dimodifikasi.</p> </li> <li> <p>Reusabilitas: Roles memungkinkan penggunaan kembali konfigurasi yang telah ditentukan. Dengan memisahkan peran dan tanggung jawab masing-masing role, Anda dapat dengan mudah menggabungkan dan menerapkan role yang sama ke host yang berbeda dalam infrastruktur Anda. Ini membantu menghemat waktu dan upaya dalam pengelolaan konfigurasi.</p> </li> <li> <p>Pembagian tanggung jawab: Roles memungkinkan tim yang bekerja sama membagi tanggung jawab dalam pengembangan konfigurasi. Setiap anggota tim dapat bertanggung jawab atas pengembangan, pemeliharaan, dan pengujian role tertentu. Dengan demikian, memudahkan kolaborasi dan mempercepat pengembangan infrastruktur.</p> </li> <li> <p>Pengorganisasian File: Roles membantu mengorganisasi file dan direktori yang terkait dengan konfigurasi sistem. Setiap role memiliki struktur direktori sendiri, termasuk file-file seperti tugas (tasks), template, file konfigurasi, modul, dan sebagainya. Hal ini membantu mengatur dan membedakan berbagai komponen konfigurasi dalam proyek Anda.</p> </li> </ol>"},{"location":"articles/posts/tutorial-ansible-roles/#studi-kasus-ansible-role","title":"Studi kasus ansible role","text":""},{"location":"articles/posts/tutorial-ansible-roles/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server yang akan di install Apache2. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/tutorial-ansible-roles/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible.</p> <pre><code>lrmn7@ubuntu-controller:~$ mkdir ansible-role\nlrmn7@ubuntu-controller:~$ cd ansible-role\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible</p> <pre><code>vim inventory\n</code></pre> <pre><code>[managed]\nubuntu-managed\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server:</p> <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\nremote_user = lrmn7\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/#membuat-roles","title":"Membuat roles","text":"<p>Silahkan buat folder roles dengan struktur file seperti dibawah ini</p> <ul> <li>\ud83d\udcc1roles</li> <li>\ud83d\udcc1files<ul> <li>\ud83d\udcc1html</li> <li>\ud83d\udcc4index.html</li> </ul> </li> <li>\ud83d\udcc1handlers</li> <li>\ud83d\udcc4main.yml</li> <li>\ud83d\udcc1tasks</li> <li>\ud83d\udcc4main.yml</li> <li>\ud83d\udcc1templates</li> <li>\ud83d\udcc4roles.conf.j2</li> </ul> <p>Berikut adalah isi file <code>roles/file/html/index.html</code></p> <pre><code>Belajar ansible roles\n</code></pre> <p>Kemudian, ini adalah isi file <code>roles/handlers/main.yml</code></p> <pre><code>---\n# handlers file for roles\n- name: restart apache2\n  service:\n    name: apache2\n    state: restarted\n</code></pre> <p>Selanjutnya, ini adalah isi file <code>roles/tasks/main.yml</code></p> <pre><code>- name: Ensure apache2 is installed\n  apt:\n    name: apache2\n    state: latest\n\n- name: Ensure apache2 is started and enabled\n  service:\n    name: apache2\n    state: started\n    enabled: true\n\n- name: Vhost file is installed\n  template:\n    src: roles/templates/roles.conf.j2\n    dest: /etc/apache2/sites-available/roles.conf\n    owner: root\n    group: root\n    mode: 0644\n\n- name: Enable vhost\n  command: a2ensite roles.conf\n  notify:\n    - restart apache2\n\n- name: HTML content is installed in managed hosts\n  copy:\n    src: roles/files/html/index.html\n    dest: \"/var/www/html/index.html\"\n</code></pre> <p>Langkah selanjutnya isi file <code>roles/templates/roles.conf.j2</code></p> <pre><code>&lt;VirtualHost *:80&gt;\nServerAdmin webmaster@roles.lrmn7\n    ServerName roles.lrmn7\n    ErrorLog ${APACHE_LOG_DIR}/roles.lrmn7-error.log\n    CustomLog ${APACHE_LOG_DIR}/roles.lrmn7-access.log combined\n    DocumentRoot /var/www/html/roles.lrmn7/\n\n    &lt;Directory /var/www/html/roles.lrmn7/&gt;\nOptions -Indexes +FollowSymLinks +Includes\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/#membuat-playbook-rolesyml","title":"Membuat playbook roles.yml","text":"<p>Silahkan buat file <code>roles.yml</code> dan isi seperti dibawah ini</p> <pre><code>- name: Use role playbook\n  hosts: managed\n  become: true\n  pre_tasks:\n    - name: pre_tasks message\n      debug:\n        msg: \"Ensure web server configuration.\"\n\n  roles:\n    - roles\n\n  post_tasks:\n    - name: post_tasks message\n      debug:\n        msg: \"Web server is configured.\"\n</code></pre> <p>Jika sudah semua, maka struktur direktorinya akan seperti ini</p> <ul> <li>\ud83d\udcc1roles</li> <li>\ud83d\udcc1files<ul> <li>\ud83d\udcc1html</li> <li>\ud83d\udcc4index.html</li> </ul> </li> <li>\ud83d\udcc1handlers<ul> <li>\ud83d\udcc4main.yml</li> </ul> </li> <li>\ud83d\udcc1tasks<ul> <li>\ud83d\udcc4main.yml</li> </ul> </li> <li>\ud83d\udcc1templates<ul> <li>\ud83d\udcc4roles.conf.j2</li> </ul> </li> <li>\ud83d\udcc4ansible.cfg</li> <li>\ud83d\udcc4inventory</li> <li>\ud83d\udcc4roles.yml</li> </ul>"},{"location":"articles/posts/tutorial-ansible-roles/#jalankan-ansible-playbook","title":"Jalankan ansible playbook","text":"<p>Silahkan jalankan ansible playbook dengan mengetikan perintah</p> <pre><code>ansible-playbook roles.yml\n</code></pre> <p>Maka ansible akan menjalankannya</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-role$ ansible-playbook roles.yml\n\nPLAY [Use role playbook] ************************************************************************************************************************\n\nTASK [Gathering Facts] **************************************************************************************************************************\nok: [ubuntu-managed]\n\nTASK [pre_tasks message] ************************************************************************************************************************\nok: [ubuntu-managed] =&gt; {\n\"msg\": \"Ensure web server configuration.\"\n}\n\nTASK [roles : Ensure apache2 is installed] ******************************************************************************************************\nok: [ubuntu-managed]\n\nTASK [roles : Ensure apache2 is started and enabled] ********************************************************************************************\nok: [ubuntu-managed]\n\nTASK [roles : Vhost file is installed] **********************************************************************************************************\nok: [ubuntu-managed]\n\nTASK [roles : Enable vhost] *********************************************************************************************************************\nchanged: [ubuntu-managed]\n\nTASK [roles : HTML content is installed in managed hosts] ***************************************************************************************\nok: [ubuntu-managed]\n\nRUNNING HANDLER [roles : restart apache2] *******************************************************************************************************\nchanged: [ubuntu-managed]\n\nTASK [post_tasks message] ***********************************************************************************************************************\nok: [ubuntu-managed] =&gt; {\n\"msg\": \"Web server is configured.\"\n}\n\nPLAY RECAP **************************************************************************************************************************************\nubuntu-managed             : ok=9    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-roles/#cek-server-ubuntu-managed","title":"Cek server ubuntu-managed","text":"<p>Langkah terakhir silahkan ketikan perintah</p> <pre><code>curl ubuntu-managed\n</code></pre> <p>Jika tampil seperti dibawah maka tutorial kali ini berhasil</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-role$ curl ubuntu-managed\nBelajar ansible roles\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/","title":"Tutorial ansible secret","text":"<p>Last updated: June 12, 2020</p>"},{"location":"articles/posts/tutorial-ansible-secret/#apa-itu-ansible-secret","title":"Apa itu Ansible Secret ?","text":"<p>Ansible Secret adalah sebuah fitur yang memungkinkan Anda untuk mengelola dan menggunakan data rahasia secara aman dalam konfigurasi dan tugas Ansible. Dalam konteks Ansible, data rahasia biasanya mencakup kata sandi, kunci SSH, sertifikat, token API, atau data sensitif lainnya yang tidak boleh terlihat oleh semua orang yang memiliki akses ke konfigurasi atau playbook Ansible Anda.</p>"},{"location":"articles/posts/tutorial-ansible-secret/#fungsikegunaan-ansible-secret","title":"Fungsi/Kegunaan Ansible Secret","text":"<p>Kegunaan utama dari Ansible Secret adalah untuk menjaga kerahasiaan data sensitif saat melakukan otomatisasi dengan Ansible. Dengan menggunakan Ansible Secret, Anda dapat menyimpan data rahasia secara terenkripsi dan menggunakannya dalam playbook Anda tanpa harus mengeksposnya secara langsung di dalam file konfigurasi. Ini membantu melindungi informasi sensitif dari akses yang tidak sah atau penyalahgunaan.</p> <p>Ansible Secret memanfaatkan enkripsi simetris menggunakan kunci enkripsi yang dikelola oleh Ansible Vault. Ansible Vault adalah utilitas bawaan dalam Ansible yang memungkinkan Anda membuat file terenkripsi yang berisi data rahasia. Anda dapat menggunakan Ansible Vault untuk membuat, mengedit, dan membuka file-file ini menggunakan kata sandi atau kunci enkripsi.</p>"},{"location":"articles/posts/tutorial-ansible-secret/#studi-kasus-ansible-secret","title":"Studi kasus ansible secret","text":""},{"location":"articles/posts/tutorial-ansible-secret/#prasyarat","title":"Prasyarat","text":"<p>Sebelum masuk ke materi ini, pastikan sudah mengintsall ansible dan menyiapkan setidaknya 2 server 1 sebagai controller dan 1 sebagai managed server. Saya sudah menyiapkan server dengan menggunakan Vagrant, kalian bisa ikuti di materi sebelumnya.</p>"},{"location":"articles/posts/tutorial-ansible-secret/#membuat-working-direktori","title":"Membuat Working direktori","text":"<p>Sebelum memulai, pertama buat terlebih dahulu direktori yang akan digunakan sebagai tempat untuk menyimpan beberapa konfigurasi ansible.</p> <pre><code>lrmn7@ubuntu-controller:~$ mkdir ansible-secret\nlrmn7@ubuntu-controller:~$ cd ansible-secret\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#membuat-inventory-ansible","title":"Membuat inventory ansible","text":"<p>Kemudian buat inventory ansible</p> <pre><code>vim inventory\n</code></pre> <pre><code>[managed]\nubuntu-managed\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#membuat-konfigurasi-ansible","title":"Membuat konfigurasi ansible","text":"<p>Silahkan buat konfigurasi ansible sesuai dibawah ini, pastikan usernya menyesuaikan user kalian yang sudah diberi hak akses sudo baik di controller atau managed server:</p> <pre><code>vim ansible.cfg\n</code></pre> <pre><code>[defaults]\ninventory = ./inventory\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#membuat-secret-file","title":"Membuat secret file","text":"<p>Silahkan buat file <code>secret.yml</code> dan isi username dan password kalian</p> <pre><code>username: administrator\npw: satu2tiga\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#encrypt-file-secret","title":"Encrypt file secret","text":"<p>Selanjutnya adalah melakukan encrypt file secret yang sebelumnya dibuat, silahkan ketikan command dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-secret$ ansible-vault encrypt secret.yml\nNew Vault password: satu2tiga\nConfirm New Vault password:  satu2tiga\nEncryption successful\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#membuat-ansible-playbook","title":"Membuat ansible playbook","text":"<p>Yang terakhir adalah membuat playbooknya, bisa ikuti scriptnya seperti dibawah ini</p> <pre><code>vi secret-book.yml\n</code></pre> <p></p>"},{"location":"articles/posts/tutorial-ansible-secret/#jalankan-playbook","title":"Jalankan playbook","text":"<p>Sebelum menjalankan playbooknya, kalian juga bisa membuat vault password seperti dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-secret$ ansible-playbook --syntax-check --ask-vault-pass secret-book.yml\nVault password: satu2tiga\n\nplaybook: secret-book.yml\nlrmn7@ubuntu-controller:~/ansible-secret$ echo \"satu2tiga\" &gt; rahasia\nlrmn7@ubuntu-controller:~/ansible-secret$ chmod 600 rahasia\n</code></pre> <p>Masukan <code>rahasia</code> sebagai vault passwordnya, sehingga kita tidak perlu memasukan kata sandi ketika menjalankan ansible-nya</p> <pre><code>ansible-playbook --vault-password-file=rahasia secret-book.yml\n</code></pre> <p>Jika berhasil akan menampilkan seperti dibawah ini</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-secret$ ansible-playbook --vault-password-file=rahasia secret-book.yml\n\nPLAY [create user accounts for all our servers] *****************************************************************************************************\n\nTASK [Gathering Facts] ******************************************************************************************************************************\nok: [ubuntu-managed]\n\nTASK [Creating user from secret.yml] ****************************************************************************************************************\n[DEPRECATION WARNING]: Encryption using the Python crypt module is deprecated. The Python crypt module is deprecated and will be removed from Python\n 3.13. Install the passlib library for continued encryption functionality. This feature will be removed in version 2.17. Deprecation warnings can be\n disabled by setting deprecation_warnings=False in ansible.cfg.\nchanged: [ubuntu-managed]\n\nPLAY RECAP ******************************************************************************************************************************************\nubuntu-managed             : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n\nlrmn7@ubuntu-controller:~/ansible-secret$\n</code></pre>"},{"location":"articles/posts/tutorial-ansible-secret/#login-user-yang-sudah-dibuat","title":"Login user yang sudah dibuat","text":"<p>Untuk mengecek apakah kita berhasil membuat username dan password, kalian bisa mengeceknya dengan login user yang sudah dibuat tadi</p> <pre><code>lrmn7@ubuntu-controller:~/ansible-secret$ ssh administrator@ubuntu-managed\nadministrator@ubuntu-managed's password: satu2tiga\n</code></pre> <p>Jika berhasil, maka kalian akan masuk sebagai administrator</p> <pre><code>Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.15.0-69-generic x86_64)\n\n* Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Sat Jun 10 11:12:31 UTC 2023\n\nSystem load:  0.0390625         Processes:               94\nUsage of /:   4.6% of 38.70GB   Users logged in:         0\nMemory usage: 19%               IPv4 address for enp0s3: 10.0.2.15\n  Swap usage:   0%                IPv4 address for enp0s8: 10.10.10.22\n\n * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s\n   just raised the bar for easy, resilient and secure K8s cluster deployment.\n\n   https://ubuntu.com/engage/secure-kubernetes-at-the-edge\n\n * Introducing Expanded Security Maintenance for Applications.\n   Receive updates to over 25,000 software packages with your\n   Ubuntu Pro subscription. Free for personal use.\n\n     https://ubuntu.com/pro\n\nExpanded Security Maintenance for Applications is not enabled.\n\n33 updates can be applied immediately.\nTo see these additional updates run: apt list --upgradable\n\nEnable ESM Apps to receive additional future security updates.\nSee https://ubuntu.com/esm or run: sudo pro status\n\n\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\n\n$ whoami\nadministrator\n$ hostname\nubuntu-managed\n$ exit\n</code></pre>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/","title":"Tutorial connect ssh secara passwordless","text":"<p>Last updated: October 8, 2020</p>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#apa-itu-ssh","title":"Apa itu SSH ?","text":"<p>SSH adalah singkatan dari Secure Shell, yaitu protokol jaringan yang digunakan untuk mengamankan koneksi jaringan antara dua perangkat yang terhubung melalui jaringan yang tidak aman, seperti internet. SSH memungkinkan pengguna untuk mengakses dan mengendalikan perangkat jarak jauh secara aman dengan melakukan enkripsi data yang dikirimkan antara kedua perangkat.</p> <p>SSH banyak digunakan dalam dunia IT, terutama dalam mengakses dan mengelola server jarak jauh. Dalam konteks ini, SSH memungkinkan administrator server untuk melakukan tugas-tugas administratif pada server tanpa harus berada di lokasi fisik server tersebut. Dalam beberapa kasus, SSH juga digunakan untuk mengakses dan mengontrol perangkat lain seperti router dan switch jaringan.</p>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#bagaimana-ssh-bekerja","title":"Bagaimana SSH bekerja ?","text":"<p>SSH bekerja dengan menggunakan teknologi kriptografi untuk melindungi komunikasi antara kedua perangkat yang terhubung melalui jaringan. Kriptografi digunakan untuk menyandikan pesan yang dikirim antara kedua perangkat sehingga hanya penerima yang dituju yang dapat membaca dan memahami isi pesan tersebut. Ini membuat komunikasi antara kedua perangkat menjadi lebih aman, karena data yang ditransmisikan tidak dapat diakses oleh pihak lain yang tidak berwenang.</p> <p>Secara umum, proses kerja SSH adalah sebagai berikut:</p> <ol> <li> <p>Klien SSH (biasanya program seperti PuTTY atau OpenSSH) meminta koneksi ke server SSH dengan menggunakan nama host dan port.</p> </li> <li> <p>Server SSH memberikan respon dengan mengirimkan sertifikat digital, yang berisi kunci publik dan informasi lainnya yang diperlukan untuk melakukan enkripsi dan dekripsi data.</p> </li> <li> <p>Klien SSH memverifikasi sertifikat digital tersebut untuk memastikan bahwa koneksi yang dibuat benar-benar ke server yang dimaksudkan.</p> </li> <li> <p>Setelah sertifikat digital telah diverifikasi, klien SSH dan server SSH saling menukar kunci enkripsi, yang akan digunakan untuk mengamankan koneksi antara kedua perangkat.</p> </li> <li> <p>Setelah kunci enkripsi berhasil ditukar, koneksi antara klien SSH dan server SSH dianggap aman, dan keduanya dapat memulai pertukaran data yang dienkripsi.</p> </li> </ol> <p>Dengan cara ini, SSH memungkinkan pengguna untuk mengakses dan mengendalikan perangkat jarak jauh dengan cara yang aman dan terenkripsi, sehingga meminimalkan risiko penyadapan atau pemalsuan data oleh pihak yang tidak berwenang.</p>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#port-yang-digunakan-untuk-ssh","title":"Port yang digunakan untuk SSH","text":"<p>Port default yang digunakan untuk koneksi SSH adalah Port 22. Namun, port SSH dapat dikonfigurasi untuk menggunakan port yang berbeda jika diinginkan. Konfigurasi ini dilakukan di server SSH dan/atau di klien SSH yang digunakan untuk mengakses server tersebut.</p>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#informasi-antar-server","title":"Informasi antar server","text":"<p>Untuk bisa terhubung ke server, kita bisa menggunakan beberapa aplikasi pihak ketiga contohnya seperti Putty, MobaXterm, Termius dan lain sebagainya. Untuk terhubung ke server menggunakan SSH, server harus terlebih dahulu dizinkan aksesnya ke port 22, karena SSH dapat berjalan menggunakan port tersebut.</p> <p>Disini saya sudah menyiapkan 2 buah server yang saya buat dengan menggunakan Vagrant, tutorial bisa dicari diartikel sebelumnya. Berikut detail terkait 2 server tersebut:   * Server 1:     * username  : admin-node-1     * hostname  : ubuntu-node-1     * ip addres : 10.10.10.10     * password  : node1   * Server 2:     * username  : admin-node-2     * hostname  : ubuntu-node-2     * ip addres : 10.10.10.20     * password  : node2</p> <p>Perlu diingat, di dua sever diatas autentikasi public saya aktifkan agar bisa login antar server menggunakan password di <code>/etc/ssh/sshd_config</code> sebagai contoh pembelajaran.</p>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#membuat-ssh-keygen","title":"Membuat SSH Keygen","text":"<p>Berikut adalah langkah-langkah untuk membuat SSH keygen agar bisa mengakses ke server:</p> <ol> <li> <p>Buka terminal atau command prompt di komputer Anda.</p> </li> <li> <p>Ketik perintah berikut untuk memulai pembuatan kunci SSH keygen: <pre><code>ssh-keygen -t rsa\n</code></pre> Perintah ini akan membuat kunci SSH dengan algoritma enkripsi RSA.</p> </li> <li> <p>Anda akan diminta untuk menentukan lokasi penyimpanan kunci SSH. Anda dapat menekan tombol Enter untuk menggunakan lokasi default atau memilih lokasi penyimpanan yang berbeda dengan mengetikkan lokasi yang diinginkan.</p> </li> <li> <p>Kemudian, Anda akan diminta untuk memasukkan passphrase untuk kunci SSH. Passphrase adalah kata sandi yang digunakan untuk melindungi kunci SSH. Anda dapat memasukkan passphrase atau menekan tombol Enter untuk tidak menggunakan passphrase.</p> </li> <li> <p>Kunci SSH publik dan pribadi akan dibuat di lokasi yang Anda pilih pada langkah ke-3. Kunci publik akan disimpan di file dengan ekstensi .pub dan kunci pribadi akan disimpan di file tanpa ekstensi.</p> </li> </ol>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#copy-key-ke-server-tujuan","title":"Copy key ke server tujuan","text":"<ol> <li>Selanjutnya, kunci publik yang baru dibuat perlu disalin ke server SSH yang akan diakses. Anda dapat menggunakan perintah berikut untuk menyalin kunci publik ke server: <pre><code>ssh-copy-id username@alamat_ip_server\n</code></pre></li> <li> <p>Ganti username dengan nama pengguna Anda pada server dan alamat_ip_server dengan alamat IP server yang akan diakses.</p> </li> <li> <p>Anda akan diminta untuk memasukkan kata sandi untuk akun pada server SSH. Setelah berhasil memasukkan kata sandi, kunci publik Anda akan disalin ke file authorized_keys pada server.</p> </li> <li> <p>Jika berhasil maka akan tampil seperti ini:</p> </li> </ol> <pre><code>admin-node-1@ubuntu-node-1:~$ ssh-copy-id admin-node-2@10.10.10.20\n/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/admin-node-1/.ssh/id_rsa.pub\"\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nadmin-node-2@10.10.10.20's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'admin-node-2@10.10.10.20'\"\nand check to make sure that only the key(s) you wanted were added.\n\nadmin-node-1@ubuntu-node-1:~$\n</code></pre> <pre><code>admin-node-1@ubuntu-node-1:~$ ssh admin-node-2@10.10.10.20\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-57-generic x86_64)\n\n* Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Wed Feb 15 22:39:19 UTC 2023\n\nSystem load:  0.0029296875      Processes:               111\nUsage of /:   4.8% of 38.70GB   Users logged in:         0\nMemory usage: 19%               IPv4 address for enp0s3: 10.0.2.15\n  Swap usage:   0%                IPv4 address for enp0s8: 10.10.10.20\n\n\n44 updates can be applied immediately.\n33 of these updates are standard security updates.\nTo see these additional updates run: apt list --upgradable\n\nFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings\n\n\nLast login: Wed Feb 15 22:33:09 2023 from 10.10.10.10\nadmin-node-2@ubuntu-node-2:~$\n</code></pre>"},{"location":"articles/posts/tutorial-connect-ssh-secara-passwordless/#mengecek-akses-server-tujuan","title":"Mengecek akses server tujuan","text":"<p>Untuk mengeceknya bisa dengan command dibawah ini: <pre><code>admin-node-1@ubuntu-node-1:~$ ssh admin-node-2@10.10.10.20 \"whoami;hostname\"\nadmin-node-2\nubuntu-node-2\nadmin-node-1@ubuntu-node-1:~$\n</code></pre></p> <p>Jika menampilkan user dan hostname, maka sebenarnya kita sudah bisa akses ssh ke server tanpa perlu password lagi atau passwordless.</p>"},{"location":"articles/posts/tutorial-git-github/","title":"Tutorial git github","text":"<p>Last updated: August 19, 2020</p>"},{"location":"articles/posts/tutorial-git-github/#apa-itu-git-dan-kenapa-developer-harus-menggunakan-git","title":"Apa itu Git dan kenapa developer harus menggunakan Git ?","text":"<p>Git bisa diibaratkan sebagai sebuah tombol <code>SAVE</code> yang sangat Epic untuk menyimpan file termasuk juga folder/direktori didalamnya. Secara resmi, Git adalah sebuah version control system.</p> <p>Jika kita menggunakan Teks Editor maka akan menyimpan atau mencatat semua kata yang ada dalam dokumen sebagai sebuah file tunggal, anda hanya akan diberikan satu saja catatan file, contohnya jika menggunakan Microsoft Word seperti Essay.docx, kecuali jika kalian membuat salinan seperti dalam mengerjakan skripsi:</p> <p>Bab1-revisi1.docx, Bab2-revisi2.docx, Bab1-final.docx</p> <p>Jika menyimpan dengan menggunakan Git maka akan menyimpan atau mencatat semua files dan folder dan juga menjaga mencatat history penyimpanan dalam setiap penyimpanan.</p> <p>Note: Git bisa dikatakan/diibaratkan seperti Checkpoint dalam Game.</p> <p>Sebagai seorang individual developer, Git dapat kamu gunakan untuk mereview bagaimana project berkembang dan dapat dengan mudah mengembalikan status file yang sudah tersimpan sebelumnya. Jika terhubung dengan internet, Git mengijinkan penggunanya untuk melakukan sharing dan kolaborasi dengan sesama developer seperti Github.</p>"},{"location":"articles/posts/tutorial-git-github/#perbedaan-antara-git-dan-teks-editor","title":"Perbedaan antara Git dan Teks Editor","text":"<ul> <li>Teks editor hanya bisa membuat dan menyimpan perubahan dalam satu buah file.</li> <li>Git melacak dan mecatat semua pergantian pada file dari waktu ke waktu.</li> </ul>"},{"location":"articles/posts/tutorial-git-github/#perbedaan-antara-git-dan-github","title":"Perbedaan antara Git dan Github","text":"<ul> <li> <p>Git bekerja pada level local atau kamu bisa menggunakannya tanpa perlu menggunakan internet. Semua perubahhan yang kamu buat tersimpan secara local (disimpan di komputer milikmu) dengan Git.</p> </li> <li> <p>Sedangkan Github bekerja pada level remote. Kalian harus melakukan push (upload) semua perubahan yang ada pada level local (dengan menggunakan Git) ke Github.</p> </li> </ul> <p>Jadi untuk bisa menggunakan Git harus menginstall terlebih dahulu, Git dapat kalian download di gitscm.com, sedangkan untuk bisa membuat repository ataupaun push ke Github kalian harus mendaftar pada websitenya di github.com</p>"},{"location":"articles/posts/tutorial-git-github/#cara-menginstall-git-pada-linux-windows","title":"Cara menginstall Git pada Linux &amp; Windows","text":"<p>Jika menggunakan sistem operasi Linux, kalian dapat menjalankan perintah: <pre><code>lrmn7@acer:~$ apt-get install git\n</code></pre></p> <p>Sedangkan, jika menggunakan Windows, caranya sangat mudah cukup download filenya dan jalankan installernya,klik next dan next sampai finish.</p> <p>Untuk memastikan apakah git sudah terinstall, silahkan ketikan <code>git --version</code> pada terminal ataupun cmd <pre><code>lrmn7@acer:~$ git --version\ngit version 2.7.4\n</code></pre></p>"},{"location":"articles/posts/tutorial-git-github/#konfigurasi-git-dan-github-pada-linux-windows","title":"Konfigurasi Git dan Github pada Linux &amp; Windows","text":""},{"location":"articles/posts/tutorial-git-github/#setup-git","title":"Setup Git","text":"<p>Agar Git berfungsi dan berjalan dengan baik, kita perlu memberi tahu siapa kita sehingga dapat menautkan pengguna Git lokal (Anda) ke GitHub. Saat mengerjakan projek dengan sebuah tim, ini berguna untuk memberitahukan info pada oranglain/anggota tim untuk melihat apa saja yang telah Anda commit dan perubahann setiap baris kode.</p> <p>Perintah di bawah ini akan mengkonfigurasi Git. Pastikan untuk memasukkan informasi Anda sendiri di dalam tanda kutip (tetap sertakan tanda kutip)!  <pre><code>lrmn7@acer:~$ git config --global user.name \"Your Name\"\nlrmn7@acer:~$ git config --global user.email \"yourname@example.com\"\n</code></pre> Untuk mengecek konfigurasi yang sudah dilakukan tadi bisa dengan mengetikan perintah ini pada terminal. <pre><code>lrmn7@acer:~$ git config --list\nuser.name=pseud0nyms\nuser.email=solihinlrmn70@gmail.com\ncolor.ui=auto\n</code></pre></p>"},{"location":"articles/posts/tutorial-git-github/#membuat-akun-github-atau-login-ke-github","title":"Membuat akun Github atau Login ke Github","text":"<p>Buka http://github.com dan silahkan buat akun disana. Jika kamu sudah memiliki akun, silahkan login ke Github. Kamu tidak perlu menggunakan alamat email yang sama dengan yang kamu gunakan sebelumnya, tetapi mungkin ini adalah ide yang baik untuk menggunakan akun yang sama agar tutorial ini semuanya berjalan dengan mudah.</p>"},{"location":"articles/posts/tutorial-git-github/#membuat-ssh-key","title":"Membuat SSH Key","text":"<p>SSH Key adalah <code>cryptographically secure identifier</code>. Ini seperti kata sandi yang sangat panjang yang digunakan untuk mengidentifikasi mesin/pc kalian. </p> <p>GitHub menggunakan SSH Key untuk memungkinkan kalian mengunggah ke repositori tanpa harus mengetikkan nama pengguna dan kata sandi Anda setiap saat.</p> <p>Note: Untuk SSH Key bersifat optional, tapi sangat direkomendasikan. Jika kalian tidak melakukan konfigurasi SSH Key kalian akan direpotkan untuk memasukan username dan password saat akan melakukan push pada repository.</p> <p>Pertama, kita perlu melihat apakah Anda sudah membuat SSH Key. Ketikkan ini ke terminal: <pre><code>lrmn7@acer:~$ ls ~/.ssh/id_rsa.pub\nNo such file or directory\n</code></pre> Jika pesan yang muncul berupa <code>No such file or directory</code>, berarti kalian belum membuat SSH Key. Jika pesan yang tampil seperti dibawah ini, berarti kalian sudah pernah membuat SSH Key sebelumnya, dan ikuti langkah selanjutnya. <pre><code>lrmn7@acer:~$ ls ~/.ssh/id_rsa.pub\n/home/lrmn7/.ssh/id_rsa.pub\n</code></pre> Untuk membuat SSH Key, jalankan perintah berikut di dalam terminal Anda. Perintah <code>-C</code> diikuti oleh alamat email digunakan untuk memastikan bahwa GitHub tahu siapa kamu. <pre><code>lrmn7@acer:~$ ssh-keygen -C yourname@example.com\n</code></pre>   * Terminal akan meminta kamu untuk menyimpan Key yang akan dibuat, cukup tekan \u21a9 Enter.   * Selanjutnya dia akan memintamu untuk memasukan kata sandi, silakan masukan jika mau, tetapi itu tidak wajib.</p>"},{"location":"articles/posts/tutorial-git-github/#menghuhbungkan-ssh-key-dengan-github","title":"Menghuhbungkan SSH Key dengan Github","text":"<p>Sekarang, kamu perlu memberi tahu GitHub SSH Key kamu sehingga bisa melakukan push (upload kode) tanpa harus mengetikkan kata sandi setiap saat.</p> <ol> <li> <p>Pertama, masuk ke GitHub dan klik gambar profil Anda di sudut kanan atas. Kemudian, klik Pengaturan di menu drop-down.</p> </li> <li> <p>Selanjutnya, di sisi kiri, klik <code>SSH and GPG Keys</code>. Kemudian, klik tombol hijau di sudut kanan atas yang bertuliskan <code>New SSH Key</code>. Beri nama SSH Key mu sesuatu yang cukup deskriptif untuk Anda ingat dari mana asalnya. Biarkan windows ini terbuka saat Anda melakukan langkah selanjutnya.</p> </li> <li> <p>Sekarang kamu perlu menyalin SSH Key. Untuk melakukan ini, kita akan menggunakan perintah yang disebut <code>cat</code> untuk membaca file ke konsol/terminal.   <pre><code>lrmn7@acer:~$ cat ~/.ssh/id_rsa.pub\n</code></pre></p> </li> <li> <p>Copy teks yang dimulai dengan ssh-rsa dan berakhir dengan alamat email milik mu.</p> </li> <li> <p>Sekarang, kembali ke GitHub dan Paste SSH Key pada kolom. Kemudian, klik <code>Add SSH Key</code>. Sekarang kamu sudah selesai! Kamu telah berhasil menambahkan SSH Key!</p> </li> </ol>"},{"location":"articles/posts/tutorial-git-github/#membuat-repository-github","title":"Membuat Repository Github","text":"<p>Sebelum membahas bagaimana cara mebuat repository, kita cari terlebih dahulu pengertian atau fungsi repository pada github ? Dibawah saya berikan penjelasannya yang saya kutip dari laman resmi github.</p> <p>Repositori bisa dikatakan/diibaratkan sebuah folder pada projek Anda. Repositori berisi semua file pada projek dan juga menyimpan setiap revisi/perubahan yang terjadi pada setiap file. Kalian pun dapat mendiskusikan dan mengelola projek secara bersama-sama di dalam repositori.</p> <ol> <li> <p>Silahkan login terlebih dahulu ke http://github.com, perhatikan menu atas sebelah kanan. Terdapat icon lonceng, tanda plus (+) &amp; avatar github. Klik tanda + dan pilih <code>New repository</code>.</p> </li> <li> <p>Pada bagian <code>Repository Name</code>, silahkan masukan nama repository yang akan kalian buat.</p> </li> <li> <p>Dibagian <code>Description</code>, silahkan deskripsikan projek yang akan kalian buat pada repository ini.</p> </li> <li> <p>Terdapat 2 jenis repository yang ada pada github, yaitu Public &amp; Private. Silahkan kalian pilih Public saja.</p> <ul> <li><code>Public</code>: Siapapun dapat melihat repository ini, dan kamu dapat memilih siapa yang boleh melakukan commit.</li> <li><code>Private</code>: Kamu bisa memilih siapa saja yang dapat melihat dan melakukan commit pada    repository ini. (Private banyak digunakan oleh startup atau perusahaan IT dalam mengerjakan sebuah projek.)</li> </ul> </li> <li> <p>Sampai sini repository berhasil kalian buat, selanjutnya saya akan bahas bagaimana dan langkah cara menambahkan file projek ke repository.</p> </li> </ol>"},{"location":"articles/posts/tutorial-git-github/#uploadpush-file-ke-repository-studi-kasus-sederhana","title":"Upload/Push File ke Repository (Studi Kasus Sederhana)","text":"<p>Disini saya akan menyiapkan sebuah file index.html yang saya simpan pada folder latihan-github, pada index.html bisa kalian isi hello world. </p> <p> (optional) : silahkan kalian skip tutorial dibawah pada bagian git status, git status hanya akan menampikan status pada file. </p> <p>Yang terpenting dalam melakukan tutorial ini yaitu, git init &gt; git add &gt; git commit &gt; git remote add origin link repository &gt; git push.</p> <p>git init dan git remote hanya dilakuan satu kali saja setiap membuat repository baru.</p> <p>Saya sudah masuk ke folder projek dan menyiapkan file index.html <pre><code>lrmn7@acer:~/latihan-github$ ls\nindex.html\n</code></pre></p> <p>Isi index.html <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Contoh isi index.html&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;p&gt;Saya sedang belajar latihan git &amp; github&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <ol> <li> <p>Pertama yang harus kalian lakukan adalah masuk kedalam folder projek yang kalian buat diatas via terminal.</p> </li> <li> <p>Kemudian ketikan <code>git init</code>. Hasilnya akan keluar seperti dibawah.       <pre><code>lrmn7@acer:~/latihan-github$ git init\nInitialized empty Git repository in /home/lrmn7/latihan-github/.git/\n</code></pre></p> </li> <li> <p>Selanjutnya kalian ketikan, <code>git status</code> untuk melihat status file tersebut apakah sudah di tambahkan/ada perubahan/dihapus/sudah di commit. Biasanya akan tampil teks berwarna <code>merah/hijau</code>. Akan tampil seperti dibawah.</p> <pre><code>lrmn7@acer:~/latihan-github$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\nindex.html\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> </li> <li> <p>Kemudian ketik <code>git add index.html</code></p> <pre><code>lrmn7@acer:~/latihan-github$ git add index.html\n</code></pre> </li> <li> <p>Ketikan lagi <code>git status</code> untuk melihat status yg terjadi pada file tersebut. Akan tampak diterminal file index.html berwarna hijau.</p> <pre><code>lrmn7@acer:~/latihan-github$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\nnew file:   index.html\n</code></pre> </li> <li> <p>Langkah selanjutnya adalah melakukan commit file (memberikan deskripsi/catatan singkat pada file yang baru ditambahkan dengan git add sebelumnya). Silahkan ketik <code>git commit -m \"upload pertama ke github\"</code>.</p> <pre><code>lrmn7@acer:~/latihan-github$ git commit -m \"upload pertama ke github\"\n[master (root-commit) 508c2ba] upload pertama ke github\n1 file changed, 12 insertions(+)\ncreate mode 100644 index.html\n</code></pre> </li> <li> <p>Ketik <code>git remote add origin git@github.com:pseud0nyms/belajar-github.git</code>. Silahkan teman-teman sesuaikan dengan link repository yang sudah teman-teman buat ya.</p> <pre><code>lrmn7@acer:~/latihan-github$ git remote add origin git@github.com:pseud0nyms/belajar-github.git\n</code></pre> </li> <li> <p>Langakah terakhir yaitu ketik <code>git push -u origin master</code>, git akan melakukan upload file. Silahkan kalian reload halaman reposiory yang ada pada browser.</p> <pre><code>lrmn7@acer:~/latihan-github$ git push -u origin master\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 357 bytes | 357.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:pseud0nyms/belajar-github.git\n* [new branch]      master -&gt; master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n</code></pre> </li> </ol> <p>Untuk tutorial lainnya terkait dengan git akan menyusul, silahkan liat beberapa perintah yang ada pada github disini: https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf</p>"},{"location":"articles/posts/tutorial-install-ansible/","title":"Tutorial install ansible","text":"<p>Last updated: September 27, 2020</p>"},{"location":"articles/posts/tutorial-install-ansible/#pengenalan-ansible","title":"Pengenalan Ansible","text":"<p>Ansible adalah alat open source yang digunakan untuk mengotomatisasi tugas-tugas IT seperti manajemen konfigurasi, penyebaran aplikasi, dan otomatisasi tugas-tugas rutin. Ansible memungkinkan Anda untuk mengotomatisasi tugas-tugas IT di seluruh lingkungan, dari server lokal hingga server cloud dan lingkungan hybrid.</p> <p>Dalam istilah yang lebih sederhana, Ansible adalah alat yang dapat membantu Anda mengelola banyak server secara efisien, sehingga Anda tidak perlu menghabiskan banyak waktu dan upaya dalam melakukan tugas-tugas manual seperti menginstal perangkat lunak, mengonfigurasi sistem, dan melakukan tugas-tugas serupa pada banyak server yang berbeda.</p>"},{"location":"articles/posts/tutorial-install-ansible/#persyaratan-instalasi-sistem","title":"Persyaratan instalasi sistem","text":"<p>Berikut adalah persyaratan sistem minimum yang diperlukan untuk menginstal Ansible:</p> <ol> <li> <p>Sistem Operasi: Ansible dapat diinstal pada sistem operasi berbasis Linux, macOS, atau Windows. Namun, sebagian besar pengguna menggunakan sistem operasi Linux, seperti Ubuntu, Debian, CentOS, atau Red Hat Enterprise Linux (RHEL).</p> </li> <li> <p>Python: Ansible ditulis dalam bahasa Python, sehingga Python harus terinstal pada sistem sebelum menginstal Ansible. Versi Python yang disarankan adalah Python 3.x. Namun, beberapa versi Ansible masih memerlukan Python 2.x.</p> </li> <li> <p>Memory: Ansible cukup ringan dan tidak memerlukan banyak sumber daya sistem. Namun, pastikan sistem memiliki setidaknya 1 GB RAM atau lebih.</p> </li> <li> <p>Storage: Ansible tidak memerlukan banyak penyimpanan, tetapi pastikan ada cukup ruang kosong pada sistem untuk menginstal dan menjalankan playbook.</p> </li> <li> <p>Akses SSH: Ansible menggunakan protokol SSH untuk berkomunikasi dengan host. Pastikan host yang akan dielola sudah memiliki akses SSH yang diperbolehkan.</p> </li> <li> <p>Akun dengan akses root atau sudo: Ansible memerlukan akses ke root atau sudo untuk menjalankan tugas-tugas manajemen konfigurasi pada host. Pastikan akun yang digunakan untuk mengelola host memiliki akses root atau sudo yang diperbolehkan.</p> </li> </ol> <p>Demikianlah persyaratan sistem minimum yang perlu dipenuhi sebelum menginstal Ansible pada sistem. Pastikan untuk memenuhi persyaratan ini agar dapat menginstal dan menjalankan Ansible dengan baik pada sistem.</p> <p>Selain itu disini saya sudah menyiapkan 3 buah server, 1 server sebagi controller dan 2 sebagai managed server yang nanti beberapa job/task dijalankan dari controller. Server saya buat dengan Vagrant, ada di tutorial saya sebelumnya. Berikut konfigurasi Vagrant yang saya buat. </p> <pre><code>Vagrant.configure(\"2\") do |config|\nconfig.vm.box = \"ubuntu/jammy64\"\nconfig.vm.boot_timeout = 900\n\nconfig.vm.provider \"virtualbox\" do |vb|\nvb.gui = false\nvb.memory = \"1024\"\nvb.cpus = 1\nvb.linked_clone = true\nend\n\nconfig.vm.define \"ubuntu-controller\" do |controller|\ncontroller.vm.network :private_network, ip: \"10.10.10.10\"\nend\nconfig.vm.define \"ubuntu-managed1\" do |managed1|\nmanaged1.vm.network :private_network, ip: \"10.10.10.20\"\nend\nconfig.vm.define \"ubuntu-managed2\" do |managed2|\nmanaged2.vm.network :private_network, ip: \"10.10.10.30\"\nend\n\nend\n</code></pre> <p>Kemudian dari tiap-tiap user, sudah diberikan hak akses root dan dapat login antar server secara passwordless. Tutorial juga ada di artikel sebelumnya.</p>"},{"location":"articles/posts/tutorial-install-ansible/#tutorial-install-ansible","title":"Tutorial Install Ansible","text":"<p>Masuk ke server controller dan ikuti tutorial dibawah ini.</p>"},{"location":"articles/posts/tutorial-install-ansible/#install-required-package-yang-diperlukan","title":"Install required package yang diperlukan","text":"<pre><code>sudo apt update\nsudo apt install -y software-properties-common\n</code></pre>"},{"location":"articles/posts/tutorial-install-ansible/#tambahkan-ppa-ansible-ke-controller-server","title":"Tambahkan PPA Ansible ke controller server","text":"<pre><code>sudo add-apt-repository --yes --update ppa:ansible/ansible\nsudo apt install ansible=7*\nansible --version\n</code></pre>"},{"location":"articles/posts/tutorial-install-ansible/#buat-default-konfigurasi-ansiblenya","title":"Buat default konfigurasi ansiblenya","text":"<pre><code>sudo mkdir -p /etc/ansible\nsudo vim /etc/ansible/hosts\n</code></pre> <p>didalam file hosts, silahkan masukan 2 server host yang akan di managed dari server controller. Tulis dibagian paling bawah saja agar kita bisa melihat konfigurasi yang sudah diberikan oleh ansible sebagai contoh. <pre><code>ubuntu-managed1\n\n[belajaransible]\nubuntu-managed2\n</code></pre> Diatas, saya masukan 2 server atau bisa diganti juga dengan menggunakan ip server.  * ubuntu-managed1 : diluar grup * ubuntu-managed2 : didalam grup Jadi ansible dapat menjalankan job/tasks berdasarkan grup.</p>"},{"location":"articles/posts/tutorial-install-ansible/#menampilkan-keseluruhan-inventory-host","title":"Menampilkan keseluruhan inventory host","text":"<p>Berikut perintahnya: <pre><code>ansible all --list-hosts\n</code></pre> Maka akan menampilkan keseluruhannya seperti dibawah ini: <pre><code>febrian@ubuntu-controller:~$ ansible all --list-hosts\n  hosts (2):\n    ubuntu-managed1\n    ubuntu-managed2\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-ansible/#menampilkan-host-yang-tidak-masuk-dalam-grup","title":"Menampilkan host yang tidak masuk dalam grup","text":"<p>Berikut perintahnya: <pre><code>ansible ungrouped --list-hosts\n</code></pre> Maka hanya akan tampil, ubuntu-managed1 seperti dibawah ini: <pre><code>febrian@ubuntu-controller:~$ ansible ungrouped --list-hosts\n  hosts (1):\n    ubuntu-managed1\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-ansible/#menampilkan-host-yang-masuk-ke-dalam-grup","title":"Menampilkan host yang masuk ke dalam grup","text":"<p>Berikut perintahnya: <pre><code>ansible belajaransible --list-hosts\n</code></pre> Maka akan menampilkan ubuntu-managed2 seperti dibawah ini: <pre><code>febrian@ubuntu-controller:~$ ansible belajaransible --list-hosts\n  hosts (1):\n    ubuntu-managed2\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-ansible/#mengecek-keseluruhan-host-di-ansible","title":"Mengecek keseluruhan host di ansible","text":"<p>Berikut perintahnya: <pre><code>ansible all -m ping\n</code></pre> Dengan menjalankan command <code>ansible all -m ping</code>, Ansible akan melakukan koneksi ke semua host yang terdaftar dalam inventory dan mengembalikan pong jika koneksi berhasil. </p> <p>Command ini sering digunakan untuk memeriksa apakah host yang terdaftar dalam inventory dapat diakses dan terhubung dengan baik menggunakan protokol SSH.</p> <p>Jika berhasil maka akan menampilkan seperti dibawah ini: <pre><code>febrian@ubuntu-controller:~$ ansible all -m ping\nubuntu-managed2 | SUCCESS =&gt; {\n\"ansible_facts\": {\n\"discovered_interpreter_python\": \"/usr/bin/python3\"\n},\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\nubuntu-managed1 | SUCCESS =&gt; {\n\"ansible_facts\": {\n\"discovered_interpreter_python\": \"/usr/bin/python3\"\n},\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/","title":"Tutorial install archlinux wsl2","text":"<p>Last updated: October 15, 2020</p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#mengetahui-lebih-dahulu-apa-itu-systemd","title":"Mengetahui lebih dahulu apa itu Systemd","text":"<p>Sebelum membahas bagaimana cara install arch linux di WSL2 Windows, mari kita bahas apa itu Systemd. Menurut laman systemd.io.</p> <p>Systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system.</p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#kenapa-harus-systemd","title":"Kenapa harus Systemd ?","text":"<p>Beberapa distro Linux paling populer di luar sana sudah menggunakan systemd secara default pada instalasi bare metal. Beberapa di antaranya, seperti Ubuntu dan Debian tersedia di WSL.</p> <p>Penyertaan systemd pada WSL membawa tools ini lebih dekat dengan pengalaman menjalankan Linux secara asli. Systemd juga diperlukan untuk beberapa tool yang sekarang dapat digunakan dengan mudah di WSL, seperti snap, microk8s, hostnamectl, systemctl, dan lainnya.</p> <ol> <li>snap</li> <li>Biner praktis yang memungkinkan Anda untuk menginstal dan mengelola perangkat lunak di dalam Ubuntu.</li> <li>Coba jalankan: <code>snap install spotify</code> atau <code>snap install postman</code></li> <li>microk8s</li> <li>Dapatk menjalankan Kubernetes secara lokal di sistem Anda dengan cepat.</li> <li>systemctl</li> <li>Alat yang merupakan bagian dari systemd, berinteraksi dengan layanan di mesin Linux.</li> <li>Coba jalankan: <code>systemctl list-units --type=service</code> untuk melihat layanan mana yang tersedia dan statusnya</li> </ol> <p>Update: Setelah saya menulis tutorial ini Systemd sudah dapat dijalankan di WSL.  Sumber:  https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl</p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#apa-itu-distrod-dan-apa-hubungannya-dengan-systemd","title":"Apa itu Distrod dan apa hubungannya dengan Systemd","text":"<p>Distrod adalah meta-distro berbasis systemd untuk WSL2 yang memungkinkan Anda untuk menginstal Ubuntu, Arch Linux, Gentoo dan banyak distro lainnya dengan systemd dalam satu menit, atau membuat distro Anda saat ini menjalankan systemd.</p> <p>Distrod juga menyediakan fitur <code>auto-start</code> <code>built-in</code> dan layanan <code>port forwarding</code>. Ini memungkinkan Anda untuk memulai layanan yang dikelola systemd, seperti <code>ssh</code>, pada startup Windows dan membuatnya dapat diakses dari luar Windows.</p> <p>Ini juga menjadikan Distrod sebagai solusi bagi kalian yang ingin menginstall berbagai macam distro linux lainnya untuk dapat dijalankan di WSL2 Windows 10/11.</p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#cara-mengetahui-distro-linux-di-wsl-jalan-dengan-systemd-atau-tidak","title":"Cara mengetahui distro linux di WSL jalan dengan Systemd atau tidak.","text":"<p>Jika sebelumnya kalian sudah pernah install WSL dengan distro yang ada di Windows Store, maka systemd tidak akan muncul dan akan menampilkan pesan seperti dibawah ini, kalian dapat lakukan dengan mengetikan perintah <code>systemctl</code>. <pre><code>febrian@Thinkpad-X230:~$ systemctl\nSystem has not been booted with systemd as init system (PID 1). Can't operate.\nFailed to connect to bus: Host is down\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#tutorial-install-distro-linux-lain-di-wsl2-windows-dengan-distrod","title":"Tutorial install distro linux lain di WSL2 Windows dengan Distrod","text":"<p>Untuk saat ini Distrod sudah dapat menjalankan beberapa varian distribusi linux, beberapa yang sudah dapat dijalankan yaitu: Ubuntu, Debian, Arch Linux, Fedora, CentOS, AlmaLinux, Rocky Linux, Kali Linux, Linux Mint, openSUSE, Amazon Linux, Oracle Linux, Gentoo Linux.</p>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#option-1-instal-distro-baru-dengan-systemd-berjalan","title":"Option 1: Instal distro baru dengan systemd berjalan","text":"<ol> <li>Silahkan download terlebih dahulu Distrod versi terbaru sini, tutorial kali ini menggunakan v.0.1.7: https://github.com/nullpo-head/wsl-distrod/releases</li> <li>Ekstrak .zip file yang sudah di download, dan klik 2x pada .exe</li> <li>Maka akan muncul pilihan 2 opsi, silahkan ketikan nomor 2 <pre><code>[1] Use a local tar.xz file\n[2] Download an image from linuxcontainers.org\n[Distrod] Choose the way to get a distro image from the list above.\n[Distrod] Type the name or the index of your choice.\n[Default: Download an image from linuxcontainers.org]: 2\n</code></pre></li> <li>Akan muncul distro linux lainnya, disini, Silahkan ketikan archlinux <pre><code>[Distrod] Fetching from linuxcontainers.org...\n[1] almalinux\n[2] alpine\n[3] alt\n[4] amazonlinux\n[5] apertis\n[6] archlinux\n[7] busybox\n[8] centos\n[9] debian\n[10] devuan\n[11] fedora\n[12] funtoo\n[13] gentoo\n[14] kali\n[15] mint\n[16] opensuse\n[17] openwrt\n[18] oracle\n[19] plamo\n[20] pld\n[21] rockylinux\n[22] springdalelinux\n[23] ubuntu\n[24] voidlinux\n[Distrod] Choose a linuxcontainers.org image from the list above.\n[Distrod] Type the name or the index of your choice.\n[Default: ubuntu]: archlinux\n</code></pre></li> <li>Selanjutnya silahkan pilih versinya, jika kalian diatas memilih ubuntu maka akan muncul beberapa versi ubuntunya. Sedangkan untuk archlinux tidak ada pilihan lain karena memang bersifat rolling release. <pre><code>[Distrod] Fetching from linuxcontainers.org...\n[1] current\n[Distrod] Choose a version from the list above.\n[Distrod] Type the name or the index of your choice.\n[Default: current]: current\n</code></pre></li> <li>Kemudian Distrod akan mendownload distro yang kita pilih <pre><code>[Distrod] Fetching from linuxcontainers.org...\n[Distrod] Downloading 'https://images.linuxcontainers.org/images/archlinux/current/amd64/default/20221119_04:18/rootfs.tar.xz'...\n\u2824 [00:00:07] [&gt;-------------------------------------------------] 2.88MiB/157.31MiB (558.04KiB/s, 4m)\n</code></pre></li> <li>Kemudian silahkan masukan username dan password. <pre><code>[Distrod] Download done.\n[Distrod] Unpacking and merging the given rootfs to the distrod rootfs. This may take a while...\n[Distrod] Now Windows is installing the new distribution. This may take a while...\n[Distrod] Archlinux is installed in %LocalAppData%\\Archlinux\n[Distrod] Done!\n[Distrod] Please input the new Linux user name. This doesn't have to be the same as your Windows user name.\n[Input user name]: febri4n\nRetype new password:\npasswd: password updated successfully\n[Distrod] Querying the generated uid. This may take some time depending on your machine.\n[Distrod] Initializing the new Distrod distribution. This may take a while...\n[Distrod] Distrod has been enabled. Now your shell will start under systemd.\n[Distrod] Setting the default user to uid: 1000\n[Distrod] Installation of Distrod is now complete.\n[febri4n@Thinkpad-X230 distrod_wsl_launcher-x86_64]$\n</code></pre></li> </ol>"},{"location":"articles/posts/tutorial-install-archlinux-wsl2/#option-2-membuat-distro-wsl-2-anda-saat-ini-menjalankan-systemd","title":"Option 2: Membuat distro WSL 2 Anda saat ini menjalankan systemd","text":"<p>Dengan instalasi ini, systemd diaktifkan di distro WSL 2 Anda.</p> <ol> <li> <p>Unduh dan jalankan skrip penginstal terbaru. <pre><code>curl -L -O \"https://raw.githubusercontent.com/nullpo-head/wsl-distrod/main/install.sh\"\nchmod +x install.sh\nsudo ./install.sh install\n</code></pre></p> </li> <li> <p>Aktifkan distrod di distro Anda Anda memiliki dua opsi. Jika Anda ingin memulai distro Anda secara otomatis pada startup Windows, aktifkan distrod dengan perintah berikut: <pre><code>/opt/distrod/bin/distrod enable --start-on-windows-boot\n</code></pre> Jika tidak, silahkan ketikan perintah dibawah ini <pre><code>/opt/distrod/bin/distrod enable\n</code></pre> Anda dapat menjalankan <code>enable</code> dengan <code>--start-on-windows-boot</code> lagi jika Anda ingin mengaktifkan autostart nantinya.</p> </li> <li> <p>Mulai ulang distro Anda Tutup terminal WSL Anda. Buka jendela Command Prompt baru, dan jalankan perintah berikut. <pre><code>wsl --terminate Distrod\n</code></pre></p> </li> </ol>"},{"location":"articles/posts/tutorial-install-docker/","title":"Tutorial install docker","text":"<p>Last updated: December 10, 2020</p>"},{"location":"articles/posts/tutorial-install-docker/#pengertian-docker","title":"Pengertian Docker","text":"<p>Docker adalah platform perangkat lunak yang dapat digunakan untuk mengembangkan, menyimpan, dan menjalankan aplikasi dalam lingkungan yang dapat ditetapkan secara independen. Docker menggunakan teknologi container, yang memungkinkan aplikasi untuk berjalan dalam lingkungan yang terisolasi dari sistem operasi host yang digunakan. Ini membuatnya mudah untuk mengembangkan, mengirim, dan menjalankan aplikasi di berbagai platform, termasuk di server, desktop, dan cloud.</p>"},{"location":"articles/posts/tutorial-install-docker/#apa-itu-container","title":"Apa itu Container ?","text":"<p>Docker container adalah sebuah wadah atau kontainer yang menjadi tempat untuk menjalankan aplikasi. Docker container dapat dianggap sebagai sebuah lingkungan atau runtime untuk menjalankan aplikasi yang terisolasi dari lingkungan yang lain. Dengan menggunakan docker container, Anda dapat dengan mudah mengembangkan, menjalankan, dan mengelola aplikasi Anda dengan cara yang lebih efisien dan terstruktur.</p>"},{"location":"articles/posts/tutorial-install-docker/#perbedaan-antara-docker-container-dan-virtual-machine","title":"Perbedaan antara Docker Container dan Virtual Machine","text":"<p>Docker container dan virtual machine adalah dua teknologi yang berbeda yang digunakan untuk mengelola aplikasi dan infrastruktur. Secara sederhana, perbedaan utama antara kedua teknologi ini adalah bagaimana mereka mengelola sumber daya komputer. Docker container menggunakan cara yang lebih efisien untuk mengelola sumber daya komputer daripada virtual machine.</p> <p>Docker container adalah sebuah lingkungan yang terisolasi di dalam host yang menjalankan sistem operasi. Container ini berisi aplikasi dan semua komponen yang dibutuhkan untuk menjalankan aplikasi tersebut, termasuk sistem operasi, library, dan file konfigurasi. </p> <p>Container ini dapat dengan mudah dijalankan di berbagai host yang menjalankan sistem operasi yang sama, sehingga memungkinkan untuk deployment yang cepat dan mudah.</p> <p>Virtual machine, di sisi lain, adalah sebuah lingkungan yang terisolasi yang berjalan di atas host yang menjalankan sistem operasi. Virtual machine berisi sebuah sistem operasi lengkap yang berjalan di atas host, sehingga membutuhkan lebih banyak sumber daya komputer daripada container. </p> <p>Virtual machine juga membutuhkan waktu yang lebih lama untuk di-deploy dan lebih sulit untuk dikelola daripada container.</p>"},{"location":"articles/posts/tutorial-install-docker/#kelebihan-docker-container","title":"Kelebihan Docker Container","text":"<p>Secara umum, Docker container lebih efisien daripada virtual machine karena menggunakan sumber daya komputer dengan lebih efisien dan memudahkan deployment dan pengelolaan aplikasi. Namun, virtual machine masih bisa berguna dalam kasus-kasus tertentu, seperti ketika Anda ingin menjalankan sistem operasi yang berbeda di host yang sama atau ketika Anda membutuhkan lingkungan yang benar-benar terisolasi dari host.</p>"},{"location":"articles/posts/tutorial-install-docker/#langkah-tutorial-install-docker-di-linux-ubuntu","title":"Langkah / Tutorial Install Docker di Linux Ubuntu","text":"<ol> <li> <p>Mulailah dengan memperbarui paket ke versi terbaru yang tersedia. <pre><code>lrmn7@ubuntu:~$ sudo apt update\nlrmn7@ubuntu:~$ sudo apt upgrade\n</code></pre></p> </li> <li> <p>Instal beberapa paket yang memungkinkan Anda untuk menggunakan paket melalui HTTPS. <pre><code>lrmn7@ubuntu:~$ sudo apt install apt-transport-https ca-certificates curl software-properties-common\n</code></pre></p> </li> <li> <p>Tambahkan GPG key Docker repository. <pre><code>lrmn7@ubuntu:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre></p> </li> <li> <p>Sekarang tambahkan Docker repository dari Ubuntu 22.04 (jammy) ke apt sources. <pre><code>lrmn7@ubuntu:~$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre></p> </li> <li> <p>Perbarui indeks paket dan siapkan server Anda untuk menginstal Docker dari repo Docker resmi. <pre><code>lrmn7@ubuntu:~$ sudo apt update\nlrmn7@ubuntu:~$ sudo apt-cache policy docker-ce\n</code></pre></p> </li> <li> <p>Anda akan menerima output yang mirip dengan ini. <pre><code>Output\ndocker-ce:\n  Installed: (none)\nCandidate: 5:20.10.14~3-0~ubuntu-jammy\n  Version table:\n     5:20.10.14~3-0~ubuntu-jammy 500\n500 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages\n     5:20.10.13~3-0~ubuntu-jammy 500\n500 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages\n</code></pre></p> </li> <li> <p>Install docker dengan mengetikan perintah dibawah ini. <pre><code>lrmn7@ubuntu:~$ sudo apt install docker-ce\n</code></pre></p> </li> <li> <p>Cek status apakah docker sudah running atau belum  <pre><code>lrmn7@ubuntu:~$ sudo systemctl status docker\n</code></pre></p> </li> </ol>"},{"location":"articles/posts/tutorial-install-docker/#cara-agar-docker-dapat-dijalankan-tanpa-perlu-sudo","title":"Cara agar Docker dapat dijalankan tanpa perlu Sudo","text":"<p>Perintah docker hanya dapat dijalankan sebagai pengguna <code>root</code> secara default. Jika Anda perlu menjalankan perintah docker tanpa sudo, Anda perlu menambahkan nama pengguna Anda ke grup <code>docker</code>. <pre><code>lrmn7@ubuntu:~$ sudo usermod -aG docker nama_username_kamu\n</code></pre></p> <p>Sekarang kalian dapat melakukan perintah docker tanpa perlu mengetikan <code>sudo</code> di awal baris perintah.</p>"},{"location":"articles/posts/tutorial-install-docker/#docker-cheat-sheet","title":"Docker Cheat Sheet","text":"<p>Berikut ini beberapa command yang sering digunakan dalam penggunana docker.</p>"},{"location":"articles/posts/tutorial-install-docker/#1-melihat-docker-image","title":"1. Melihat docker image","text":"<pre><code>docker image ls\n</code></pre>"},{"location":"articles/posts/tutorial-install-docker/#2-download-docker-image","title":"2. Download docker image","text":"<p>(Jika tanpa :tag maka akan download image yang terbaru.) <pre><code>docker image pull namaimage:tag </code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#3-menghapus-docker-image","title":"3. Menghapus docker image","text":"<p>(Docker image tidak bisa dihapus jika masih ada docker container yg masih berjalan.) <pre><code>docker image rm namaimage:tag\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#4-docker-container","title":"4. Docker container","text":"<p>Jika docker image sebagai installer, maka docker container sebagai aplikasi hasil installernya. 1 docker image bisa digunakan menjadi beberapa docker container, asalkan namanya berbeda.</p>"},{"location":"articles/posts/tutorial-install-docker/#5-status-container","title":"5. Status container","text":"<p>Saat membuat container, secara default container tidak akan berjalan. Jika tidak dijalankan maka container tidak akan jalan.</p>"},{"location":"articles/posts/tutorial-install-docker/#6-melihat-container","title":"6. Melihat container","text":"<p>Melihat container yg sedang berjalan / tidak pakai: <pre><code>docker container ls -a\n</code></pre> Jika melihat container yg berjalan saja pakai: <pre><code>docker container ls\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#7-membuat-container","title":"7. Membuat container","text":"<pre><code>docker container create --name namacontainer namaimage:tag\n</code></pre>"},{"location":"articles/posts/tutorial-install-docker/#8-menjalankan-container","title":"8. Menjalankan container","text":"<p>Dapat menjalankan/mebuat container dengan port yang sama karena tiap container terisolasi satu dan yg lainnya. <pre><code>docker container start containerid/namacontainer\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#9-menghentikan-container","title":"9. Menghentikan container","text":"<p>Sebelum menghapus container, container harus dihentikan dahulu, caranya: <pre><code>docker container stop containerid/namacontainer\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#10-menghapus-container","title":"10. Menghapus container","text":"<p>Kita tidak bisa menghapus image, jika containernya masih ada/sedang berjalan. <pre><code>docker container rm containerid/namacontainer\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#11-melihat-container-logs","title":"11. Melihat container logs","text":"<p>Melihat log aplikasi dicontainer pakai ini: <pre><code>docker container logs containerid/namacontainer\n</code></pre> Melihat log secara realtime/menunggu log baru,  pakai: <pre><code>docker container logs -f containerid/namacontainer\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#12-container-exec","title":"12. Container exec","text":"<p>Saat membuat container,aplikasi yg ada di container hanya bisa diakses dari dalam container. Oleh karena itu kita perlu masuk ke dalamcontainer itu sendiri. Untuk masuk ke dalam container,kita menggunakan fitur container exec, dimana digunakan untuk mengeksekusi kode program yg ada di dalam container.</p>"},{"location":"articles/posts/tutorial-install-docker/#13-masuk-ke-container","title":"13. Masuk ke container","text":"<p>Untuk masuk ke dalam container, kita bisa mencoba mengeksekusi program bash script yang ada di dalam container dengan bantuan container exec. Caranya: <pre><code>docker container exec -i -t containerid/namacontainer /bin/bash\n</code></pre>   * -i : argument interaktif, menjaga input tetap aktif   * -t : argument untuk alokasi terminal akses</p>"},{"location":"articles/posts/tutorial-install-docker/#14-container-port","title":"14. Container port","text":"<p>Saat menjalankan container, container terisolasi didalam docker. Artinya sistem host (laptop kita) tidak bisa mengakses aplikasi didalam container secara langsung, salah catu caranya adalah dengan menggunakan exec. Biasanya aplikasi berjalan diport tertentu, contohnya: saat menjalankan redis dia berjalan di port 6379.</p>"},{"location":"articles/posts/tutorial-install-docker/#15-port-forwarding","title":"15. Port forwarding","text":"<p>Berfungsi untuk meneruskan port yang ada disistem host (laptop kita) ke dalam docker container.  Cara ini cocok jika ingin mengekspos port yang ada di container ke luar sistem hostnya.</p>"},{"location":"articles/posts/tutorial-install-docker/#16-melakukan-port-forwarding","title":"16. Melakukan port forwarding","text":"<p>Untuk melakukan port forwarding bisa menggunakan perintah dibawah ini. (jika sebelumnya container sudah pernah dibuat, hapus dulu buat baru dengan cara dibawah). <pre><code>docker container create --name namacontainer --publish porthost:portcontainer image:tag\n</code></pre> Jika ingin melakukan port forwarding lebih dari 1 bisa menambahkan 2x parameter --publish</p>"},{"location":"articles/posts/tutorial-install-docker/#17-container-environment-variabel","title":"17. Container environment variabel","text":"<p>Saat membuat aplikasi, menggunakan environment variabel adalah salah satu cara agar konfigurasi aplikasi bisa diubah secara dinamis. Dengan menggunakan environment variabel kita bisa mengubah-ubah konfig aplikasi tanpa harus mengubah kode aplikasinya lagi. Docker container memiliki parameter yg bisa kita gunakan untuk mengirim environment variabel ke aplikasi yang terdapat di dalam container.</p>"},{"location":"articles/posts/tutorial-install-docker/#18-menambah-environment-variabel","title":"18. Menambah environment variabel","text":"<p>Untuk menambah environment variabel, bisa dengan perintah --env atau e <pre><code>docker container create --name namacontainer --env KEY=\"value\" --env KEY2=\"value\" image:tag\n</code></pre> --env: bisa digunakan banyak sesuai kebutuhan</p>"},{"location":"articles/posts/tutorial-install-docker/#19-container-stats","title":"19. Container stats","text":"<p>Untuk melihat detail penggunaan resource tiap container, container harus jalan untuk dilihat statsnya <pre><code>docker container stats\n</code></pre></p>"},{"location":"articles/posts/tutorial-install-docker/#20-container-resource-limit","title":"20. Container resource limit","text":"<p>Secara default docker akan menggunakan semua CPU dan Memory yang diberikan ke Docker. Dan akan menggunakan semua CPU dan Memory yang tesedia di sistem host (Linux). Jika penggunaan terlalu banyak memakan CPU dan Memory maka bisa berdampak ke container lainnya.</p>"},{"location":"articles/posts/tutorial-install-docker/#21-memory","title":"21. Memory","text":"<p>Kita bisa menentukan memory yang bisa digunakan container. Perintahnya --memory diikuti angka memory yang diperbolehkan untuk digunakan. Bisa menggunakan b (bytes),k (kilo bytes),m (mega bytes) atau g (giga bytes). Misal 100m artinya 100 mega bytes.</p>"},{"location":"articles/posts/tutorial-install-docker/#22-cpu","title":"22. CPU","text":"<p>Kita bisa menentukan jumlah cpu yang digunakan container. Perintahnya --cpus Misal kita set 1.5 artinya bisa menggunakan satu dan setengah cpu core.</p>"},{"location":"articles/posts/tutorial-install-docker/#23-bind-mounts","title":"23. Bind mounts","text":"<p>Kemampuan melakukan sharing file ataupun folder yang terdapat di sistem host ke container. Fitur ini sangat berguna ketika ingin mengirimkan kkonfigurasi dari luar container. Misal menyimpan data yg dibuat di aplikasi ke dalam container ke dalam folder di sisten host. Jika file/folder tidak ada di sistem host secara otomatis akan dibuatkan oleh docker. Perintahnya menggunakan parameter --mount ketika membuat container, dan ada parameternya. type: tipe mount, bind atau volume source: lokasi file/folder di sistem host destination: lokasi file/folder di container readonly: jika ada maka file/folder hanya bisa di baca d container,tidak bisa ditulis</p>"},{"location":"articles/posts/tutorial-install-nodejs/","title":"Tutorial install nodejs","text":"<p>Last updated: November 23, 2020</p>"},{"location":"articles/posts/tutorial-install-nodejs/#mengenal-lebih-dekat-apa-itu-nodejs","title":"Mengenal lebih dekat apa itu Node.js ?","text":"<p>Node.js adalah sebuah Javascript platform untuk general-purpose programming yang mengizinkan pengguna untuk membuat sebuah network applications secara cepat. Secara garis besar Javascript dapat digunakan pada sisi <code>front-end</code> (Angular,React,Vue) dan juga <code>back-end</code>, proses development dapat dilakukan dengan lebih konsisten dan didesain dengan mudah karena dibuat dengan sistem yang sama.</p>"},{"location":"articles/posts/tutorial-install-nodejs/#persyaratan-install-nodejs","title":"Persyaratan install Node.js","text":"<p>Pada tutorial atau cara kali ini saya menggunakan Linux <code>Zorin Lite 12.4</code>, tidak usah khawatir jika kalian menggunakan Ubuntu karena Zorin berbasis Ubuntu dan cara instalasinya pun sama. Kemudian yang diperlukan adalah koneksi internet dan pemahaman dasar seputar linux.</p>"},{"location":"articles/posts/tutorial-install-nodejs/#kelebihan-menginstall-nodejs-dengan-nvm","title":"Kelebihan menginstall Node.js dengan NVM","text":"<p>Ada alternatif lain sebenarnya dalam menginstall Node.js selain menggunakan <code>apt</code> yaitu dengan menggunakan <code>nvm</code>, singkatan dari \"Node.js version manager\". </p> <p>Kelebihan menginstall menggunakan nvm adalah kamu bisa menginstall lebih dari satu (multiple), dan juga self-contained version dari Node.js yang tidak akan mempengaruhi sistem mu.</p> <p>Nvm mengizinkan kamu untuk mengakses versi terbaru dari Node.js dan mengatur  versi rilis sebelumnya. Berbeda dengan apt-get yang hanya menginstal versi stabil, disini kamu bisa memilih versi apa saja yang kamu mau termasuk versi stabil dari Node.js.</p>"},{"location":"articles/posts/tutorial-install-nodejs/#tutorial-cara-install-nodejs-di-linux-dengan-menggunakan-nvm-lts-version","title":"Tutorial cara install Node.js di linux dengan menggunakan NVM (LTS Version)","text":"<p>Sebelum memulai instalasi terlebih dari update packages terbaru dari Ubuntu kalian, silahkan ikuti perintah dibawah ini:</p> <pre><code> $  sudo apt-get update\n $  sudo apt-get install build-essential libssl-dev\n</code></pre> <p>Langkah selanjutnya adalah dengan menginstall nvm, silakan ikuti caranya dibawah ini:</p> <pre><code>$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash\n</code></pre> <p>Sebelum masuk ke folder nvm, kita lihat terlebih dahulu apakah terdapat foldernya, kita dapat melihatnya dengan cara dibawah:</p> <pre><code>$ ls -la\n</code></pre> <pre><code>Hasilnya akan terlihat seperti dibawah :\n\n-rw-rw-r--  1 lrmn lrmn   77 Peb  8 19:31 .gitconfig\n-rw-------  1 lrmn lrmn 1240 Peb 17 10:43 .ICEauthority\ndrwxrwxr-x  3 lrmn lrmn 4096 Peb  8 18:32 .local\ndrwxr-xr-x  2 lrmn lrmn 4096 Peb  8 18:32 Music\ndrwxrwxr-x  2 lrmn lrmn 4096 Peb 17 03:55 .nano\n-rw-------  1 lrmn lrmn  210 Peb  8 19:41 .netrc\n-rw-------  1 lrmn lrmn    0 Peb 16 21:47 .node_repl_history\ndrwxrwxr-x  8 lrmn lrmn 4096 Peb 17 03:59 .nvm\n</code></pre> <p>Apakah kalian melihat folder dengan nama .nvm, jika ia silahkan masuk ke folder tersebut, silahkan ketikan perintah</p> <pre><code>$ cd .nvm\n</code></pre> <p>Note: Pada posis ini kita dianggap sudah masuk ke folder nvm, ditandai dengan berubahnya \\(** menjadi **~/.nvm\\). Silahkan ketikan perintah setelah tanda $</p> <p>Kemudian lihat apakah ada script instalasinya dengan perintah ls -la, mungkin bisa sama bisa berbeda.</p> <pre><code>~/.nvm$ ls -la\n</code></pre> <pre><code>Terdapat file instalasinya dengan nama install.sh \n\n-rw-rw-r--  1 lrmn lrmn    140 Peb 17 03:53 .dockerignore\n-rw-rw-r--  1 lrmn lrmn    221 Peb 17 03:53 .editorconfig\ndrwxrwxr-x  8 lrmn lrmn   4096 Peb 17 03:56 .git\n-rw-rw-r--  1 lrmn lrmn      9 Peb 17 03:53 .gitattributes\ndrwxrwxr-x  2 lrmn lrmn   4096 Peb 17 03:53 .github\n-rw-rw-r--  1 lrmn lrmn    252 Peb 17 03:53 .gitignore\n-rwxrwxr-x  1 lrmn lrmn  13226 Peb 17 03:53 install.sh\n-rw-rw-r--  1 lrmn lrmn   1078 Peb 17 03:53 LICENSE.md\n</code></pre> <p>Pada tutorial kali ini terdapat install.sh silakan install dengan cara dibawah, ingat!!! silahkan ketikan perintah setelah tanda $</p> <pre><code>~/.nvm$ bash install.sh\n</code></pre> <p>Note: Mulai dari sini kebawah sebenarnya kalian tidak harus berada pada folder nvm, kita bisa lakukan dimana saja. Agar sama dengan tutorial silahkan ketikan cd .. untuk kembali ke folder Home dan berubah menjadi $.</p> <p>Proses instalasi akan berlangsung,setelah selesai langkah selanjutnya silahkan ikuti perintah</p> <pre><code>$ source ~/.profile\n</code></pre> <p>Sekarang nvm berhasil di install, nah untuk menginstall <code>Node.js</code> silakan kalian ketikan:</p> <pre><code>$ nvm ls-remote\n</code></pre> <pre><code>Akan tampil seperti dibawah ini:\n\n           v10.10.0\n       v10.11.0\n       v10.12.0\n       v10.13.0   (LTS: Dubnium)\nv10.14.0   (LTS: Dubnium)\nv10.14.1   (LTS: Dubnium)\nv10.14.2   (LTS: Dubnium)\nv10.15.0   (LTS: Dubnium)\n-&gt;     v10.15.1   (Latest LTS: Dubnium)\n</code></pre> <p>Dapat kamu lihat diatas, terdapat banyak versi baik versi stabil maupun versi terbaru dari LTS (Long Time Support). Pada tutorial kali ini saya akan menginstall versi v10.15.1 LTS. Silahkan ketikan:</p> <pre><code>$ nvm install v.10.15.1\n</code></pre> <p>Umumnya, nvm akan mengganti versi yang digunakan dengan yang baru saja di install. Untuk itu silahkan ketikan perintah dibawah agar kita ganti ke versi LTS.</p> <pre><code>$ nvm use v.10.15.1\n</code></pre>"},{"location":"articles/posts/tutorial-install-nodejs/#mengecek-instalasi-nodejs","title":"Mengecek instalasi Node.js","text":"<p>Kemudian untuk melihat apakah Node.js berhasil di install silahkan ketikan perintah:</p> <pre><code>$ node -v\n</code></pre> <pre><code>Akan keluar:\n\nv.10.15.1\n</code></pre>"},{"location":"articles/posts/tutorial-install-nodejs/#mengatur-versi-default-nodejs-yang-akan-digunakan","title":"Mengatur versi default Node.js yang akan digunakan","text":"<p>Jika kalian memiliki atau menginstall lebih dari 1 versi Node.js, kalian bisa melihatnya dengan cara dibawah:</p> <pre><code>$ nvm ls\n</code></pre> <p>Silahkan ikuti perintah dibawah agar menjadikan versi LTS tadi menjadi versi default yang akan digunakan untuk project kedepannya:</p> <pre><code>$ nvm alias default v.10.15.1\n</code></pre>"},{"location":"articles/posts/tutorial-mengubah-hostname-linux/","title":"Tutorial mengubah hostname linux","text":"<p>Last updated: April 6, 2020</p>"},{"location":"articles/posts/tutorial-mengubah-hostname-linux/#apa-itu-hostname","title":"Apa itu Hostname ?","text":"<p>Hostname adalah sebuah nama unik yang diberikan kepada sebuah perangkat di jaringan, seperti komputer atau server, sehingga perangkat tersebut dapat dikenali dan diakses oleh perangkat lain di jaringan. Hostname sering digunakan sebagai bagian dari alamat IP dan membantu pengguna dan sistem untuk mengidentifikasi perangkat di jaringan. </p> <p>Dalam konteks jaringan, hostname juga berfungsi sebagai pengganti dari alamat IP, yang sulit untuk diingat oleh manusia. Dengan menggunakan hostname, pengguna dapat dengan mudah mengingat nama perangkat dan menggunakannya untuk terhubung ke jaringan. Penting untuk memahami konsep dasar hostname sebelum membahas cara mengubahnya.</p>"},{"location":"articles/posts/tutorial-mengubah-hostname-linux/#alasan-untuk-mengubah-hostname","title":"Alasan untuk mengubah Hostname","text":"<p>Ada beberapa alasan mengapa seseorang ingin mengubah hostname pada perangkat di jaringan. Salah satu alasan utama adalah untuk meningkatkan keamanan. Dalam lingkungan bisnis, misalnya, perangkat mungkin perlu diberi nama yang sesuai dengan kebijakan keamanan organisasi. </p> <p>Selain itu, menghindari tabrakan nama pada jaringan juga merupakan alasan umum untuk mengubah hostname. Jika dua perangkat di jaringan memiliki nama yang sama, hal ini dapat menyebabkan konflik dan masalah koneksi jaringan. </p> <p>Terakhir, masalah kinerja jaringan dapat menjadi alasan untuk mengubah hostname. Sebuah hostname yang terlalu panjang atau kompleks dapat memperlambat kinerja jaringan, sehingga mengubah hostname menjadi lebih sederhana dapat membantu memperbaiki kinerja jaringan. </p> <p>Sebelum mengubah hostname, penting untuk mempertimbangkan alasan di balik perubahan ini dan mengikuti langkah-langkah yang tepat untuk memastikan keamanan dan kelancaran operasi perangkat di jaringan.</p>"},{"location":"articles/posts/tutorial-mengubah-hostname-linux/#persiapan-sebelum-mengubah-hostname","title":"Persiapan sebelum mengubah Hostname","text":"<p>Sebelum mengubah hostname pada perangkat di jaringan, ada beberapa persiapan yang perlu dilakukan.</p> <ul> <li>Pertama, backup data yang ada pada perangkat. Meskipun mengubah hostname biasanya tidak akan menyebabkan kehilangan data, namun selalu ada kemungkinan kesalahan dalam proses ini. </li> <li>Kedua, catat nama hostname lama. Hal ini berguna jika ada masalah selama proses perubahan, sehingga dapat dengan mudah mengembalikan ke nama hostname sebelumnya. </li> <li>Ketiga, persiapkan nama hostname baru dan pastikan nama yang dipilih unik dan sesuai dengan kebijakan jaringan. </li> <li>Terakhir, pastikan bahwa perubahan hostname tidak akan memengaruhi konfigurasi jaringan atau aplikasi yang berjalan pada perangkat. Jika perlu, lakukan tes terlebih dahulu untuk memastikan bahwa perangkat masih berfungsi dengan baik setelah perubahan hostname. </li> </ul> <p>Dengan melakukan persiapan yang tepat sebelum mengubah hostname, kita dapat meminimalkan risiko dan memastikan bahwa perangkat akan beroperasi dengan lancar setelah perubahan.</p>"},{"location":"articles/posts/tutorial-mengubah-hostname-linux/#cara-mengubah-hostname-pada-linux-tanpa-restart","title":"Cara Mengubah Hostname pada Linux Tanpa Restart","text":"<p>Untuk mengganti hostname di Linux tanpa restart, Anda dapat mengikuti langkah-langkah berikut:</p> <ol> <li> <p>Pertama, buka terminal atau console shell di Linux Anda.</p> </li> <li> <p>Untuk melihat nama hostname saat ini, jalankan perintah berikut: <pre><code>hostname\n</code></pre></p> </li> <li> <p>Untuk mengubah nama hostname, jalankan perintah berikut (menggantikan \"new-hostname\" dengan nama hostname yang diinginkan): <pre><code>sudo hostnamectl set-hostname new-hostname\n</code></pre> Anda akan diminta untuk memasukkan kata sandi root atau sudo untuk menyelesaikan perintah.</p> </li> <li> <p>Setelah perintah di atas dijalankan, perbarui file /etc/hosts dengan menambahkan nama hostname baru dan IP address yang terkait dengan hostname tersebut. <pre><code>sudo nano /etc/hosts\n</code></pre></p> </li> <li> <p>Tambahkan baris berikut di bawah baris dengan \"127.0.0.1 localhost\": <pre><code>127.0.0.1 new-hostname\n</code></pre></p> </li> <li>Setelah Anda menyimpan perubahan pada file /etc/hosts, Anda dapat memeriksa apakah nama hostname baru sudah diaktifkan dengan menjalankan perintah: <pre><code>hostname\n</code></pre></li> </ol> <p>Perhatikan bahwa perubahan ini mungkin tidak langsung berlaku untuk sesi shell yang sudah ada sebelum perubahan di atas, jadi Anda mungkin perlu membuka sesi shell baru untuk melihat perubahan yang baru saja dibuat.</p>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/","title":"Tutorial ssh socks5 tunnel","text":"<p>Last updated: December 8, 2020</p> <p>Ada kalanya kalian ingin menjelajah Internet secara pribadi, mengakses konten yang dibatasi secara geografis, atau mem-bypass firewall.</p> <p>Salah satu pilihannya adalah menggunakan VPN, tetapi itu memerlukan instalasi dan menyiapkan server VPN kalian sendiri atau berlangganan layanan VPN.</p> <p>Alternatif yang lebih sederhana adalah merutekan lalu lintas jaringan lokal kalian dengan Socks proxy tunnel terenkripsi. Dengan cara ini, semua aplikasi kalian yang menggunakan proxy akan tersambung ke server SSH dan server akan meneruskan semua trafik ke tujuan sebenarnya. ISP (penyedia layanan internet) dan pihak ketiga lainnya tidak akan dapat memeriksa lalu lintas kalian dan memblokir akses ke situs web.</p> <p>Tutorial ini akan memandu kalian mempersiapkan bagaimana cara SSH SOCKS Tunnel terenkripsi dengan menggunakan browser web Firefox.</p>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/#prasyarat","title":"Prasyarat","text":"<p>Sebelumnya silahkan persiapkan terlebih dahulu beberapa hal yang harus dilakukan:  * Server yang berjalan dengan Sistem Operasi Linux  * Web browser (Firefox)  * SSH Client (MobaXterm) </p> <p>Di case ini saya akan melakukan tunneling web server apache2 yang sudah di install di server linux ubuntu saya untuk nantinya dapat kita akses secara lokal di browser Firefox. Disini server saya buat dengan menggunakan Vagrant, tutorial dapat dilihat sebelumnya. Kemudian disini saya menggunakan SSH Client MobaXterm, karena sudah terdapat fitur ssh socks tunneling didalamnya.</p>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/#mempersiapkan-web-server-apache2","title":"Mempersiapkan web server apache2","text":"<ol> <li>Silahkan install terlebih dahulu, apache2 web server: <pre><code>vagrant@ubuntu-jammy:~$ sudo apt install apache2\n</code></pre></li> <li>Silahkan cek, apakah apache2 web server sudah terinstall dan running. Ketikan perintah dibawah ini: <pre><code>vagrant@ubuntu-jammy:~$ sudo systemctl status apache2\n\u25cf apache2.service - The Apache HTTP Server\n     Loaded: loaded (/lib/systemd/system/apache2.service; enabled; vendor preset: enabled)\nActive: active (running) since Sun 2022-11-27 05:49:12 UTC; 4min 54s ago\n       Docs: https://httpd.apache.org/docs/2.4/\n   Main PID: 2196 (apache2)\nTasks: 55 (limit: 513)\nMemory: 5.4M\n        CPU: 122ms\n     CGroup: /system.slice/apache2.service\n             \u251c\u25002196 /usr/sbin/apache2 -k start\n             \u251c\u25002198 /usr/sbin/apache2 -k start\n             \u2514\u25002199 /usr/sbin/apache2 -k start\nNov 27 05:49:11 ubuntu-jammy systemd[1]: Starting The Apache HTTP Server...\nNov 27 05:49:12 ubuntu-jammy apachectl[2195]: AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'S&gt;\nNov 27 05:49:12 ubuntu-jammy systemd[1]: Started The Apache HTTP Server.\nlines 1-16/16 (END)\n</code></pre></li> <li>Disini, apache2 running di port 80.</li> </ol>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/#mempersiapkan-ssh-socks-tunneling-di-mobaxterm","title":"Mempersiapkan SSH SOCKS Tunneling di MobaXterm","text":"<ol> <li>Silahkan buka MobaXterm, klik <code>Tunneling</code> di Menubar atas.</li> <li>Silahkan klik <code>New SSH tunnel</code></li> <li>Pilih <code>Dynamic port forwarding (SOCKS proxy)</code>, silahkan isi seperti dibawah ini dan klik save. </li> <li>Kemudian klik tombol start.</li> </ol>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/#mempersiapkan-proxy-configuration-di-firefox","title":"Mempersiapkan proxy configuration di Firefox","text":"<ol> <li>Masuk setting Firefox.</li> <li>Silahkan masuk ke <code>Network Settings</code></li> <li>Kemudian isi seperti dibawah ini: </li> </ol>"},{"location":"articles/posts/tutorial-ssh-socks5-tunnel/#akses-apache2-web-server-di-firefox","title":"Akses apache2 Web server di Firefox","text":"<ol> <li>Silahkan akses ip web server kalian.</li> <li>Karena apache2 web server running di port 80, silahkan akses ip_server:80. Di tutorial ini saya menggunakan Vagrant, dan ip server saya di <code>10.10.10.21</code>.</li> <li>Dan apache2 sekarang sudah bisa di akses di local network kalian. </li> </ol>"},{"location":"articles/posts/tutorial-vagrant/","title":"Tutorial vagrant","text":"<p>Last updated: March 14, 2020</p>"},{"location":"articles/posts/tutorial-vagrant/#bekenalan-dengan-vagrant","title":"Bekenalan dengan Vagrant","text":""},{"location":"articles/posts/tutorial-vagrant/#apa-itu-vagrant","title":"Apa itu Vagrant ?","text":"<p>Sebelum mengetahui lebih lanjut bagaimana cara menginstall Vagrant, kita bahas terlebih dahulu apa kegunaan Vagrant. Menurut website resminya, Vagrant adalah</p> <p>Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the \u201cworks on my machine\u201d excuse a relic of the past.</p> <p>Singkatnya Vagrant adalah alat open-source yang membantu kita untuk mengotomatisasi pembuatan dan pengelolaan Mesin Virtual. Singkatnya, kita dapat menentukan konfigurasi mesin virtual dalam file konfigurasi sederhana, dan Vagrant menciptakan mesin Virtual yang sama hanya dengan menggunakan satu perintah sederhana. Vagrant menyediakan antarmuka baris perintah untuk mengotomatisasi tugas-tugas tersebut. </p>"},{"location":"articles/posts/tutorial-vagrant/#kenapa-harus-menggunakan-vagrant","title":"Kenapa harus menggunakan Vagrant ?","text":"<p>Sebuah aplikasi terdiri dari beberapa komponen yang perlu dikonfigurasi dengan dapat berjalan dengan baik. Sebagai contoh, sebuah aplikasi web modern mungkin memiliki beberapa komponen-komponen seperti Java, JavaScript, Python, dll sebagai bahasa, MySQL, Oracle, MongoDB, dll sebagai Database, komponen-komponen lain seperti webserver, load-balancer, API Gateway, Message Queue, dll berdasarkan kebutuhan.  </p> <p>Sebelum Vagrant, semua komponen diatas perlu diatur secara manual. Selama proses setup, banyak masalah yang dihadapi diantaranya:</p> <ul> <li>Di setiap mesin, setup perlu dilakukan secara terpisah, yang memakan banyak waktu.</li> <li>Konfigurasi manual mungkin salah, yang perlu di-debug dan diperbaiki setiap saat.</li> <li>Lingkungan pengembangan, pengujian, dan produksi harus identik. Tetapi karena instalasi manual dan setup komponen ini, mungkin ada sedikit perbedaan yang membuat kita sangat kesusahan, karena, dalam skenario seperti itu, aplikasi mungkin berjalan di lingkungan pengembangan, tetapi menghadapi masalah di lingkungan produksi.</li> </ul> <p>Selain beberapa hal diatas, Tools ini sering saya gunakan untuk latihan beberapa tutorial mengenai DevOps yang mana kadang kita membutuhkan sebuah VPS, namun dengan Vagrant kita bisa mengikuti tutorial tersebut tanpa mengeluarkan banyak biaya. Selain itu virtualisanya dapat kita lakukan ssh dan tunneling di browser host. </p>"},{"location":"articles/posts/tutorial-vagrant/#prasyarat-menggunakan-vagrant","title":"Prasyarat menggunakan Vagrant","text":"<ol> <li> <p>Install aplikasi virtualisasi seperti; VirtualBox, VMware, atau Hyper-V. Disini karena saya menggunakan Windows 10 saya menginstall VirtualBox karena mudah dan juga gratis.</p> </li> <li> <p>Jika sudah, silahkan download Vagrant di website resmi, linknya ada disini. https://developer.hashicorp.com/vagrant/downloads</p> </li> <li> <p>Setelah itu, verikasi dengan cara mengetikan command dibawah ini pada CMD. Jika berhasil maka akan tampil versi Vagrant yang sudah kita Install. <pre><code>C:\\Users\\User&gt;vagrant -v\nVagrant 2.3.1\n</code></pre></p> </li> </ol>"},{"location":"articles/posts/tutorial-vagrant/#tutorial-membuat-instancevm-di-vagrant","title":"Tutorial Membuat Instance/VM di Vagrant","text":""},{"location":"articles/posts/tutorial-vagrant/#konfigurasi-vagrant-file","title":"Konfigurasi Vagrant file","text":"<p>Di studi kasus ini saya membutuhkan sebuah server dengan distribusi Ubuntu 22.04 dengan spesifikasi rendah misal memory hanya 512Mb dan 1 Core, maka berikut tutorial singkatnya.</p> <ol> <li>Silahkan buat folder di direktori mu, dan masuk via CMD. <pre><code>D:\\Belajar-Vagrant&gt;\n</code></pre></li> <li>Kemudian silahkan buat 1 Vagrant file. Berikut isi configurasinya. <pre><code>Vagrant.configure(\"2\") do |config|\nconfig.vm.box = \"ubuntu/jammy64\"\n\nconfig.vm.provider \"virtualbox\" do |vb|\nvb.gui = false\nvb.memory = \"512\"\nvb.cpus = 1\nvb.linked_clone = true\nend\n\nconfig.vm.define \"server-satu\" do |server1|\nserver1.vm.network :private_network, ip: \"10.10.10.11\"\nend\n\nconfig.vm.provision \"shell\", inline: &lt;&lt;-SHELL\n        apt-get update\n    SHELL\nend\n</code></pre></li> <li>Jika sudah disilahkan ketikan <code>vagrant up</code>, maka vagrant akan create secara otomatis instance/vm di virtualbox kalian dengan mendownload Boxes yang tersedia di Vagrant. Boxes ini bisa dikatakan seperti Docker images. <pre><code>D:\\Belajar-Vagrant&gt;vagrant up\nBringing machine 'server-satu' up with 'virtualbox' provider...\n==&gt; server-satu: Cloning VM...\n==&gt; server-satu: Matching MAC address for NAT networking...\n==&gt; server-satu: Checking if box 'ubuntu/jammy64' version '20221110.0.0' is up to date...\n==&gt; server-satu: Setting the name of the VM: Belajar-Vagrant_server-satu_1669043874779_68105\n==&gt; server-satu: Clearing any previously set network interfaces...\n==&gt; server-satu: Preparing network interfaces based on configuration...\n    server-satu: Adapter 1: nat\n    server-satu: Adapter 2: hostonly\n==&gt; server-satu: Forwarding ports...\n    server-satu: 22 (guest) =&gt; 2222 (host) (adapter 1)\n==&gt; server-satu: Running 'pre-boot' VM customizations...\n==&gt; server-satu: Booting VM...\n==&gt; server-satu: Waiting for machine to boot. This may take a few minutes...\n    server-satu: SSH address: 127.0.0.1:2222\n    server-satu: SSH username: vagrant\n    server-satu: SSH auth method: private key\n    server-satu: Warning: Connection reset. Retrying...\n    server-satu:\n    server-satu: Vagrant insecure key detected. Vagrant will automatically replace\n    server-satu: this with a newly generated keypair for better security.\n    server-satu:\n    server-satu: Inserting generated public key within guest...\n    server-satu: Removing insecure key from the guest if it's present...\n    server-satu: Key inserted! Disconnecting and reconnecting using new SSH key...\n==&gt; server-satu: Machine booted and ready!\n==&gt; server-satu: Checking for guest additions in VM...\n    server-satu: The guest additions on this VM do not match the installed version of\n    server-satu: VirtualBox! In most cases this is fine, but in rare cases it can\n    server-satu: prevent things such as shared folders from working properly. If you see\n    server-satu: shared folder errors, please make sure the guest additions within the\n    server-satu: virtual machine match the version of VirtualBox you have installed on\n    server-satu: your host and reload your VM.\n    server-satu:\n    server-satu: Guest Additions Version: 6.0.0 r127566\n    server-satu: VirtualBox Version: 6.1\n==&gt; server-satu: Configuring and enabling network interfaces...\n==&gt; server-satu: Mounting shared folders...\n    server-satu: /vagrant =&gt; D:/Belajar-Vagrant\n</code></pre></li> <li>Instance sudah berhasil kita buat. Kalian bisa cek di virtualbox maka ubuntu 22.04 sedang running.</li> <li>Berikut beberapa command penting setelah install instance-nya.<ul> <li>Untuk menghentikan mesin dan menyimpan statusnya saat ini, silahkan ketikan:     <code>vagrant suspend</code></li> <li>Untuk mematikan mesin virtual, gunakan perintah:     <code>vagrant halt</code></li> <li>Untuk menghidupkan kembali mesin, ikutin perintah ini:     <code>vagrant up</code></li> <li>Untuk menghapus semua jejak mesin virtual dari sistem Anda, ketik perintah berikut:     <code>vagrant destroy</code></li> </ul> </li> </ol>"},{"location":"articles/posts/tutorial-vagrant/#akses-instancevm-yang-sudah-dibuat","title":"Akses Instance/VM yang sudah dibuat","text":"<p>Untuk mengakses Instance/VM yang sudah kita buat, silahkan jalankan terlebih dahulu dengan mengetikan perintah <code>vagrant up</code>. Jika sudah, siapkan beberapa tools favorite kalian untuk akses ssh. Bisa menggunakan Putty, MobaXterm atau bisa juga dengan WSL2. Disini saya akan coba dengan menggunakan MobaXterm.</p> <ol> <li>Silahkan download terlebih dahulu MobaXterm.</li> <li>Pastikan VM sudah jalan, ketikan perintah <code>vagrant ssh-config</code> untuk melihat hostname, username dan port yang akan kita ssh.</li> <li>Silahkan buka MobaXterm, Kemudian buat session baru SSH.</li> <li>Remote host: silahkan isi 127.0.0.1</li> <li>Specify username: silahkan isi vagrant</li> <li>Port: silahkan isi 2222</li> <li>Dibagian Tab Advanced SSH settings, silahkan ceklis <code>Use private key</code>, browse dimana private key disimpan. Disini private key disimpan di <code>D:/Belajar-Vagrant/.vagrant/machines/server-satu/virtualbox/private_key</code></li> <li> <p>Jika sudah maka akan tampil dan login ke vm ubuntu yang baru kita buat, disana kalian bebas melakukan apapaun sama halnya seperti create instance di AWS/GCP.</p> <pre><code>Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-52-generic x86_64)\n\nSystem information as of Mon Nov 21 15:44:26 UTC 2022\n\nSystem load:  0.05615234375     Processes:               95\nUsage of /:   4.0% of 38.70GB   Users logged in:         0\nMemory usage: 44%               IPv4 address for enp0s3: 10.0.2.15\nSwap usage:   0%                IPv4 address for enp0s8: 10.10.10.21\n\n14 updates can be applied immediately.\n12 of these updates are standard security updates.\nTo see these additional updates run: apt list --upgradable\n\nLast login: Mon Nov 21 15:38:22 2022 from 10.0.2.2\nvagrant@ubuntu-jammy:~$\n</code></pre> </li> </ol>"},{"location":"projects/archive/1001-cara-bicara/","title":"1001 cara bicara","text":"<p>Last updated: June 8, 2023 | at  06:10 PM</p>"},{"location":"projects/archive/1001-cara-bicara/#project-links","title":"Project Links","text":"<ul> <li>LIVE SITE LINK: https://1001-cara-bicara.is-a.fun/</li> <li>GITHUB REPO: https://github.com/lrmn7/skata-info-1001-cara-bicara</li> </ul> <p>1001 Cara Bicara ini adalah salah satu produk dari skata.info yang siapkan sebagai mitra kerja BKKBN untuk mendukung penguatan orangtua remaja. Agar orangtua dapat menjadi pendidik dan sumber informasi bagi anak-anak remaja mereka.</p> <p>Download Ebook</p>"},{"location":"projects/archive/1001-cara-bicara/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li> <p>How to Use.</p> <pre><code># Clone this repository\n$ git clone https://github.com/lrmn7/skata-info-1001-cara-bicara.git\n\n# Go into the repository\n$ cd skata-info-1001-cara-bicara\n\n# Open with text-editor\n$ code .\n</code></pre> </li> <li> <p>Open in live server.</p> <p>Your site is now running!</p> </li> </ol>"},{"location":"projects/archive/1001-cara-bicara/#deployment","title":"\ud83d\udcab Deployment","text":"<p>Once you have done with your setup. You need to put your website online!</p> <p>I highly recommend to use Netlify to achieve this on the EASIEST WAY</p>"},{"location":"projects/archive/1001-cara-bicara/#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License</p>"},{"location":"projects/archive/1001-cara-bicara/#contributing","title":"\ud83d\udcc4 Contributing","text":"<p>If you have any idea to make it more interesting, feel free to send a PR, or create an issue for a feature request.</p>"},{"location":"projects/archive/Quick-Sort-js/","title":"Quick Sort js","text":"<p>Last updated: October 18, 2019 | at  02:35 PM</p>"},{"location":"projects/archive/Quick-Sort-js/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>const arr = [0, 2, 4, 5, 1, 3, 3, 7, 6, 9 ,2]\n// arr.sort()\nconst swap = (items, leftIndex, rightIndex)=&gt;{\nlet temp = items[leftIndex];\nitems[leftIndex] = items[rightIndex];\nitems[rightIndex] = temp;\n}\nconst sort = (arr)=&gt;{\nquicksort(arr, 0, arr.length - 1)\n}\nconst quicksort = (arr, left, right)=&gt;{\nif (left &gt;= right){\nreturn;\n}\nlet pivot = arr[Math.floor((left + right) / 2)]\nlet next = swapper(arr, left, right, pivot)\nquicksort(arr, left, next - 1)\nquicksort(arr, next , right)\n}\nconst swapper = (arr, left, right, pivot) =&gt;{\nwhile(left &lt;= right){\nwhile(arr[left] &lt; pivot){\nleft++;\n}\nwhile(arr[right] &gt; pivot){\nright--;\n}\nif(right &gt;= left){\nswap(arr,left,right)\nleft++;\nright--;\n}\n}\nreturn left\n}\n\nsort(arr)\n</code></pre>"},{"location":"projects/archive/code-snippet/","title":"Code snippet","text":"<p>Last updated: March 25, 2019 | at  07:10 PM</p>"},{"location":"projects/archive/code-snippet/#git-just-not-to-forget","title":"Git: Just not to forget.","text":"<pre><code>git pull\ngit clone\ncode .\ngit add --all\ngit commit -m \u201cint\u201d\ngit push\ngit push origin main:new\n</code></pre>"},{"location":"projects/archive/code-snippet/#jupyter-to-run-the-notebook-jupyter-notebook","title":"Jupyter: To run the notebook jupyter notebook .","text":"<pre><code>jupyter-lab\njupyter notebook\n</code></pre>"},{"location":"projects/archive/code-snippet/#python-some-used-python-libraries-for-statistical-analysis","title":"Python: Some used Python libraries for statistical analysis .","text":"<pre><code>pip install numpy\npip install pandas\npip install matplotlib\npip install seaborn\npip install scipy\npip install statsmodels\npip install scikit-learn\n</code></pre>"},{"location":"projects/archive/code-snippet/#jekyll-if-you-host-at-github-run-add-platform-x86_64-to-work","title":"Jekyll: If you host at github run --add platform x86_64 to work.","text":"<pre><code>bundle lock --add-platform x86_64-linux\nbundle\nbundle exec jekyll serve\n</code></pre>"},{"location":"projects/archive/code-snippet/#nextra-run-locally","title":"Nextra: Run locally.","text":"<pre><code>npm install nextra\nnpm run dev\nnpm build\n</code></pre> <p>Local server : http://localhost:3000</p>"},{"location":"projects/archive/donlod-save-what-you-love/","title":"Donlod save what you love","text":"<p>Last updated: May 11, 2020 | at  12:35 PM</p>"},{"location":"projects/archive/donlod-save-what-you-love/#apa-itu-donlod","title":"Apa itu DONLOD?","text":"<p>Donlod adalah tempat terbaik kamu untuk download video sosial media tanpa watermark, iklan, pelacak, atau omong kosong lainnya. tinggal tempel link dan udah deh</p> <p>Jangan lupa untuk memberikan bintang pada repositori GitHub bila anda menyukainya</p>"},{"location":"projects/archive/donlod-save-what-you-love/#features","title":"Features","text":"<p>daftar ini belum final dan terus berkembang dari waktu ke waktu, pastikan untuk memeriksanya sesekali!</p> <ul> <li>bilibili (.com only)</li> <li>instagram reels &amp; video posts</li> <li>reddit videos &amp; gifs</li> <li>soundcloud</li> <li>tiktok videos &amp; photos &amp; audio</li> <li>tumblr</li> <li>twitter posts &amp; spaces &amp; voice</li> <li>vimeo</li> <li>vine archive</li> <li>vk video &amp; clips</li> <li>youtube videos &amp; shorts &amp; music</li> </ul>"},{"location":"projects/archive/donlod-save-what-you-love/#privacy-policy","title":"Privacy Policy","text":"<p>Kebijakan privasi donlod sederhana: tidak ada data tentang anda yang pernah dikumpulkan atau disimpan. apa yang anda unduh adalah urusan anda, bukan urusan saya.</p> <p>Beberapa data yang tidak dapat dilacak kembali disimpan sementara saat unduhan yang diminta memerlukan render langsung. itu perlu agar fitur itu berfungsi.</p> <p>Dalam hal itu, alamat IP Anda disimpan sementara di RAM server selama 2 menit. Setelah 2 menit, semua informasi yang disimpan sebelumnya dihapus secara permanen. Alamat IP Anda digunakan untuk membatasi akses streaming hanya untuk Anda. Tidak ada seorang pun (bahkan saya) yang memiliki akses ke data ini, karena basis kode resmi donlod tidak menyediakan cara untuk membacanya di luar fungsi pemrosesan.</p> <p>Anda dapat memeriksa GitHub repo untuk melihat semua yang telah dinyatakan.</p>"},{"location":"projects/archive/donlod-save-what-you-love/#support","title":"Support","text":"<p>Help me keep it up</p> <p></p> <p>Donlod (tidak akan pernah) menayangkan iklan atau menjual data anda, oleh karena itu benar benar gratis untuk digunakan. namun ternyata mengembangkan dan mempertahankan layanan web tidaklah mudah seorang diri. Jika menurut anda donlod sangat berguna dan ingin membantu melanjutkan pengembangan dan dukungannya, atau hanya ingin berterima kasih kepada saya sebagai pengembang, setiap sen membantu dan SANGAT dihargai :D</p> <p>Saya belum mendapatkan apa pun dari donlod, semuanya kembali ke pengguna, jadi pada dasarnya anda membantu semua orang.</p> <p>Donate Via Trakteer.id ini adalah cara terbaik untuk berdonasi jika anda ingin saya menerima donasi anda secara langsung.</p>"},{"location":"projects/archive/get-og/","title":"Get og","text":"<p>Last updated: June 8, 2023 | at  08:10 PM</p>"},{"location":"projects/archive/get-og/#project-links","title":"Project Links","text":"<ul> <li>LIVE SITE LINK: https://get-og.is-a.fun</li> <li>GITHUB REPO: https://github.com/lrmn7/get-og</li> </ul> <p>\ud83c\udf47Open Graph Image Generator based on @vercel/og for personal use.</p>"},{"location":"projects/archive/get-og/#what-is-an-get-og","title":"What is an GET OG?","text":"<p>Have you ever posted a hyperlink to Twitter, Facebook, or Slack and seen an image popup? How did your social network know how to \"unfurl\" the URL and get an image? The answer is in your <code>&lt;head&gt;</code>.</p> <p>The Open Graph protocol says you can put a <code>&lt;meta&gt;</code> tag in the <code>&lt;head&gt;</code> of a webpage to define this image.</p> <p>It looks like the following:</p> <pre><code>&lt;head&gt;\n  &lt;title&gt;Title&lt;/title&gt;\n  &lt;meta property=\"og:image\" content=\"http://example.com/logo.jpg\" /&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"projects/archive/get-og/#why-use-this-service","title":"Why use this service?","text":"<ul> <li>Feel free to customize an image for every single blog post or every single documentation page.</li> <li>This is easily introduced through a link with some params.</li> </ul>"},{"location":"projects/archive/get-og/#deploy-guide","title":"Deploy Guide","text":"<ol> <li>Fork this repository</li> <li>Replace the bg image and logo to yours in pulic dir, and change the relevant text infomation.</li> <li>Connect Vercel for GitHub to automatically deploy each time you <code>git push</code></li> <li>Add the following to the vercel environment variables: Settings &gt; Environment Variables</li> </ol> <p>Name                  | NEXT_PUBLIC_DEPLOYMENT_URL</p> <p>Value                 | https://deployment.domain.com</p>"},{"location":"projects/archive/get-og/#getting-started","title":"Getting Started \ud83d\udee0\ufe0f","text":"<p>Install with</p> <pre><code>yarn\n</code></pre> <p>Then, run the development server:</p> <pre><code>yarn dev\n</code></pre> <p>Open http://localhost:3000 with your browser to see the result.</p>"},{"location":"projects/archive/get-og/#license","title":"License","text":"<p>MIT License \u00a9 2023 L RMN</p>"},{"location":"projects/archive/hotstar-subtitle-style/","title":"Hotstar subtitle style","text":"<p>Last updated: September 8, 2019 | at  05:35 PM</p>"},{"location":"projects/archive/hotstar-subtitle-style/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>// ==UserScript==\n// @name         Change subtitle style\n// @namespace    http://tampermonkey.net/\n// @version      1.0\n// @description  Hostar's subtitle kinda sucks... so\n// @author       @lrmn\n// @match        https://www.hotstar.com/*\n// @icon         https://www.google.com/s2/favicons?domain=hotstar.com\n// @grant        none\n// ==/UserScript==\n</code></pre> <pre><code>(function() {\n  'use strict';\n  // You can customize this\n  const fontWeight = \"600!important\";\n  const stroke = \"1px black\";\n  const fontSize = \"42px!important\";\n  const backgroundColor = \"transparent!important\";\n\n  const styleSheet = document.createElement('style');\n  styleSheet.type = \"text/css\"\n  styleSheet.innerHTML = `\n    .subtitle-container .cues-container .shaka-text-container span{\n      font-size:${fontSize};\n      font-weight:${fontWeight};\n      background-color:${backgroundColor};\n      -webkit-text-stroke:${stroke};\n    }\n  `\n\n  document.head.appendChild(styleSheet)\n\n})();\n</code></pre>"},{"location":"projects/archive/hotstar-subtitle-style/#how-to-use","title":"How to use?","text":"<p>Import this script to tempermonkey</p>"},{"location":"projects/archive/ip-me/","title":"Ip me","text":"<p>Last updated: June 8, 2023 | at  10:10 PM</p>"},{"location":"projects/archive/ip-me/#project-links","title":"Project Links","text":"<ul> <li>LIVE SITE LINK: https://lrmn.is-a.dev/IPme</li> <li>GITHUB REPO: https://github.com/lrmn7/IPme</li> </ul>"},{"location":"projects/archive/ip-me/#ip-me","title":"IP Me \ud83c\udf0d","text":"<p>Using Api's and CORS proxies to check your IP and if you are using a VPN or Proxy service and any other information available from your IP address.</p>"},{"location":"projects/archive/label-encoders/","title":"Label encoders","text":"<p>Last updated: October 6, 2019 | at  09:35 PM</p>"},{"location":"projects/archive/label-encoders/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>def encode_label(df, return_object=False, using_class=False):\n  # function to encode label to number and return new dataframe\n  from sklearn.preprocessing import LabelEncoder\n  temp = df.copy()\n  class_list = {}\n  objList = temp.select_dtypes(include = \"object\").columns\n  for feat in objList:\n    le = LabelEncoder()\n    if using_class:\n      le = using_class[feat]\n    else:\n      le = le.fit(temp[feat].astype(str))\n      class_list.update({feat:le})\n    temp[feat] = le.transform(temp[feat].astype(str))\n  # if you wanna return le object\n  if return_object:\n    return temp, class_list\n  return temp\n\n# how to use\ndf_encoded, le_objects = encode_label(df, return_object=True)\n\n#for example, you wanna encode your test data\n#and you need pre-trained encoder from your data train\ndf_test_encoded, le_test_objects = encode_label(df_test, return_object=True, using_class=le_objects)\n</code></pre>"},{"location":"projects/archive/label-encoders/#how-to-use","title":"How to use?","text":"<p>Import this script to tempermonkey</p>"},{"location":"projects/archive/lucy-bot-discord/","title":"Lucy bot discord","text":"<p>Last updated: June 7, 2023 | at  11:10 PM</p>    Discord.js v14 Bot    <p>Admin, AutoMod, Anime, Economy, Fun, Giveaway, Image, Invite, Information, Moderation, Music, Owner, Social, Statistics, Suggestion, Ticket, Utility and More...</p> <p></p> <p> Resource Links   \u2022   Prerequisites   \u2022   Getting Started   \u2022   Features </p> <p></p>"},{"location":"projects/archive/lucy-bot-discord/#resource-links","title":"\ud83d\udd17 Resource Links","text":"<ul> <li>\ud83e\udd16 Demo Bot: Invite Here</li> <li>\ud83e\udd1d Support Server: Join Here</li> <li>\ud83d\udc33 Docker Image: Hub</li> <li>\ud83d\udcc3 Documentation: Documentation</li> <li>\ud83d\udccd Website: Website</li> <li>\ud83d\udce5 Download: Download</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<ul> <li>Node.js v16.11.0 or higher</li> <li>Git</li> <li>MongoDB</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Open the terminal and run the following commands</li> </ul> <pre><code>git clone https://github.com/lrmn/lucy-bot-discord.git\ncd lucy-bot-discord\nnpm install\n</code></pre> <ul> <li>Wait for all the dependencies to be installed</li> <li>Rename <code>.env.example</code> to <code>.env</code> and fill the values</li> <li>Optionally edit <code>config.js</code></li> <li>Type <code>npm run start</code> to start the bot</li> </ul> <p>If you need any additional help, make sure to read our guides here</p> <p></p>  \u2728 Features \u2728"},{"location":"projects/archive/lucy-bot-discord/#advanced-dashboard","title":"\ud83d\udce1 Advanced Dashboard","text":"<ul> <li>Manage your servers and make your server-specific settings!</li> <li>Make custom adjustments easy!</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#powerful-moderation","title":"\ud83d\uded1 Powerful Moderation:","text":"<ul> <li>Moderation Commands. Commands: <code>ban</code>, <code>unban</code>, <code>timeout</code>, <code>voice moderation</code>, <code>deafen</code>, <code>move</code>, <code>warn</code>, <code>setnick</code>, ...</li> <li>Multi-Function Purge Commands. Commands: <code>purge</code>, <code>purge attach</code>, <code>purge bots</code>, <code>purge links</code>, <code>purge token</code>, <code>purge user</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#auto-moderation","title":"\ud83e\udd16 Auto Moderation:","text":"<ul> <li>Anti system Commands: <code>anti ghostping</code>, <code>anti spam</code>, <code>anti massmention</code>, ...</li> <li>Auto Delete system Commands: <code>autodelete attachments</code>, <code>autodelete invites</code>, <code>autodelete links</code>, <code>autodelete maxlines</code>, ...</li> <li>AutoMod system Commands: <code>automod status</code>, <code>automod strikes</code>, <code>automod action</code>, <code>automod debug</code>, <code>automod whitelist</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#admin-configuration","title":"\u2699\ufe0f Admin Configuration:","text":"<ul> <li>Let a bot be the server's assistant! Commands: <code>autorole</code>, <code>farewell</code>, <code>welcome</code>, <code>counters</code>, <code>flag translation</code>, <code>reaction roles</code>, ...</li> <li>Make custom settings for your own server. Commands: <code>setprefix</code>, <code>maxwarns</code>, <code>modlog</code>...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#information-gathering","title":"\ud83d\udc81 Information Gathering:","text":"<ul> <li>User Context Interactions</li> <li>Advanced Information Get deep information about a user, channel, role, etc.</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#music","title":"\ud83c\udfb5 Music:","text":"<ul> <li>LossLess Music! Enjoy high quality lossless music</li> <li>Multi-Platform Play music from YouTube, SoundCloud, Spotify, and more</li> <li>Filters Apply filters to your music and spice it up</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#giveaways","title":"\ud83c\udf89 Giveaways:","text":"<ul> <li>Easy to use Create giveaways with ease</li> <li>Role specific giveaways</li> <li>Customizable Customize the giveaway to your liking</li> <li>Limitless Create unlimited giveaways</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#social-content","title":"\ud83e\udec2 Social Content:","text":"<ul> <li>You Have A CV In Each Server-Specific Bot! Commands: <code>rep</code>, <code>rep view</code>...</li> <li>Do You Love Someone? Commands: <code>rep give</code>...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#ticket-system","title":"\ud83c\udf9f Ticket System:","text":"<ul> <li>Make Supporting Members A Breeze With Tickets!  Highly customizable ticket system with staff roles</li> <li>Multiple Categories  Don't Want The Tickets To Be Everywhere? Categorize them using select menus</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#stats-tracking","title":"\ud83d\udcc9 Stats Tracking:","text":"<ul> <li>Levelling Track your server's activity with a level system</li> <li>Leaderboards See who is the most active user in your server</li> <li>Customizable System Configure the levelup message, rank cards to your liking</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#suggestions","title":"\ud83d\ude4b\u200d\u2642\ufe0f Suggestions:","text":"<ul> <li>Get Suggestions From Server Members To Help Your Server Become The Best! Commands: <code>suggest</code>, <code>suggestion</code>...</li> <li>Accept Or Decline The Suggestions And Customize Them To The Max! Commands: <code>suggestion status</code>, <code>suggestion channel</code>, <code>suggestion appch</code>, <code>suggestion rejch</code>, <code>suggestion approve</code>, <code>suggestion staffadd</code>, <code>suggestion staffremove</code>...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#utility-commands","title":"\u2692\ufe0f Utility Commands:","text":"<ul> <li>Need Some Help With Something? Use The Utility Commands To Find Out The Answer To It Commands: <code>bigemoji</code>, <code>covid</code>, <code>pokedex</code>, <code>urban</code>, <code>weather</code>, ...</li> <li>Need Help With Some More Stuff? Commands: <code>help</code>, <code>proxies</code>, <code>translate</code>, <code>paste</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#anime-content","title":"\u2b50 Anime Content:","text":"<ul> <li>Love Anime? Express You Love To Someone Using The React Commands Commands: <code>react</code>, <code>hug</code>, <code>kiss</code>, <code>cuddle</code>, <code>pat</code>, <code>poke</code>, <code>slap</code>, <code>smug</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#economy-system","title":"\ud83e\ude99 Economy System:","text":"<ul> <li>Want To Become Richest? Use The Economy Commands! Commands: <code>bank</code>, <code>daily</code>, <code>beg</code>, <code>gamble</code>...</li> <li>Give People Money, Check Your Balance, Or Just Flex! Commands: <code>bank balance</code>, <code>bank deposit</code>, <code>bank withdraw</code>, <code>bank transfer</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#fun-commands","title":"\ud83d\ude01 Fun Commands:","text":"<ul> <li>Have Some Fun In Your Server! Commands: <code>animal</code>, <code>facts</code>, <code>meme</code>, <code>flip</code>, ...</li> <li>Play Games And Enjoy Yourself Commands: <code>snake</code>, <code>together</code>, <code>flip coin</code>, <code>flip text</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#invite-tracking","title":"\ud83d\udce8 Invite Tracking:","text":"<ul> <li>Track who has been inviting people to your server!</li> <li>Invite Ranks! Inviter can get awesome rewards and be recognised</li> <li>Configure these settings and customize them to your liking! Commands: <code>resetinvites</code>, <code>addinvites</code>, <code>invitesimport</code>, <code>inviterank</code>...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#image-manipulation","title":"\ud83d\udcf7 Image Manipulation:","text":"<ul> <li>Customize other peoples avatars Commands: <code>blur</code>, <code>greyscale</code>, <code>invert</code>, <code>pixelate</code>, <code>blur</code>, <code>sepia</code>, <code>sharpen</code>, <code>ad</code>, <code>affect</code>, <code>beautiful</code>, <code>color</code>...</li> <li>Make some images by yourself or make some art Commands: <code>bobross</code>, <code>confusedstonk</code>, <code>delete</code>, <code>facepalm</code>, <code>hitler</code>, <code>jail</code>, <code>jokeoverhead</code>, <code>karaba</code>, <code>mms</code>, <code>notstonk</code>, <code>poutine</code>, <code>rainbow</code>, <code>rip</code>, <code>shit</code>, <code>stonk</code>, <code>tatoo</code>, <code>thomas</code>, <code>trash</code>, <code>wanted</code>, <code>wasted</code>, ...</li> </ul>"},{"location":"projects/archive/lucy-bot-discord/#guides","title":"\u270d Guides","text":""},{"location":"projects/archive/lucy-bot-discord/#setting-up-slash-commands","title":"Setting up Slash Commands","text":"<ul> <li>Slash commands are disabled by default</li> <li>In the config.js set SLASH = true and CONTEXT = true and replace TEST_GUILD_ID with the guild ID where you want to initially test the commands. This will ensure that all the commands are registered immediately</li> <li>Once you are happy with the commands, set GLOBAL = true to register these interactions globally</li> </ul> <p>Global slash commands can take upto 1 hour to be shown across all guilds_</p>"},{"location":"projects/archive/lucy-bot-discord/#setting-up-dashboard","title":"Setting up Dashboard","text":"<ul> <li>In the config.js, make sure you set dashboard enabled to true</li> <li>Add your baseURL, <code>http://localhost:8080/api/callback</code> in your application OAuth2 redirects page in the discord developer portal</li> </ul> <pre><code>  DASHBOARD: {\n    enabled: true, // enable or disable dashboard\n    baseURL: \"http://localhost:8080\", // base url\n    failureURL: \"http://localhost:8080\", // failure redirect url\n    port: \"8080\", // port to run the bot on\n  },\n</code></pre>"},{"location":"projects/archive/markdown-editor/","title":"Markdown editor","text":"<p>Last updated: June 9, 2023 | at  12:10 AM</p>"},{"location":"projects/archive/markdown-editor/#project-links","title":"Project Links","text":"<ul> <li>LIVE SITE LINK: https://markdown-editor.is-a.fun</li> <li>GITHUB REPO: https://github.com/lrmn7/markdown-editor</li> </ul>"},{"location":"projects/archive/markdown-editor/#markdown-editor","title":"Markdown-Editor","text":"<p>This is a simple live markdown editor, build with React (Vite) and Chakra UI.</p> <p>Actually, I made it for myself. But of course I'm open to any feedbacks. You can fork or clone this repo and make a PR here if you have some idea.</p>"},{"location":"projects/archive/markdown-editor/#what-im-use-here","title":"What I'm use here?","text":"<ul> <li>Vite as build tool.</li> <li>Chakra UI as UI Library.</li> <li>React Markdown Preview to make the markdown preview result.</li> <li>React TextArea Editor as the text editor component.</li> </ul>"},{"location":"projects/archive/markdown-editor/#how-to-use-it","title":"How to use it?","text":"<ul> <li>Open markdown-editor.is-a.fun</li> <li>You can input your markdown text at the textarea input, and the preview will be displayed live.</li> <li>Here's Markdown Cheatsheet to help you write the markdown text.</li> </ul>"},{"location":"projects/archive/markdown-editor/#references","title":"References","text":"<ul> <li>Vite Docs - Learn about Vite and its features</li> <li>Chakra UI - UI component</li> <li>Typescript - The programming language</li> <li>React Markdown Preview - For the markdown previewer component.</li> <li>Freepik Image - For the image asset.</li> </ul>"},{"location":"projects/archive/markdown-editor/#future-improvement","title":"Future Improvement","text":"<ul> <li> Reset the textarea button</li> <li> Copy the clipboard button</li> </ul>"},{"location":"projects/archive/markdown-editor/#getting-started","title":"Getting Started \ud83d\udee0\ufe0f","text":"<p>Install with</p> <pre><code>yarn\n</code></pre> <p>Then, run the development server:</p> <pre><code>yarn dev\n</code></pre> <p>Open http://localhost:3000 with your browser to see the result.</p>"},{"location":"projects/archive/qr-code-generator/","title":"Qr code generator","text":"<p>Last updated: June 8, 2023 | at  09:10 PM</p> QR Code Generator \ud83d\udcf8"},{"location":"projects/archive/qr-code-generator/#project-links","title":"Project Links","text":"<ul> <li>LIVE SITE LINK: https://qr.is-a.fun</li> <li>GITHUB REPO: https://github.com/lrmn7/QR</li> </ul>"},{"location":"projects/archive/qr-code-generator/#about","title":"About \ud83d\udcdd","text":"<p>After trying to create a nice qr code with a logo for my work I quickly became frustrated by how limited most tools online were and how they all wanted me to signup and added bloat to the process. So I decided to create my own tool that would be simple, easy, feature rich and free to use.\ud83d\ude0e</p> <p>If you find this project useful please consider giving it a star \u2b50</p> <p>If you use the code please give me credit and link back to this repo \ud83d\ude4f</p> <p>Enjoy! \ud83d\ude01</p>"},{"location":"projects/archive/qr-code-generator/#features","title":"Features \ud83c\udf89","text":"<pre><code>- Simple and easy UI \ud83e\udd29\n- Smart themes based on the QR Code URL \ud83c\udfa8\n- Add a logo to your QR code \ud83d\uddbc\ufe0f\n- Colouring and styling options \ud83d\udc68\u200d\ud83c\udfa8\n- Right click the QR code to save it as an image \ud83d\udcf8\n</code></pre> <p>Coming Soon\u2122 \ud83d\udea7</p> <pre><code>- Auto recommend icons for all brands \ud83d\udc40\n- Favicon scraping \ud83e\udd1e (Unsure how CORS will go)\n- More themes \ud83c\udfa8\n- QR code frames and text options \ud83d\uddbc\ufe0f\n- Svg download option \ud83d\udcf8\n- Copy to clipboard option \ud83d\udccb\n- Abillity to scan QR codes \ud83d\udcf1\n</code></pre>"},{"location":"projects/archive/qr-code-generator/#built-with","title":"Built with \ud83e\uddf0","text":"<ul> <li> <p>React QR Code Logo \ud83d\udce6</p> </li> <li> <p>A very nice and easy to use QR code package with logo options.</p> </li> <li> <p>Next.js \ud83d\ude80</p> </li> <li> <p>Because it's the best React framework out there.</p> </li> <li> <p>Tailwind CSS \ud83c\udf43</p> </li> <li> <p>Nextjs starter had it already so why not.</p> </li> <li> <p>React Palette \ud83c\udfa8</p> </li> <li> <p>A nice package to get the dominant color of an image.</p> </li> <li> <p>Simple Icons \ud83d\uddbc\ufe0f</p> </li> <li> <p>The best package for all brand icons.</p> </li> <li> <p>Hero Icons \ud83e\uddb8\u200d\u2642\ufe0f</p> </li> <li> <p>A really pretty collection of icons.</p> </li> <li> <p>jsQR \ud83d\udcf8</p> </li> <li>A QR code scanner library.</li> </ul>"},{"location":"projects/archive/qr-code-generator/#getting-started","title":"Getting Started \ud83d\udee0\ufe0f","text":"<p>Install with</p> <pre><code>yarn\n</code></pre> <p>Then, run the development server:</p> <pre><code>yarn dev\n</code></pre> <p>Open http://localhost:3000 with your browser to see the result.</p> <p>You can start editing the page by modifying <code>app/page.tsx</code>. The page auto-updates as you edit the file.</p> <p>This project uses <code>next/font</code> to automatically optimize and load Inter, a custom Google Font.</p>"},{"location":"projects/archive/qr-code-generator/#learn-more","title":"Learn More \ud83d\udcd6","text":"<p>To learn more about Next.js, take a look at the following resources:</p> <ul> <li>Next.js Documentation - learn about Next.js features and API.</li> <li>Learn Next.js - an interactive Next.js tutorial.</li> </ul> <p>You can check out the Next.js GitHub repository - your feedback and contributions are welcome!</p>"},{"location":"projects/archive/remove-list-of-words-from-given-sentences/","title":"Remove list of words from given sentences","text":"<p>Last updated: October 26, 2019 | at  11:35 PM</p>"},{"location":"projects/archive/remove-list-of-words-from-given-sentences/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>import re\n\ndatasets = [\"aaaaa bbbbb cccc\", \"ccccc bbbb xxxxxxx\", \"xxxxxx zzzz zaaaaaa\"]\nhapus_kata = [\"aaaaa\", \"zzzz\"]\n\nfor idx_data in range(len(datasets)):\n  for idx_kata in range(len(hapus_kata)):\n    kata_baru = re.sub(rf\"\\b{hapus_kata[idx_kata]}\\b\", '', datasets[idx_data]).strip()\n    datasets[idx_data] = kata_baru\n</code></pre>"},{"location":"projects/archive/remove-undefined-key-js/","title":"Remove undefined key js","text":"<p>Last updated: October 19, 2019 | at  10:35 AM</p>"},{"location":"projects/archive/remove-undefined-key-js/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>Object.keys(obj).forEach(key =&gt; obj[key] === undefined &amp;&amp; delete obj[key])\n</code></pre>"},{"location":"projects/archive/sieve-of-eratosthenes-js/","title":"Sieve of eratosthenes js","text":"<p>Last updated: November 4, 2019 | at  04:10 AM</p>"},{"location":"projects/archive/sieve-of-eratosthenes-js/#snippets-code","title":"SNIPPETS CODE","text":"<pre><code>const generatePrime = max =&gt; {\nlet sieve = [2,3,5,7,11,13,17,19,23,29,31,37];\nconst isPrimeFromSieve = num =&gt; {\nvar max = Math.ceil(Math.sqrt(num));\nfor (let i = 0; i &lt; sieve.length; i++) {\nif (num % sieve[i] === 0) return false;\nelse if (max &lt; sieve[i]) return true;\n}\nreturn true;\n}\nlet current = sieve[sieve.length - 1] + 2;\nwhile (current &lt;= max) {\nif (isPrimeFromSieve(current)) sieve.push(current);\ncurrent += 2;\n}\nreturn sieve\n}\n\n//EXAMPLE\n//generate prime number from 1 to 100\nconsole.log(generatePrime(100))\n</code></pre>"},{"location":"projects/archive/waifu-music-bot/","title":"Waifu music bot","text":"<p>Last updated: June 7, 2023 | at  02:50 AM</p>"},{"location":"projects/archive/waifu-music-bot/#waifumusic","title":"\u2764\ufe0f\u200d\ud83d\udd25 WaifuMusic","text":"<ul> <li>\ud83d\udd34 Invite our bot directly here.</li> <li>\ud83d\udccd Visit our bot website: waifumusic</li> <li>\ud83d\udce5 Download: Download</li> </ul>"},{"location":"projects/archive/waifu-music-bot/#update-230","title":"\ud83d\udca8 Update 2.3.0","text":"<p>The bot now uses the latest version of discord.js and prefix commands are back again, added more function to it, a music channel where you can type your song and waifu will join the vc where you are in and play the music you entered. More updates information on our support server.</p>"},{"location":"projects/archive/waifu-music-bot/#required","title":"\ud83d\udca6 Required","text":"<ul> <li>Node.js v18+</li> <li>Discord.js v14</li> <li>Distube</li> <li>ffmpeg</li> <li>libsodium-wrappers</li> </ul>"},{"location":"projects/archive/waifu-music-bot/#first-step","title":"\ud83d\udd30 First step","text":"<p>To run this correctly on your desktop/local device, please follow these steps.</p> <p>To begin, obtain a copy of the code by either cloning it using Git or downloading the zip file. <pre><code>git clone https://github.com/lrmn7/WaifuMusic-bot-discord.git\n</code></pre> <pre><code>https://github.com/lrmn7/WaifuMusic-bot-discord/releases\n</code></pre> To proceed, after obtaining a copy of the code through cloning or downloading and unzipping the file, open the source code and enter the following command in your console. <pre><code>npm install\n</code></pre> This command will install the necessary packages as specified in the package.json file.</p>"},{"location":"projects/archive/waifu-music-bot/#config","title":"\ud83d\udca0 Config","text":"<p>With all packages now downloaded, proceed to the <code>config.js</code> file where you will be required to fill in important variables for configuration. <pre><code>module.exports = {\n\nWAIFU_TOKEN=YOUR TOKEN BOT\nHACHIKI=OWNER_ID\nHACHIKI_TAG=L`RMN#9749\nHACHIKI_LINK=https://discord.com/users/{userid}\nDEV_GUILD=YOUR SERVER ID\n\nWAIFU_PREFIX=w! // YOUR PREFIX\n\nMONGO_DB=YOUR MONGO_DB URL\n\nWAIFU_TRACKS=https://open.spotify.com/playlist/6R4aE0V0YmcKJH8qjYBLFK?si=6523d3a5d4b446fd\nSPOTIFY_SECRET=\nSPOTIFY_CLIENT_ID=\n\nYOUTUBE_COOKIE=\n\nMAIN_COLOR=#2F3136\nERR_COLOR=#ED2828\n}\n</code></pre></p>"},{"location":"projects/archive/waifu-music-bot/#running","title":"\ud83d\udc95 Running","text":"<p>Once the necessary variables have been entered in the config.js file, invite your bot to the server you fill in the <code>config.js</code> then, use the following command in your console to run your bot. <pre><code>npm run start\n</code></pre> If you want to start with shards run this. <pre><code>npm run shards\n</code></pre> - Congratiolations you now have a running bot and play music on vc's!</p>"},{"location":"projects/archive/waifu-music-bot/#deploy","title":"\ud83d\udcab Deploy","text":"<p>NOTE: It is important to note that using this code to publish a bot publicly or advertising it without proper credit is strictly prohibited.</p>"},{"location":"projects/archive/yuimusic-discord-bot/","title":"Yuimusic discord bot","text":"<p>Last updated: June 7, 2023 | at  02:10 AM</p>"},{"location":"projects/archive/yuimusic-discord-bot/#hosted","title":"\ud83d\udea6 Hosted","text":""},{"location":"projects/archive/yuimusic-discord-bot/#yuis-music","title":"\ud83d\ude80 Yui`s Music","text":"<ul> <li>\ud83e\udd16 Demo Bot: Invite Here</li> <li>\ud83e\udd1d Support Server: Join Here</li> <li>\ud83d\udc33 Docker Image: Hub</li> <li>\ud83d\udcc3 Documentation: Documentation</li> <li>\ud83d\udccd Website: Website</li> <li>\ud83d\udce5 Download: Download</li> </ul> <p>Yui`s is a Discord music bot that uses Discord.js, Shoukaku, Prisma Client (ORM) database (MongoDB), and TypeScript.      Invite Yui`s Music     \u00b7     Report Bug &amp; Request Feature </p>"},{"location":"projects/archive/yuimusic-discord-bot/#unique-features","title":"\ud83d\udd25 Unique Features","text":"<ul> <li>Developed using Typescript and Discord.js v14</li> <li>Advanced Music System</li> <li>Customizable Prefix</li> <li>Powerful Search Engine</li> <li>12 + Music Filters</li> <li>Hybrid Command Handling (Slash and Normal Commands)</li> <li>Highly Configurable</li> <li>User-friendly and Easy to Use</li> <li>24/7 Music Playback</li> <li>Playlist commands</li> <li>Setup music channel</li> </ul>"},{"location":"projects/archive/yuimusic-discord-bot/#support-sources","title":"\ud83c\udfb6 Support Sources","text":"<p>\ud83d\udd0d Default Sources:</p> <p>\ud83d\udd0c Plugin Sources: <code>(Require: LavaLink v3.6.x)</code></p> <p>Note: You need to install the plugins to use these sources</p> <ul> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> <li> (Required Plugin)</li> </ul>"},{"location":"projects/archive/yuimusic-discord-bot/#need-help-with-plugins-join-our-discord-server-and-ask-in-the-support-channel","title":"Need Help with plugins? Join our Discord Server and ask in the <code>#support</code> channel","text":""},{"location":"projects/archive/yuimusic-discord-bot/#commands","title":"\ud83d\udcda Commands","text":"<p>Name: prefix | Description: Shows the bot's prefix.</p> <p>Name: help | Description: Shows the help menu.</p> <p><code>Options: command: The command you want to get info on.</code></p> <p>Name: info | Description: Shows information about the bot.</p> <p>Name: invite | Description: Sends the bot's invite link.</p> <p>Name: ping | Description: Shows the bot's ping.</p> <p>Name: clearqueue | Description: Clears the queue.</p> <p>Name: join | Description: Joins the voice channel.</p> <p>Name: leave | Description: Leaves the voice channel.</p> <p>Name: nowplaying | Description: Shows the currently playing song.</p> <p>Name: play | Description: Plays a song from YouTube or Spotify.</p> <p><code>Options: song: The song you want to play.</code></p> <p>Name: pause | Description: Pauses the current song.</p> <p>Name: queue | Description: Shows the current queue.</p> <p>Name: remove | Description: Removes a song from the queue.</p> <p><code>Options: song: The song number.</code></p> <p>Name: resume | Description: Resumes the current song.</p> <p>Name: seek | Description: Seeks to a certain time in the song.</p> <p>Name: shuffle | Description: Shuffles the queue.</p> <p>Name: skip | Description: Skips the current song.</p> <p>Name: skipto | Description: Skips to a specific song in the queue.</p> <p>Name: stop | Description: Stops the music and clears the queue.</p> <p>Name: volume | Description: Sets the volume of the player.</p> <p><code>Options: number: The volume you want to set.</code></p>"},{"location":"projects/archive/yuimusic-discord-bot/#requirements","title":"\ud83d\udd27 Requirements","text":"<p>Before starting with the installation, you need to have the following:</p> <ul> <li> v18.16.0 or higher</li> <li> v4.4.0 or higher</li> <li> v3.7.5 or higher</li> </ul>"},{"location":"projects/archive/yuimusic-discord-bot/#installation-from-source","title":"\ud83d\ude80 Installation from source","text":"<ol> <li>Clone the Lavamusic repository:</li> </ol> <p><code>bash   git clone  https://github.com/lrmn7/yuimusic-bot-discord.git</code></p> <ol> <li>change the directory to Yuimusic</li> </ol> <pre><code>cd yuimusic\n</code></pre> <ol> <li>Install the required packages:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Set up your environment variables:</li> </ol> <p>Create a <code>.env</code> file in the root directory of your project with the following variables:</p> <pre><code>TOKEN=\".\" # Your bot token\nPREFIX=\"!\" # Your prefix\nOWNER_IDS=\"742457036914294855\" # Your ID\nCLIENT_ID=\"1088032923443277824\" # Your bot client ID\nGUILD_ID=\"1088032923443277824\" # Your server ID (if you want to use it for a single server)\nPRODUCTION=\"true\" # \"true\" for production\nDATABASE_URL=\"mongodb+srv://Lrmn:xxxxxxxxxxxx\" # Your MongoDB URL\nLAVALINK_URL=\"yuimusic.hop.sh:443\" # Your lavalink url\nLAVALINK_AUTH=\"madewithstress\" # Your lavalink password\nLAVALINK_NAME=\"Yuimusic\" # Your lavalink name\nLAVALINK_SECURE= \"true\" # true for secure lavalink\n</code></pre> <ol> <li>Generate the Prisma client:</li> </ol> <p>If you using replit than read this:</p> <p>go to prisma/schema.prisma and add engine type like this or remove <code>//</code> behind the <code>engineType</code></p> <pre><code>generator client {\nprovider = \"prisma-client-js\"\nengineType = \"binary\"\n}\n</code></pre> <p>and then run this command</p> <p><code>bash   npx prisma generate</code></p> <ol> <li>Run the bot:</li> </ol> <p><code>bash   npm run start or npm start</code></p> <ol> <li>Invite the bot to your server:</li> </ol> <p>Generate an invite link for your bot and invite it to your server using the Discord Developer Portal or using permissions calculator: https://discordapi.com/permissions.html</p>"},{"location":"projects/archive/yuimusic-discord-bot/#installation-using-docker-compose","title":"\ud83d\ude80 Installation using docker-compose","text":"<p>This section assumes you have docker and docker-compose installed and is running correctly.</p> <p>Download the Docker-Compose file in a seperate folder like lavamusic.</p> <p>Edit the Docker-Compose file and make sure to edit the following variables:</p> <pre><code>TOKEN=\".\" # Your bot token and remember, don't show everyone your bot token\nPREFIX=\"!\" # Your prefix\nOWNER_IDS=\"742457036914294855\" # Your ID\nCLIENT_ID=\"1088032923443277824\" # Your bot client ID\nGUILD_ID=\"1088032923443277824\" # Your server ID (if you want to use it for a single server)\nPRODUCTION=\"true\" # \"true\" for production\n</code></pre> <p>For more information how to fill all the varialabes go to this page. You do not need to edit anything like the LAVA_LINK_URL, LAVA_LINK_AUTH, LAVA_LINK_NAME, LAVA_LINK_SECURE, DATABASE_URL, and the ports. Unless you know what your doing.</p> <p>After saving your changes you can open a terminal and go to the same location as the docker-compose file. Then type the following:</p> <pre><code>docker-compose up -d\n</code></pre> <p>The above command will start all your services and your bot should be up and running!</p> <p>To update, you only have to type the following:</p> <pre><code>docker-compose up --force-recreate --build -d\nimage prune -f\n</code></pre> <p>You can automate this by using Watchtower. The following should be sufficient:</p> <pre><code>docker run --detach \\\n--name watchtower \\\n--volume /var/run/docker.sock:/var/run/docker.sock \\\n--restart on-failure \\\ncontainrrr/watchtower --cleanup\n</code></pre> <p>Do note that the bot will restart itself to update to the latest!</p>"},{"location":"projects/archive/yuimusic-discord-bot/#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li> Node.js</li> <li> Discord.js</li> <li> Prisma</li> <li> Lavalink</li> <li> MongoDB</li> <li> Docker</li> <li> <p> Docker-Compose</p> </li> <li> <p>Fork the repository and create a new branch for your feature or bug fix.</p> </li> <li>Write clean and concise code that follows the established coding style.</li> <li>Create detailed and thorough documentation for any new features or changes.</li> <li>Write and run tests for your code.</li> <li>Submit a pull request with your changes.</li> </ul>"},{"location":"projects/archive/yuimusic-discord-bot/#license","title":"\ud83d\udd10 License","text":"<p>Distributed under the Apache-2.0 license License. See  for more information.</p>"},{"location":"projects/snippets/hotstar-subtitle/","title":"Hotstar subtitle","text":"<p>Last updated: September 8, 2019</p> <pre><code>// ==UserScript==\n// @name         Change subtitle style\n// @namespace    http://tampermonkey.net/\n// @version      1.0\n// @description  Hostar's subtitle kinda sucks... so\n// @author       @lrmn\n// @match        https://www.hotstar.com/*\n// @icon         https://www.google.com/s2/favicons?domain=hotstar.com\n// @grant        none\n// ==/UserScript==\n\n(function() {\n  'use strict';\n  // You can customize this\n  const fontWeight = \"600!important\";\n  const stroke = \"1px black\";\n  const fontSize = \"42px!important\";\n  const backgroundColor = \"transparent!important\";\n\n  const styleSheet = document.createElement('style');\n  styleSheet.type = \"text/css\"\n  styleSheet.innerHTML = `\n    .subtitle-container .cues-container .shaka-text-container span{\n      font-size:${fontSize};\n      font-weight:${fontWeight};\n      background-color:${backgroundColor};\n      -webkit-text-stroke:${stroke};\n    }\n  `\n\n  document.head.appendChild(styleSheet)\n\n})();\n</code></pre>"},{"location":"projects/snippets/hotstar-subtitle/#how-to-use","title":"How to use?","text":"<p>Import this script to tampermonkey.</p>"},{"location":"projects/snippets/label-encoder/","title":"Label encoder","text":"<p>Last updated: October 6, 2019</p> <pre><code>def encode_label(df, return_object=False, using_class=False):\n  # function to encode label to number and return new dataframe\n  from sklearn.preprocessing import LabelEncoder\n  temp = df.copy()\n  class_list = {}\n  objList = temp.select_dtypes(include = \"object\").columns\n  for feat in objList:\n    le = LabelEncoder()\n    if using_class:\n      le = using_class[feat]\n    else:\n      le = le.fit(temp[feat].astype(str))\n      class_list.update({feat:le})\n    temp[feat] = le.transform(temp[feat].astype(str))\n  # if you wanna return le object\n  if return_object:\n    return temp, class_list\n  return temp\n\n# how to use\ndf_encoded, le_objects = encode_label(df, return_object=True)\n\n#for example, you wanna encode your test data\n#and you need pre-trained encoder from your data train\ndf_test_encoded, le_test_objects = encode_label(df_test, return_object=True, using_class=le_objects)\n</code></pre>"},{"location":"projects/snippets/quick-sort/","title":"Quick sort","text":"<p>Last updated: October 18, 2019</p> <pre><code>const arr = [0, 2, 4, 5, 1, 3, 3, 7, 6, 9 ,2]\n// arr.sort()\nconst swap = (items, leftIndex, rightIndex)=&gt;{\nlet temp = items[leftIndex];\nitems[leftIndex] = items[rightIndex];\nitems[rightIndex] = temp;\n}\nconst sort = (arr)=&gt;{\nquicksort(arr, 0, arr.length - 1)\n}\nconst quicksort = (arr, left, right)=&gt;{\nif (left &gt;= right){\nreturn;\n}\nlet pivot = arr[Math.floor((left + right) / 2)]\nlet next = swapper(arr, left, right, pivot)\nquicksort(arr, left, next - 1)\nquicksort(arr, next , right)\n}\nconst swapper = (arr, left, right, pivot) =&gt;{\nwhile(left &lt;= right){\nwhile(arr[left] &lt; pivot){\nleft++;\n}\nwhile(arr[right] &gt; pivot){\nright--;\n}\nif(right &gt;= left){\nswap(arr,left,right)\nleft++;\nright--;\n}\n}\nreturn left\n}\n\nsort(arr)\n</code></pre>"},{"location":"projects/snippets/remove-undefined-key/","title":"Remove undefined key","text":"<p>Last updated: October 19, 2019</p> <pre><code>Object.keys(obj).forEach(key =&gt; obj[key] === undefined &amp;&amp; delete obj[key])\n</code></pre>"},{"location":"projects/snippets/remove-word/","title":"Remove word","text":"<p>Last updated: October 26, 2019</p> <pre><code>import re\n\ndatasets = [\"aaaaa bbbbb cccc\", \"ccccc bbbb xxxxxxx\", \"xxxxxx zzzz zaaaaaa\"]\nhapus_kata = [\"aaaaa\", \"zzzz\"]\n\nfor idx_data in range(len(datasets)):\n  for idx_kata in range(len(hapus_kata)):\n    kata_baru = re.sub(rf\"\\b{hapus_kata[idx_kata]}\\b\", '', datasets[idx_data]).strip()\n    datasets[idx_data] = kata_baru\n</code></pre>"},{"location":"projects/snippets/sieve-of-eratosthenes/","title":"Sieve of eratosthenes","text":"<p>Last updated: November 4, 2019</p> <pre><code>const generatePrime = max =&gt; {\nlet sieve = [2,3,5,7,11,13,17,19,23,29,31,37];\nconst isPrimeFromSieve = num =&gt; {\nvar max = Math.ceil(Math.sqrt(num));\nfor (let i = 0; i &lt; sieve.length; i++) {\nif (num % sieve[i] === 0) return false;\nelse if (max &lt; sieve[i]) return true;\n}\nreturn true;\n}\nlet current = sieve[sieve.length - 1] + 2;\nwhile (current &lt;= max) {\nif (isPrimeFromSieve(current)) sieve.push(current);\ncurrent += 2;\n}\nreturn sieve\n}\n\n//EXAMPLE\n//generate prime number from 1 to 100\nconsole.log(generatePrime(100))\n</code></pre>"}]}